/**
 * app.js - Main Application Entry Point
 * ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ DOMContentLoaded
 */

/**
 * ===================
 * APPLICATION INITIALIZATION
 * ===================
 */

/**
 * WebSocket Message Handler
 */
function handleWebSocketMessage(data) {
    console.log('üì® WebSocket message received:', data);
    
    try {
        switch (data.type) {
            case 'initial_state':
                console.log('üéØ Initial state from WebSocket');
                if (data.payload && data.payload.shelf_state) {
                    ShelfState.setShelfState(data.payload.shelf_state);
                    ShelfUI.renderShelfGrid();
                }
                break;
                
            case 'new_job':
                console.log('üìã New job from WebSocket');
                if (data.payload) {
                    ShelfState.addToQueue(data.payload);
                    ShelfQueue.renderAll();
                    ShelfNotifications.showNotification(
                        `‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà: ${data.payload.lot_no}`,
                        'info'
                    );
                }
                break;
                
            case 'jobs_reloaded':
                console.log('üîÑ Jobs reloaded from WebSocket');
                // Re-sync queue from backend
                ShelfServices.syncQueueFromBackend().then(() => {
                    ShelfQueue.renderAll();
                    ShelfNotifications.showNotification('‡∏Ñ‡∏¥‡∏ß‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï', 'info');
                });
                break;
                
            case 'job_completed':
                console.log('‚úÖ Job completed notification from WebSocket');
                const payload = data.payload || data;
                
                // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå active job
                ShelfState.removeActiveJob();
                
                // ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å queue
                if (payload.completedJobId) {
                    ShelfState.removeFromQueue(payload.completedJobId);
                }
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï shelf state
                if (payload.shelf_state) {
                    ShelfState.setShelfState(payload.shelf_state);
                }
                
                // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå LED
                ShelfServices.clearLED();
                
                // ‡πÅ‡∏™‡∏î‡∏á notification
                if (payload.lot_no) {
                    ShelfNotifications.showNotification(
                        `‡∏á‡∏≤‡∏ô ${payload.lot_no} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`,
                        'success'
                    );
                }
                
                // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä UI
                ShelfQueue.renderAll();
                break;
                
            case 'job_warning':
                console.log('‚ö†Ô∏è Job warning from WebSocket');
                if (data.payload && data.payload.message) {
                    ShelfNotifications.showNotification(
                        `‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ${data.payload.message}`,
                        'warning'
                    );
                }
                break;
                
            case 'job_error':
                console.log('‚ùå Job error from WebSocket');
                if (data.payload && data.payload.message) {
                    ShelfNotifications.showNotification(
                        `‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.payload.message}`,
                        'error'
                    );
                }
                break;
                
            case 'job_canceled':
                console.log('üö´ Job canceled from WebSocket');
                if (data.payload) {
                    // ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å queue
                    if (data.payload.lot_no) {
                        const queue = ShelfState.getQueue();
                        const filteredQueue = queue.filter(job => job.lot_no !== data.payload.lot_no);
                        ShelfState.setQueue(filteredQueue);
                    }
                    
                    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå active job ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                    const activeJob = ShelfState.getActiveJob();
                    if (activeJob && activeJob.lot_no === data.payload.lot_no) {
                        ShelfState.removeActiveJob();
                    }
                    
                    ShelfQueue.renderAll();
                    ShelfNotifications.showNotification(
                        `‡∏á‡∏≤‡∏ô ${data.payload.lot_no} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`,
                        'warning'
                    );
                }
                break;
                
            case 'system_reset':
                console.log('üîÑ System reset from WebSocket');
                // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á
                ShelfState.setQueue([]);
                ShelfState.removeActiveJob();
                ShelfState.initializeShelfState();
                ShelfServices.clearLED();
                ShelfQueue.renderAll();
                ShelfNotifications.showNotification('‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï', 'info');
                break;
                
            case 'shelf_state_updated':
                console.log('üîÑ Shelf state updated notification from WebSocket');
                if (data.shelf_state || (data.payload && data.payload.shelf_state)) {
                    const shelfState = data.shelf_state || data.payload.shelf_state;
                    ShelfState.setShelfState(shelfState);
                    ShelfUI.renderShelfGrid();
                }
                break;
                
            case 'queue_updated':
                console.log('üìã Queue updated notification from WebSocket');
                const queueData = data.queue || (data.payload && data.payload.queue);
                if (Array.isArray(queueData)) {
                    ShelfState.setQueue(queueData);
                    ShelfQueue.renderAll();
                }
                break;
                
            case 'error':
                console.error('‚ùå WebSocket error:', data.message);
                ShelfNotifications.showNotification(
                    `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${data.message}`,
                    'error'
                );
                break;
                
            case 'lms_response':
                console.log('üìã LMS response from WebSocket:', data);
                if (data.lms_data) {
                    ShelfNotifications.showLMSNotification(data.lms_data);
                }
                break;
                
            default:
                console.log('üì® Unknown WebSocket message type:', data.type);
        }
    } catch (error) {
        console.error('‚ùå Error handling WebSocket message:', error);
    }
}

/**
 * Hydrate application state from localStorage
 */
function hydrateFromLocalStorage() {
    try {
        // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô queue ‡∏à‡∏≤‡∏Å localStorage
        const storedQueue = localStorage.getItem(ShelfState.QUEUE_KEY);
        if (storedQueue) {
            const queue = JSON.parse(storedQueue);
            if (Array.isArray(queue)) {
                ShelfState.setQueue(queue);
                console.log(`üíæ Restored ${queue.length} jobs from localStorage`);
            }
        }
        
        // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô active job ‡∏à‡∏≤‡∏Å localStorage
        const storedActiveJob = localStorage.getItem(ShelfState.ACTIVE_JOB_KEY);
        if (storedActiveJob && storedActiveJob !== 'null') {
            const activeJob = JSON.parse(storedActiveJob);
            if (activeJob && activeJob.lot_no) {
                ShelfState.setActiveJob(activeJob);
                console.log(`üíæ Restored active job: ${activeJob.lot_no}`);
            }
        }
        
        // ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô shelf state ‡∏à‡∏≤‡∏Å localStorage
        const storedShelfState = localStorage.getItem(ShelfState.GLOBAL_SHELF_STATE_KEY);
        if (storedShelfState) {
            const shelfState = JSON.parse(storedShelfState);
            if (Array.isArray(shelfState)) {
                ShelfState.setShelfState(shelfState);
                console.log(`üíæ Restored shelf state with ${shelfState.length} cells`);
            }
        }
        
        console.log('üíæ localStorage hydration complete');
        
    } catch (error) {
        console.error('‚ùå Error hydrating from localStorage:', error);
        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    }
}

/**
 * Initialize application
 */
async function initializeApplication() {
    console.log('üìÑ DOM Content Loaded - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
    
    try {
        // 0. Hydrate ‡∏à‡∏≤‡∏Å localStorage ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô
        console.log('üíæ Step 0: Hydrate from localStorage');
        hydrateFromLocalStorage();
        
        // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shelf name ‡πÅ‡∏•‡∏∞ ID ‡∏Å‡πà‡∏≠‡∏ô
        console.log('üè∑Ô∏è Step 1: Initialize shelf name and ID');
        await ShelfServices.initializeShelfName();
        
        // 2. ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ shelf
        console.log('‚öôÔ∏è Step 2: Load shelf configuration');
        const configLoaded = await ShelfServices.loadShelfConfig();
        
        if (!configLoaded) {
            console.warn('‚ö†Ô∏è Using fallback configuration');
        }
        
        // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á shelf grid structure
        console.log('üèóÔ∏è Step 3: Create shelf grid structure');
        const shelfGrid = document.getElementById('shelfGrid');
        if (shelfGrid) {
            ShelfUI.createShelfGridStructure();
        }
        
        // 4. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô shelf state
        console.log('üìä Step 4: Initialize shelf state');
        ShelfState.initializeShelfState();
        
        // 5. ‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway
        console.log('üìã Step 5: Load pending jobs');
        await ShelfServices.loadPendingJobsFromGateway();
        
        // 6. ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏¥‡∏ß‡∏à‡∏≤‡∏Å backend
        console.log('üîÑ Step 6: Sync queue from backend');
        await ShelfServices.syncQueueFromBackend();
        
        // 7. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä shelf state ‡∏à‡∏≤‡∏Å server
        console.log('üì¶ Step 7: Restore shelf state from server');
        await ShelfServices.refreshShelfStateFromServer();
        
        // 8. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ WebSocket
        console.log('üîå Step 8: Setup WebSocket connection');
        ShelfServices.setupWebSocket(handleWebSocketMessage);
        
        // 9. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event listeners
        console.log('üëÇ Step 9: Setup event listeners');
        setupEventListeners();
        
        // 10. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• UI ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        console.log('üé® Step 10: Initial render');
        ShelfQueue.renderAll();
        
        console.log('‚úÖ Application initialized successfully');
        
    } catch (error) {
        console.error('‚ùå Failed to initialize application:', error);
        ShelfNotifications.showNotification(
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
            'error'
        );
    }
}

/**
 * Setup Event Listeners
 */
function setupEventListeners() {
    // Window resize handler
    window.addEventListener('resize', () => {
        ShelfUI.updateCellSizes();
    });
    
    // Shelf grid mode observer
    const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                ShelfUI.updateCellSizes();
            }
        });
    });
    
    // ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π main-container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á class
    const mainContainerElement = document.querySelector('.main-container');
    if (mainContainerElement) {
        observer.observe(mainContainerElement, { 
            attributes: true, 
            attributeFilter: ['class'] 
        });
    }
    
    // Setup keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        // Escape key to go back
        if (e.key === 'Escape') {
            const activeJob = ShelfState.getActiveJob();
            if (activeJob) {
                ShelfQueue.goBackToQueue();
            } else {
                const uiState = ShelfState.getUIState();
                if (!uiState.showMainWithQueue) {
                    ShelfQueue.goBackToMain();
                }
            }
        }
        
        // F5 to refresh (prevent default and do custom refresh)
        if (e.key === 'F5') {
            e.preventDefault();
            console.log('üîÑ Manual refresh triggered');
            debouncedRefresh();
        }
    });
    
    // Setup LOT input handler
    const lotInput = document.getElementById('lot-no-input');
    if (lotInput) {
        lotInput.addEventListener('keyup', (e) => {
            if (e.key === 'Enter') {
                ShelfQueue.handleLotSearch();
            }
        });
    }
    
    console.log('üëÇ Event listeners setup complete');
}

/**
 * Debounced refresh to prevent multiple rapid refreshes
 */
let refreshTimeout = null;
let isRefreshing = false;

function debouncedRefresh() {
    if (isRefreshing) {
        console.log('üîÑ Refresh already in progress, skipping...');
        return;
    }
    
    if (refreshTimeout) {
        clearTimeout(refreshTimeout);
    }
    
    refreshTimeout = setTimeout(() => {
        refreshApplication();
        refreshTimeout = null;
    }, 300); // 300ms debounce
}

/**
 * Manual Application Refresh
 */
async function refreshApplication() {
    if (isRefreshing) {
        console.log('üîÑ Refresh already in progress, aborting...');
        return;
    }
    
    isRefreshing = true;
    
    try {
        console.log('üîÑ Refreshing application...');
        
        // Refresh shelf state
        await ShelfServices.refreshShelfStateFromServer();
        
        // Sync queue
        await ShelfServices.syncQueueFromBackend();
        
        // Re-render everything
        await ShelfQueue.renderAll();
        
        ShelfNotifications.showNotification('‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô', 'success');
        console.log('‚úÖ Application refresh complete');
        
    } catch (error) {
        console.error('‚ùå Failed to refresh application:', error);
        ShelfNotifications.showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä', 'error');
    } finally {
        isRefreshing = false;
    }
}

/**
 * ===================
 * UTILITY FUNCTIONS (For Console Access)
 * ===================
 */

/**
 * Console utilities for debugging
 */
function setupConsoleUtilities() {
    // Expose utility functions to console for debugging
    window.ShelfDebug = {
        // State inspection
        getState: () => ({
            config: ShelfState.getShelfConfig(),
            totalLevels: ShelfState.getTotalLevels(),
            maxBlocks: ShelfState.getMaxBlocks(),
            capacities: ShelfState.getCellCapacities(),
            shelfId: ShelfState.getShelfId(),
            uiState: ShelfState.getUIState(),
            activeJob: ShelfState.getActiveJob(),
            queue: ShelfState.getQueue(),
            shelfState: ShelfState.getShelfState()
        }),
        
        // Manual actions
        refresh: refreshApplication,
        clearQueue: () => {
            ShelfState.setQueue([]);
            ShelfQueue.renderAll();
            console.log('üßπ Queue cleared');
        },
        clearActiveJob: () => {
            ShelfState.removeActiveJob();
            ShelfQueue.renderAll();
            console.log('üßπ Active job cleared');
        },
        clearLED: () => {
            ShelfServices.clearLED();
            console.log('üí° LEDs cleared');
        },
        
        // Service calls
        loadPendingJobs: ShelfServices.loadPendingJobsFromGateway,
        syncQueue: ShelfServices.syncQueueFromBackend,
        initShelfName: ShelfServices.initializeShelfName,
        loadLayout: ShelfServices.loadLayoutFromGateway,
        
        // Reset flags
        resetPendingJobsFlag: () => {
            ShelfState.setPendingJobsLoaded(false);
            console.log('üîÑ Reset pending jobs flag');
        },
        
        // Force refresh grid
        refreshGrid: ShelfUI.refreshShelfGrid,
        
        // Additional debug utilities
        clearCache: clearCacheAndRefresh,
        hydrateLocal: hydrateFromLocalStorage,
        debouncedRefresh: debouncedRefresh,
        
        // Global function exposure check
        checkGlobalFunctions: () => {
            const globals = ['selectJob', 'goBackToMain', 'goToQueueSelection', 'handleLotSearch', 'findAndSelectJobByLot'];
            const missing = globals.filter(fn => typeof window[fn] !== 'function');
            if (missing.length > 0) {
                console.warn('‚ö†Ô∏è Missing global functions:', missing);
                return { missing, available: globals.filter(fn => typeof window[fn] === 'function') };
            }
            console.log('‚úÖ All global functions are exposed');
            return { missing: [], available: globals };
        },
        
        // localStorage inspector
        inspectLocalStorage: () => {
            return {
                activeJob: localStorage.getItem(ShelfState.ACTIVE_JOB_KEY),
                queue: localStorage.getItem(ShelfState.QUEUE_KEY),
                shelfState: localStorage.getItem(ShelfState.GLOBAL_SHELF_STATE_KEY),
                shelfConfig: localStorage.getItem('shelfConfig'),
                cellCapacities: localStorage.getItem('cellCapacities')
            };
        }
    };
    
    console.log('üîß Debug utilities available at window.ShelfDebug');
}

/**
 * ===================
 * APPLICATION ENTRY POINT
 * ===================
 */

// Main entry point
document.addEventListener('DOMContentLoaded', async () => {
    // Setup console utilities first
    setupConsoleUtilities();
    
    // Initialize the application
    await initializeApplication();
});

/**
 * ===================
 * GLOBAL ERROR HANDLER
 * ===================
 */

// Global error handler
window.addEventListener('error', (event) => {
    console.error('üö® Global error:', event.error);
    ShelfNotifications.showNotification(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        'error'
    );
});

// Unhandled promise rejection handler
window.addEventListener('unhandledrejection', (event) => {
    console.error('üö® Unhandled promise rejection:', event.reason);
    ShelfNotifications.showNotification(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
        'error'
    );
});

/**
 * ===================
 * EXPORT APP MODULE
 * ===================
 */

/**
 * ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå cache ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î configuration
 */
async function clearCacheAndRefresh() {
    console.log('üîÑ Clearing cache and refreshing...');
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå localStorage ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å key
    localStorage.removeItem(ShelfState.GLOBAL_SHELF_STATE_KEY);
    localStorage.removeItem(ShelfState.QUEUE_KEY);
    localStorage.removeItem(ShelfState.ACTIVE_JOB_KEY);
    localStorage.removeItem('shelfConfig');
    localStorage.removeItem('cellCapacities');
    localStorage.removeItem('shelfId');
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå state ‡πÉ‡∏ô memory
    ShelfState.setQueue([]);
    ShelfState.removeActiveJob();
    ShelfServices.clearLED();
    
    // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î configuration
    await ShelfServices.loadShelfConfig();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á shelf grid ‡πÉ‡∏´‡∏°‡πà
    ShelfUI.refreshShelfGrid();
    
    // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î shelf state
    await ShelfServices.refreshShelfStateFromServer();
    
    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä UI
    ShelfQueue.renderAll();
    
    console.log('‚úÖ Cache cleared and refreshed');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô HTML onclick handlers  
function selectJob(jobId) {
    console.log(`üéØ Selecting job: ${jobId}`);
    ShelfQueue.selectJob(jobId);
}

function goBackToMain() {
    console.log('üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å');
    window.location.reload();
}

function handleLotSearch(lotNo) {
    console.log(`üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ LOT: ${lotNo}`);
    // Implementation based on original ui_logic.js behavior
    return false; // Placeholder
}

function onCellClick(cellId) {
    console.log(`üì± Cell clicked: ${cellId}`);
    return ShelfUI.handleCellClick?.(cellId) || false;
}

if (typeof window !== 'undefined') {
    window.ShelfApp = {
        initialize: initializeApplication,
        refresh: refreshApplication,
        clearCacheAndRefresh,
        handleWebSocketMessage,
        setupEventListeners,
        setupConsoleUtilities
    };
    
    // Global functions for HTML onclick handlers
    window.selectJob = selectJob;
    window.goBackToMain = goBackToMain;
    window.handleLotSearch = handleLotSearch;
    window.onCellClick = onCellClick;
}

console.log('üì± Smart Shelf Application loaded');