// --- Cell Preview: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (IMPROVED DESIGN) ---
function renderCellPreview({ level, block, lots, targetLotNo, isPlaceJob = false, newLotTrayCount = 0 }) {
    const container = document.getElementById('cellPreviewContainer');
    if (!container) return;

    // lots: array of {lot_no, tray_count}
    if (!Array.isArray(lots)) lots = [];

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Place job ‡πÉ‡∏´‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    let previewLots = [...lots];
    if (isPlaceJob && targetLotNo && newLotTrayCount > 0) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° lot ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡∏•‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (LIFO)
        previewLots.push({
            lot_no: targetLotNo,
            tray_count: newLotTrayCount
        });
    }

    let html = '';
    html += `<h3>Level ${level} Block ${block}</h3>`;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏° action
 
    
    html += `<div class="block-preview">`;

    if (previewLots.length > 0) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ lot ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô)
        for (let i = previewLots.length - 1; i >= 0; i--) {
            const lot = previewLots[i];
            const trayCount = parseInt(lot.tray_count) || 0;
            const isTarget = lot.lot_no === targetLotNo;
            const isNewLot = isPlaceJob && i === previewLots.length - 1 && isTarget;

            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô tray_count ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á cell
            const maxCapacity = getCellCapacity(level, block); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á cell ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 24
            const maxContainerHeight = 300; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á container (350px - padding)
            const heightRatio = trayCount / maxCapacity;
            const height = Math.max(heightRatio * maxContainerHeight, 8); // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏õ‡πá‡∏ô 8px ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

            // ‡∏ï‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠ lot ‡∏ñ‡πâ‡∏≤‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö desktop ‡πÉ‡∏ä‡πâ 15 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
            const displayName = lot.lot_no.length > 15 ?
                lot.lot_no.substring(0, 15) + '...' :
                lot.lot_no;

            let itemClass = 'lot-item';
            if (isTarget) itemClass += ' target-lot';
            if (isNewLot) itemClass += ' new-lot';

            html += `<div class="${itemClass}" style="height: ${height}px;" title="${lot.lot_no} - ${trayCount} trays">`;
            html += `<span class="lot-name ${isTarget ? 'lot-name-large' : ''}">${displayName}</span>`;
            if (isNewLot) {
                html += `<span class="new-badge"> NEW</span>`;
            }
            html += `</div>`;
        }
    } else {
        html += `<div class="lot-item empty-slot">`;
        html += `<span class="lot-name">(empty)</span>`;
        html += `</div>`;
    }

    html += `</div>`;
    container.innerHTML = html;
}
// Utility: Get lots in a specific cell (level, block)
function getLotsInCell(level, block) {
    const shelfState = JSON.parse(localStorage.getItem(GLOBAL_SHELF_STATE_KEY) || '[]');
    for (const cellData of shelfState) {
        let cellLevel, cellBlock, cellLots;
        if (Array.isArray(cellData)) {
            cellLevel = cellData[0];
            cellBlock = cellData[1];
            cellLots = cellData[2];
        } else if (cellData && typeof cellData === 'object') {
            ({ level: cellLevel, block: cellBlock, lots: cellLots } = cellData);
        }
        if (String(cellLevel) === String(level) && String(cellBlock) === String(block)) {
            return Array.isArray(cellLots) ? cellLots : [];
        }
    }
    return [];
}

// Utility: Get cell capacity (actual max trays for a specific cell)
function getCellCapacity(level, block) {
    const cellKey = `${level}-${block}`;
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Backend ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    return CELL_CAPACITIES[cellKey] || 24; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ 24 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
}

// Example usage: log lots in Level 1, Block 2
// console.log(getLotsInCell(1, 2));
        /**
         * ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ job ‡πÉ‡∏ô queue (queueSelectionView)
         */
        function controlLEDByQueue() {
            const queue = getQueue();
            if (!queue || queue.length === 0) {
                console.log('üí° No queue items - clearing LEDs');
                fetch('/api/led/clear', { method: 'POST' });
                return;
            }
            
            console.log(`üí° LED Queue Mode: ${queue.length} jobs`);
            
            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° batch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å job ‡πÉ‡∏ô queue
            const positions = queue.map(job => ({
                position: `L${Number(job.level)}B${Number(job.block)}`,
                r: 0, g: 150, b: 255 // ‡∏ü‡πâ‡∏≤‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö queue
            }));
            
            fetch('/api/led', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    positions,
                    clear_first: true 
                })
            })
                .then(response => {
                    if (!response.ok) {
                        console.error('üí° LED Queue batch failed:', response.status);
                        return response.text().then(text => console.error('Details:', text));
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        console.log('üí° LED Queue batch success:', data);
                    }
                })
                .catch(error => {
                    console.error('üí° LED Queue batch error:', error);
                });
        }
        const ACTIVE_JOB_KEY = 'activeJob';
        const GLOBAL_SHELF_STATE_KEY = 'globalShelfState';
        const QUEUE_KEY = 'shelfQueue';

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏°‡∏î main-with-queue ‡πÅ‡∏•‡∏∞ auto-return timer
        let showMainWithQueue = false;
        let autoReturnTimer = null;
        let activityDetectionActive = false;

        const queueSelectionView = document.getElementById('queueSelectionView');
        const activeJobView = document.getElementById('activeJobView');
        const queueListContainer = document.getElementById('queueListContainer');
        const mainView = document.getElementById('mainView');
        const shelfGrid = document.getElementById('shelfGrid');
        const mainContainer = document.getElementById('mainContainer');        localStorage.removeItem(ACTIVE_JOB_KEY);

        let SHELF_CONFIG = {};
        let TOTAL_LEVELS = 0;
        let MAX_BLOCKS = 0;
        let shelf_id = null; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö shelf_id

        // Flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å pending jobs ‡∏ã‡πâ‡∏≥
        let pendingJobsLoaded = false;

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Force Refresh Shelf Grid Structure
        function refreshShelfGrid() {
            console.log('üîÑ Force refreshing shelf grid with config:', SHELF_CONFIG);
            
            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡πÉ‡∏´‡∏°‡πà
            localStorage.removeItem(GLOBAL_SHELF_STATE_KEY);
            
            if (shelfGrid) {
                createShelfGridStructure();
                initializeShelfState(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° config ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                renderShelfGrid();
                console.log('‚úÖ Shelf grid refreshed successfully');
            }
        }

        // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏£‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á
        let CELL_CAPACITIES = {};

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Server
        async function loadShelfConfig() {
            try {
                // ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î layout ‡∏à‡∏≤‡∏Å Gateway ‡∏Å‡πà‡∏≠‡∏ô
                const layoutLoaded = await loadLayoutFromGateway();
                
                // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î layout ‡∏à‡∏≤‡∏Å Gateway ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ config ‡∏õ‡∏Å‡∏ï‡∏¥
                if (!layoutLoaded) {
                    const response = await fetch('/api/shelf/config');
                    const data = await response.json();
                    SHELF_CONFIG = data.config;
                    TOTAL_LEVELS = data.total_levels;
                    MAX_BLOCKS = data.max_blocks;
                    CELL_CAPACITIES = data.cell_capacities || {}; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏
                    console.log('üìê Shelf configuration loaded from server:', SHELF_CONFIG);
                    console.log('üìè Cell capacities loaded:', CELL_CAPACITIES);
                }
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á grid structure ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î config
                if (shelfGrid) {
                    refreshShelfGrid(); // ‡πÉ‡∏ä‡πâ refreshShelfGrid ‡πÅ‡∏ó‡∏ô
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Failed to load shelf config from server, using local config:', SHELF_CONFIG);
                // Fallback capacities
                CELL_CAPACITIES = {
                    '1-1': 22, '1-2': 24, '1-3': 24, '1-4': 24, '1-5': 24, '1-6': 24
                };
                console.log('üìè Using fallback cell capacities:', CELL_CAPACITIES);
                // ‡πÉ‡∏ä‡πâ config ‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô‡πÅ‡∏ó‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á grid
                if (shelfGrid) {
                    refreshShelfGrid();
                }
            }
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î layout ‡∏à‡∏≤‡∏Å Gateway
        async function loadLayoutFromGateway() {
            try {
                console.log('üîÑ Loading layout from Gateway...');
                
                const response = await fetch('/api/shelf/layout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        shelf_id: shelf_id || "PC2", // ‡πÉ‡∏ä‡πâ shelf_id ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
                        update_flg: "0", // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        slots: {}
                    })
                });

                if (response.ok) {
                    const layoutData = await response.json();
                    
                    if (layoutData.status === "success" && layoutData.layout) {
                        console.log('‚úÖ Gateway layout loaded:', layoutData.layout);
                        
                        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Gateway layout ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà Frontend ‡πÉ‡∏ä‡πâ
                        const gatewayLayout = layoutData.layout;
                        const newShelfConfig = {};
                        const newCellCapacities = {};
                        
                        for (const [positionKey, slotInfo] of Object.entries(gatewayLayout)) {
                            if (!slotInfo.active) continue; // ‡∏Ç‡πâ‡∏≤‡∏° slot ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active
                            
                            const level = parseInt(slotInfo.level);
                            const block = parseInt(slotInfo.block);
                            const capacity = parseInt(slotInfo.capacity);
                            
                            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï shelf config
                            if (!newShelfConfig[level]) {
                                newShelfConfig[level] = 0;
                            }
                            newShelfConfig[level] = Math.max(newShelfConfig[level], block);
                            
                            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cell capacities
                            const cellKey = `${level}-${block}`;
                            newCellCapacities[cellKey] = capacity;
                        }
                        
                        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï global variables
                        SHELF_CONFIG = newShelfConfig;
                        CELL_CAPACITIES = newCellCapacities;
                        TOTAL_LEVELS = Object.keys(newShelfConfig).length;
                        MAX_BLOCKS = Math.max(...Object.values(newShelfConfig));
                        
                        console.log('üìä Updated config from Gateway:', {
                            SHELF_CONFIG,
                            CELL_CAPACITIES,
                            TOTAL_LEVELS,
                            MAX_BLOCKS
                        });
                        
                        // ‡πÅ‡∏™‡∏î‡∏á notification
                        showNotification(`Layout ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Gateway ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${Object.keys(gatewayLayout).length} ‡∏ä‡πà‡∏≠‡∏á)`, 'success');
                        
                        return true;
                    }
                }
                
                console.log('‚ö†Ô∏è Failed to load layout from Gateway, using local config');
                return false;
                
            } catch (error) {
                console.error('‚ùå Error loading layout from Gateway:', error);
                return false;
            }
        }
        
        // üîº END OF FLEXIBLE CONFIGURATION üîº

        // üîΩ ADD THIS FUNCTION üîΩ
        function showNotification(message, type = 'info', options = {}) {
            console.log(`üì¢ ${type.toUpperCase()}: ${message}`);
            
            // ‡∏•‡∏ö notification ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô persistent notifications ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà persistent notification ‡πÉ‡∏´‡∏°‡πà)
            if (!options.persistent) {
                const existingNotifications = document.querySelectorAll('.notification:not(.persistent):not(#persistent-correct-shelf):not([data-persistent="true"])');
                existingNotifications.forEach(notification => {
                    notification.remove();
                });
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô persistent notification ‡πÉ‡∏´‡πâ‡∏•‡∏ö persistent ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
                const existingPersistent = document.querySelectorAll('.notification.persistent, #persistent-correct-shelf');
                existingPersistent.forEach(notification => {
                    notification.remove();
                });
            }
            
            const notification = document.createElement('div');
            notification.className = `notification ${type} ${options.persistent ? 'persistent' : ''}`;
            notification.textContent = message;
            
            // Basic styling with larger text for persistent notifications
            const fontSize = options.persistent ? '18px' : '14px';
            const fontWeight = options.persistent ? '900' : 'bold';
            const padding = options.persistent ? '20px 25px' : '15px 20px';
            
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: ${padding};
                border-radius: 8px;
                color: white;
                font-weight: ${fontWeight};
                font-size: ${fontSize};
                z-index: 1000;
                opacity: 0;
                transition: all 0.3s ease-in-out;
                transform: translateX(100%);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                max-width: 350px;
                word-wrap: break-word;
            `;
            
            // Colors based on type
            switch (type) {
                case 'success': notification.style.backgroundColor = '#28a745'; break;
                case 'error': notification.style.backgroundColor = '#dc3545'; break;
                case 'warning': notification.style.backgroundColor = '#ffc107'; notification.style.color = '#212529'; break;
                case 'info': notification.style.backgroundColor = '#17a2b8'; break;
                default: notification.style.backgroundColor = '#6c757d';
            }
            
            document.body.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(0)';
            }, 100);
            
            // Auto-remove only if not persistent
            if (!options.persistent) {
                setTimeout(() => {
                    notification.style.opacity = '0';
                    notification.style.transform = 'translateX(100%)';
                    setTimeout(() => notification.remove(), 300);
                }, 3000);
            }
        }
        
        // Function to clear persistent notifications
        function clearPersistentNotifications() {
            // ‡∏•‡πâ‡∏≤‡∏á notification ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
            const persistentNotifications = document.querySelectorAll('.notification.persistent, #persistent-correct-shelf, [data-persistent="true"]');
            persistentNotifications.forEach(notification => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 300);
            });
            console.log('üßπ Cleared persistent notifications');
        }

        // Function to protect persistent notifications from being removed
        function protectPersistentNotifications() {
            const persistentNotification = document.getElementById('persistent-correct-shelf');
            if (persistentNotification) {
                // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ override remove method
                const originalRemove = persistentNotification.remove;
                persistentNotification.remove = function() {
                    console.log('üõ°Ô∏è Prevented removal of persistent notification');
                    // ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                };
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô style ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                setInterval(() => {
                    if (persistentNotification.parentNode && persistentNotification.style.display === 'none') {
                        persistentNotification.style.display = 'block';
                        console.log('üîß Restored persistent notification visibility');
                    }
                }, 1000);
            }
        }

        /**
         * ‡πÅ‡∏™‡∏î‡∏á Rich Notification ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î LMS
         * @param {Object} lmsData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LMS
         * @param {string} type - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó notification
         */
        function showLMSNotification(lmsData, type = 'success') {
            console.log(`üìã LMS Notification:`, lmsData);
            
            // ‡∏•‡∏ö notification ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô persistent notifications)
            const existingNotifications = document.querySelectorAll('.notification:not(.persistent):not(#persistent-correct-shelf)');
            existingNotifications.forEach(notification => {
                notification.remove();
            });
            
            const notification = document.createElement('div');
            notification.className = `notification lms-notification ${type}`;
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rich notification
            notification.innerHTML = `
                <div style="display: flex; align-items: center; margin-bottom: 8px;">
                    <span style="font-size: 16px; margin-right: 8px;">üìã</span>
                    <strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LMS</strong>
                </div>
                <div style="font-size: 14px; line-height: 1.4;">
                    <div>‚Ä¢ LOT: <strong>${lmsData.lotNo}</strong></div>
                    <div>‚Ä¢ ‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á: <strong>${lmsData.correctShelf}</strong></div>
                    <div>‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: <strong>${lmsData.placeFlg === "1" ? "‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á" : "‡∏´‡∏¢‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á"}</strong></div>
                </div>
            `;
            
            // Styling
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 20px;
                border-radius: 12px;
                color: white;
                z-index: 1000;
                opacity: 0;
                transition: all 0.3s ease-in-out;
                transform: translateX(100%);
                box-shadow: 0 6px 20px rgba(0,0,0,0.15);
                max-width: 380px;
                min-width: 300px;
                border-left: 4px solid rgba(255,255,255,0.3);
            `;
            
            // Colors based on type
            switch (type) {
                case 'success': 
                    notification.style.background = 'linear-gradient(135deg, #28a745, #20c997)'; 
                    break;
                case 'error': 
                    notification.style.background = 'linear-gradient(135deg, #dc3545, #e74c3c)'; 
                    break;
                case 'warning': 
                    notification.style.background = 'linear-gradient(135deg, #ffc107, #f39c12)';
                    notification.style.color = '#212529';
                    break;
                case 'info': 
                    notification.style.background = 'linear-gradient(135deg, #17a2b8, #3498db)'; 
                    break;
                default: 
                    notification.style.background = 'linear-gradient(135deg, #6c757d, #95a5a6)';
            }
            
            document.body.appendChild(notification);
            
            // Animate in
            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(0)';
            }, 100);
            
            // Animate out and remove (longer duration for rich content)
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(100%)';
                setTimeout(() => notification.remove(), 300);
            }, 5000); // 5 seconds for rich notification
        }
        // üîº END OF ADDED FUNCTION üîº

        function initializeShelfState() {
            if (!localStorage.getItem(GLOBAL_SHELF_STATE_KEY)) {
                const defaultState = [];
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏° SHELF_CONFIG
                for (let level = 1; level <= TOTAL_LEVELS; level++) {
                    const blocksInThisLevel = SHELF_CONFIG[level];
                    for (let block = 1; block <= blocksInThisLevel; block++) {
                        defaultState.push([level, block, 0]); // [level, block, hasItem]
                    }
                }
                localStorage.setItem(GLOBAL_SHELF_STATE_KEY, JSON.stringify(defaultState));
            }
        }

        function cleanInvalidJobs() {
            const queue = JSON.parse(localStorage.getItem(QUEUE_KEY) || '[]');
            const cleanedQueue = queue.filter(job => job && job.lot_no && job.level && job.block);
            if (cleanedQueue.length !== queue.length) {
                console.warn("Removed invalid jobs from the queue.");
                localStorage.setItem(QUEUE_KEY, JSON.stringify(cleanedQueue));
            }
            return cleanedQueue;
        }

        function getQueue() {
            return cleanInvalidJobs();
        }

        function createShelfGridStructure() {
            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå grid ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° config ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            shelfGrid.innerHTML = '';
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î shelf-frame ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î
            let shelfFrameWidth, shelfFrameHeight, cellHeight;
            // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏´‡∏°‡∏î full-shelf ‡πÅ‡∏•‡∏∞ active job
            shelfFrameWidth = 500;
            shelfFrameHeight = 475;
            cellHeight = 90;
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid container ‡∏´‡∏•‡∏±‡∏Å
            shelfGrid.style.display = 'flex';
            shelfGrid.style.flexDirection = 'column';
            shelfGrid.style.gap = '14px'; // ‡∏•‡∏î gap ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á 475px
            shelfGrid.style.padding = '10px'; // ‡∏•‡∏î padding ‡∏à‡∏≤‡∏Å 12px ‡πÄ‡∏õ‡πá‡∏ô 10px
            shelfGrid.style.background = '#f8f9fa';
            shelfGrid.style.border = '1px solid #dee2e6';
            shelfGrid.style.width = '100%';
            shelfGrid.style.height = '100%';
            
            // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö shelf-frame ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
            const shelfFrameBorder = 16; // border ‡∏£‡∏ß‡∏° (8px √ó 2) 
            const shelfPadding = 20; // padding ‡∏£‡∏ß‡∏° (10px √ó 2)
            const availableWidth = shelfFrameWidth - shelfFrameBorder - shelfPadding;
            const gapSize = 4; // gap ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á cells
            
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Level ‡πÄ‡∏õ‡πá‡∏ô flexbox ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
            for (let level = TOTAL_LEVELS; level >= 1; level--) {
                const blocksInThisLevel = SHELF_CONFIG[level];
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ level
                const levelContainer = document.createElement('div');
                levelContainer.className = 'shelf-level';
                levelContainer.style.display = 'flex';
                levelContainer.style.gap = `${gapSize}px`;
                levelContainer.style.height = `${cellHeight}px`;
                levelContainer.style.width = '100%';
                levelContainer.style.justifyContent = 'stretch'; // ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á cells ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö level ‡∏ô‡∏µ‡πâ
                for (let block = 1; block <= blocksInThisLevel; block++) {
                    const cell = document.createElement('div');
                    cell.id = `cell-${level}-${block}`;
                    cell.className = 'shelf-cell';
                    cell.style.flex = '1'; // ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å cell ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                    cell.style.height = '100%';
                    cell.style.cursor = 'pointer';
                    cell.style.borderRadius = '4px';
                    cell.style.boxShadow = '0 1px 2px rgba(0,0,0,0.1)';
                    
                    // ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà minWidth ‡∏´‡∏£‡∏∑‡∏≠ maxWidth ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ flex ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
                    
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° click event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á cell preview
                    cell.addEventListener('click', () => {
                        const lots = getLotsInCell(level, block);
                        const activeJob = getActiveJob();
                        const targetLotNo = activeJob ? activeJob.lot_no : null;
                        renderCellPreview({ level, block, lots, targetLotNo });
                    });
                    
                    levelContainer.appendChild(cell);
                }
                
                shelfGrid.appendChild(levelContainer);
            }
            
            console.log(`üìê Created flexible shelf grid: ${TOTAL_LEVELS} levels with configuration:`, SHELF_CONFIG);
            console.log(`üìè Shelf frame: ${shelfFrameWidth}√ó${shelfFrameHeight}px | Available width: ${availableWidth}px | Cell height: ${cellHeight}px | Gap: ${gapSize}px`);
        }

        function getActiveJob() {
            const activeJobData = localStorage.getItem(ACTIVE_JOB_KEY);
            
            if (!activeJobData || activeJobData === 'null') {
                return null;
            }
            
            try {
                const job = JSON.parse(activeJobData);
                return job;
            } catch (error) {
                console.error('‚ùå Error parsing active job:', error);
                localStorage.removeItem(ACTIVE_JOB_KEY);
                return null;
            }
        }

        function setActiveJob(job) {
            localStorage.setItem(ACTIVE_JOB_KEY, JSON.stringify(job));
        }

        // üîΩ FIX goBackToQueue FUNCTION üîΩ
        function goBackToQueue() {
            const activeJob = getActiveJob();
            if (activeJob) {
                console.log(`üìã Returning job to queue: ${activeJob.lot_no} (ID: ${activeJob.jobId})`);
                
                // ‡πÉ‡∏™‡πà job ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ queue
                const queue = getQueue();
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ job ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô queue ‡πÅ‡∏•‡πâ‡∏ß
                if (!queue.some(job => job.jobId === activeJob.jobId)) {
                    queue.push(activeJob);
                    localStorage.setItem(QUEUE_KEY, JSON.stringify(queue));
                    console.log(`‚úÖ Job ${activeJob.lot_no} returned to queue. Queue size: ${queue.length}`);
                }
            }
            
            // Clear persistent notifications when leaving Active Job view
            clearPersistentNotifications();
            
            localStorage.removeItem(ACTIVE_JOB_KEY);
            renderAll();
        }

        // üîΩ ADD NEW FUNCTIONS FOR MAIN-WITH-QUEUE MODE üîΩ
        /**
         * ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Main ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á queue ‡πÑ‡∏ß‡πâ (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Queue Selection)
         */
        function goBackToMain() {
            console.log('üè† Going back to main view with queue preserved');
            showMainWithQueue = true;
            stopAutoReturnTimer(); // ‡∏´‡∏¢‡∏∏‡∏î timer ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            startActivityDetection(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            startAutoReturnTimer(); // ‡πÄ‡∏£‡∏¥‡πà‡∏° timer ‡πÉ‡∏´‡∏°‡πà
            renderAll();
        }

        /**
         * ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Queue Selection (‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° notification ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Main)
         */
        function goToQueueSelection() {
            console.log('üìã Going to queue selection view');
            showMainWithQueue = false;
            stopAutoReturnTimer();
            stopActivityDetection();
            renderAll();
        }

        /**
         * ‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Return Timer (7 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
         */
        function startAutoReturnTimer() {
            if (autoReturnTimer) {
                clearTimeout(autoReturnTimer);
            }
            
            console.log('‚è±Ô∏è Starting auto-return timer (7 seconds)');
            autoReturnTimer = setTimeout(() => {
                console.log('üîÑ Auto-returning to queue selection due to inactivity');
                const queue = getQueue();
                if (queue.length > 0) {
                    showMainWithQueue = false;
                    stopActivityDetection();
                    renderAll();
                    showNotification('Returned to queue due to inactivity', 'info');
                }
            }, 7000); // 7 seconds
        }

        /**
         * ‡∏´‡∏¢‡∏∏‡∏î Auto Return Timer
         */
        function stopAutoReturnTimer() {
            if (autoReturnTimer) {
                clearTimeout(autoReturnTimer);
                autoReturnTimer = null;
                console.log('‚èπÔ∏è Auto-return timer stopped');
            }
        }

        /**
         * Reset Auto Return Timer (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°)
         */
        function resetAutoReturnTimer() {
            if (showMainWithQueue && autoReturnTimer) {
                console.log('üîÑ Resetting auto-return timer due to activity');
                startAutoReturnTimer(); // ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó timer
            }
        }

        /**
         * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
         */
        function startActivityDetection() {
            if (activityDetectionActive) return;
            
            activityDetectionActive = true;
            console.log('üëÅÔ∏è Starting activity detection');
            
            // Event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
            const activityEvents = ['mousedown', 'mousemove', 'keydown', 'scroll', 'touchstart'];
            
            activityEvents.forEach(event => {
                document.addEventListener(event, resetAutoReturnTimer, { passive: true });
            });
        }

        /**
         * ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
         */
        function stopActivityDetection() {
            if (!activityDetectionActive) return;
            
            activityDetectionActive = false;
            console.log('üõë Stopping activity detection');
            
            const activityEvents = ['mousedown', 'mousemove', 'keydown', 'scroll', 'touchstart'];
            
            activityEvents.forEach(event => {
                document.removeEventListener(event, resetAutoReturnTimer, { passive: true });
            });
        }

        /**
         * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Queue Notification ‡πÅ‡∏•‡∏∞ Back to Queue
         */
        function updateQueueNotificationButton() {
            const queueBtn = document.getElementById('queueNotificationBtn');
            const queueCountBadge = document.getElementById('queueCountBadge');
            const backToQueueBtn = document.getElementById('backToQueueBtn');
            
            if (!queueBtn || !queueCountBadge) return;
            
            const queue = getQueue();
            const queueCount = queue.length;
            const activeJob = getActiveJob();
            
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏° Queue Notification (‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ main ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ queue)
            if (showMainWithQueue && queueCount > 0) {
                queueBtn.style.display = 'flex';
                queueCountBadge.textContent = queueCount;
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° pulse effect ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ queue ‡∏°‡∏≤‡∏Å
                if (queueCount >= 3) {
                    queueBtn.classList.add('pulse');
                } else {
                    queueBtn.classList.remove('pulse');
                }
            } else {
                queueBtn.style.display = 'none';
                queueBtn.classList.remove('pulse');
            }
            
            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏° Back to Queue (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ active job ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô mainView)
            if (backToQueueBtn) {
                if (activeJob && !showMainWithQueue) {
                    backToQueueBtn.style.display = 'block';
                } else {
                    backToQueueBtn.style.display = 'none';
                }
            }
        }
        // üîº END OF FIX üîº

        // --- Global: Track which cells have been logged for lots (persist across renderShelfGrid calls) ---
        if (!window.__rfid_loggedCells) window.__rfid_loggedCells = new Set();
        function renderShelfGrid() {
            // Expect shelfState as array of {level, block, lots}
            const shelfState = JSON.parse(localStorage.getItem(GLOBAL_SHELF_STATE_KEY) || '[]');
            const activeJob = getActiveJob();
            
            console.log(`üîÑ renderShelfGrid called with activeJob:`, activeJob);
            if (activeJob) {
                console.log(`üéØ Target position: L${activeJob.level}B${activeJob.block} for lot ${activeJob.lot_no}`);
            }

            // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            let wrongLevel = null, wrongBlock = null;
            if (activeJob && activeJob.error && activeJob.errorType === 'WRONG_LOCATION' && activeJob.errorMessage) {
                const match = activeJob.errorMessage.match(/L(\d+)-B(\d+)/);
                if (match) {
                    wrongLevel = Number(match[1]);
                    wrongBlock = Number(match[2]);
                }
            }

            // Clear all cells first
            for (let level = 1; level <= TOTAL_LEVELS; level++) {
                const blocksInThisLevel = SHELF_CONFIG[level];
                for (let block = 1; block <= blocksInThisLevel; block++) {
                    const cellId = `cell-${level}-${block}`;
                    const cell = document.getElementById(cellId);
                    if (!cell) continue;
                    cell.className = 'shelf-cell';
                    cell.innerHTML = '';
                }
            }

            // Render stacked lots in each cell (bottom-to-top: index 0 = bottom)
            const loggedCells = window.__rfid_loggedCells;
            if (Array.isArray(shelfState)) {
                shelfState.forEach(cellData => {
                    let level, block, lots;
                    if (Array.isArray(cellData)) {
                        level = cellData[0];
                        block = cellData[1];
                        lots = cellData[2];
                    } else if (cellData && typeof cellData === 'object') {
                        ({ level, block, lots } = cellData);
                    } else {
                        console.warn('‚ö†Ô∏è Invalid cellData in shelfState:', cellData);
                        return;
                    }
                    if (!Array.isArray(lots)) lots = [];
                    // Debug: log lots in every cell (index 0 = bottom, last = top) ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    if (lots.length > 0) {
                        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á cell
                        const totalTrayInCell = lots.reduce((sum, lot) => sum + (parseInt(lot.tray_count) || 1), 0);
                        const maxCapacity = getCellCapacity(level, block); // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á cell
                        const usagePercentage = Math.round((totalTrayInCell / maxCapacity) * 100);
                        
                        console.log(`üü´ [Grid] Lots in cell (Level: ${level}, Block: ${block}) [index 0 = bottom, last = top] - Usage: ${usagePercentage}% (${totalTrayInCell}/${maxCapacity}):`);
                        lots.forEach((lot, idx) => {
                            const lotTrayCount = parseInt(lot.tray_count) || 1;
                            const lotPercentage = Math.round((lotTrayCount / maxCapacity) * 100);
                            console.log(`   [${idx}] LotNo: ${lot.lot_no}, Tray: ${lot.tray_count}, ${lotPercentage}%`);
                        });
                        console.log(`   All lots:`, JSON.stringify(lots));
                    }
                    const cellId = `cell-${level}-${block}`;
                    const cell = document.getElementById(cellId);
                    if (!cell) return;

                    // --- Visual stacked lots (FIFO bottom-to-top: index 0 = bottom, last = top) ---
                    const safeLots = Array.isArray(lots) ? lots : [];
                    let totalTray = safeLots.reduce((sum, lot) => sum + (parseInt(lot.tray_count) || 1), 0);
                    totalTray = Math.max(totalTray, 1);
                    
                    // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö cell ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á
                    const maxCellHeight = 66; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á cell (70px - padding 4px)
                    
                    // Render lots in REVERSE order (last to first) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å flex-end ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    for (let idx = safeLots.length - 1; idx >= 0; idx--) {
                        const lot = safeLots[idx];
                        const lotDiv = document.createElement('div');
                        let isTarget = false;
                        if (activeJob && String(activeJob.level) === String(level) && String(activeJob.block) === String(block)) {
                            isTarget = (String(lot.lot_no) === String(activeJob.lot_no));
                        }
                        lotDiv.className = 'stacked-lot' + (isTarget ? ' target-lot' : '');
                        
                        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ï‡∏≤‡∏° tray_count ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
                        const trayCount = parseInt(lot.tray_count) || 1;
                        const maxCapacity = 24;
                        const maxCellHeight = 85; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö cell height 90px
                        const heightRatio = trayCount / maxCapacity;
                        const trayHeight = Math.max(heightRatio * maxCellHeight, 2); // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 2px ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô
                        lotDiv.style.height = Math.round(trayHeight) + 'px';
                        
                        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô title ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö tooltip ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        lotDiv.title = `Lot: ${lot.lot_no}, Tray: ${trayCount}, Height: ${Math.round(trayHeight)}px`;
                        
                        // ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏µ‡πÄ‡∏ó‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
                        
                        cell.appendChild(lotDiv);
                    }

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° has-item class ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡∏≠‡∏á
                    if (Array.isArray(lots) && lots.length > 0) {
                        cell.classList.add('has-item');
                    }
                });
            } else {
                console.error('‚ùå shelfState is not an array:', shelfState);
            }

            // --- Apply activeJob ‡πÅ‡∏•‡∏∞ error state classes ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å cell ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å render lots ‡πÅ‡∏•‡πâ‡∏ß ---
            console.log(`üîç Checking activeJob:`, activeJob);
            if (activeJob) {
                console.log(`üîç ActiveJob found - Target: L${activeJob.level}B${activeJob.block} for lot ${activeJob.lot_no}`);
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å cell ‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á
                for (let level = 1; level <= TOTAL_LEVELS; level++) {
                    const blocksInThisLevel = SHELF_CONFIG[level];
                    for (let block = 1; block <= blocksInThisLevel; block++) {
                        const cellId = `cell-${level}-${block}`;
                        const cell = document.getElementById(cellId);
                        if (!cell) continue;

                        const isTargetCell = (String(activeJob.level) === String(level) && String(activeJob.block) === String(block));
                        const isWrongCell = (wrongLevel === Number(level) && wrongBlock === Number(block));

                        // ‡πÄ‡∏û‡∏¥‡πà‡∏° selected-task class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö target cell
                        if (isTargetCell) {
                            cell.classList.add('selected-task');
                            console.log(`üéØ Added selected-task to L${level}B${block} (Cell ID: ${cellId})`);
                            console.log(`üéØ Cell classes after adding:`, cell.classList.toString());
                            
                            // Verify CSS styles are applied
                            const styles = window.getComputedStyle(cell);
                            console.log(`üéØ Background color:`, styles.backgroundColor);
                            console.log(`üéØ Border:`, styles.border);
                        }

                        // ‡πÄ‡∏û‡∏¥‡πà‡∏° wrong-location class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö wrong cell ‡πÅ‡∏•‡∏∞‡∏•‡∏ö selected-task ‡∏≠‡∏≠‡∏Å
                        if (isWrongCell) {
                            cell.classList.add('wrong-location');
                            cell.classList.remove('selected-task');
                            console.log(`‚ùå Added wrong-location to L${level}B${block}`);
                        }
                    }
                }
            }
        }

        function renderActiveJob() {
    const activeJob = getActiveJob();
    const queue = getQueue();
    const cellPreviewContainer = document.getElementById('cellPreviewContainer');
    const mainContainer = document.querySelector('.main-container');

    if (activeJob) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ active job, ‡πÅ‡∏™‡∏î‡∏á cell preview
        cellPreviewContainer.style.display = 'flex';
        mainContainer.classList.remove('full-shelf-mode');
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ active job, ‡∏ã‡πà‡∏≠‡∏ô cell preview ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á shelf ‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
        cellPreviewContainer.style.display = 'none';
        mainContainer.classList.add('full-shelf-mode');
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á shelf grid ‡πÉ‡∏´‡∏°‡πà
    createShelfGridStructure();

    // Log clearly which lot is currently selected as active job, and lots in that cell
    if (activeJob) {
        const lotsInCell = getLotsInCell(activeJob.level, activeJob.block);
        console.log(`ActiveJobLot: ${activeJob.lot_no} (Level: ${activeJob.level}, Block: ${activeJob.block})`);
        console.log(`Lots in cell (${activeJob.level}, ${activeJob.block}):`, lotsInCell);

        // ‡πÅ‡∏™‡∏î‡∏á Cell Preview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö active job
        const isPlaceJob = activeJob.place_flg === '1';
        const actualTrayCount = parseInt(activeJob.tray_count) || 1; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å activeJob
        renderCellPreview({
            level: activeJob.level,
            block: activeJob.block,
            lots: lotsInCell,
            targetLotNo: activeJob.lot_no,
            isPlaceJob: isPlaceJob,
            newLotTrayCount: isPlaceJob ? actualTrayCount : 0 // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 12
        });
    } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ active job ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏ä‡πâ)
        const cellPreviewContent = document.getElementById('cellPreviewContent');
        if (cellPreviewContent) {
            cellPreviewContent.innerHTML = '<p>No active job. Select a job from the queue.</p>';
        }
    }

    renderShelfGrid();
}

        function renderQueueSelectionView(queue) {
            // ‡∏•‡πâ‡∏≤‡∏á containers
            queueListContainer.innerHTML = '';
            
            // ‡∏´‡∏≤ containers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ù‡∏±‡πà‡∏á
            const placeContainer = document.getElementById('placeQueueContainer');
            const pickContainer = document.getElementById('pickQueueContainer');
            
            if (placeContainer) placeContainer.innerHTML = '';
            if (pickContainer) pickContainer.innerHTML = '';

            // ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° place_flg
            const placeJobs = queue.filter(job => job.place_flg === '1'); // ‡∏ß‡∏≤‡∏á
            const pickJobs = queue.filter(job => job.place_flg === '0');  // ‡∏´‡∏¢‡∏¥‡∏ö

            // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á job item
            function createJobItem(job) {
                const li = document.createElement('li');
                li.className = 'queue-list-item';
                
                // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å arrow ‡∏ï‡∏≤‡∏° place_flg ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                let arrowHtml = '';
                if (job.place_flg === '0') {
                    arrowHtml = `<span class="arrow up"></span>`;
                } else {
                    arrowHtml = `<span class="arrow down"></span>`;
                }
                
                li.innerHTML = `
                    <div class="info">
                        <div class="lot">${arrowHtml} ${job.lot_no}</div>
                        <div class="action">Action: ${job.place_flg === '1' ? 'Place' : 'Pick'} at L:${job.level}, B:${job.block}</div>
                    </div>
                    <button class="select-btn" onclick="selectJob('${job.jobId}')">Select</button>
                `;
                return li;
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢
            if (placeContainer) {
                placeJobs.forEach(job => {
                    placeContainer.appendChild(createJobItem(job));
                });
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô
                if (placeJobs.length === 0) {
                    const emptyMessage = document.createElement('li');
                    emptyMessage.innerHTML = '<div style="text-align: center; color: #6c757d; padding: 20px; font-style: italic;">No job placed</div>';
                    placeContainer.appendChild(emptyMessage);
                }
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏´‡∏¢‡∏¥‡∏ö‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤
            if (pickContainer) {
                pickJobs.forEach(job => {
                    pickContainer.appendChild(createJobItem(job));
                });
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô
                if (pickJobs.length === 0) {
                    const emptyMessage = document.createElement('li');
                    emptyMessage.innerHTML = '<div style="text-align: center; color: #6c757d; padding: 20px; font-style: italic;">No job picked</div>';
                    pickContainer.appendChild(emptyMessage);
                }
            }

            // Fallback: ‡πÉ‡∏ä‡πâ container ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ container ‡πÉ‡∏´‡∏°‡πà
            if (!placeContainer || !pickContainer) {
                queue.forEach(job => {
                    const li = document.createElement('li');
                    li.className = 'queue-list-item';
                    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å icon ‡∏ï‡∏≤‡∏° action
                    let arrowHtml = '';
                    if (job.place_flg === '0') {
                        arrowHtml = `<span class="arrow up"></span>`;
                    } else {
                        arrowHtml = `<span class="arrow down"></span>`;
                    }
                    li.innerHTML = `
                        <div class="info">
                            <div class="lot">${arrowHtml}Lot: ${job.lot_no}</div>
                            <div class="action">Action: ${job.place_flg === '1' ? 'Place' : 'Pick'} at L:${job.level}, B:${job.block}</div>
                        </div>
                        <button class="select-btn" onclick="selectJob('${job.jobId}')">Select</button>
                    `;
                    queueListContainer.appendChild(li);
                });
            }

            // Logic focus ‡πÄ‡∏î‡∏¥‡∏°
            const lotInput = document.getElementById('lot-no-input');
            if (lotInput) {
                lotInput.focus();
                lotInput.onkeyup = function(event) {
                    if (event.key === 'Enter') {
                        handleLotSearch();
                    }
                };
            }
        }

        // --- START: ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏Å ---
        /*
        function ensureLotInputFocus() { ... }
        function setupLotInputBehavior(lotInput) { ... }
        function handleLotKeyUp(event) { ... }
        */
        // --- END: ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏Å ---

        function selectJob(jobId) {
            const queue = getQueue();
            const selectedJob = queue.find(job => job.jobId === jobId);
            
            if (selectedJob) {
                console.log(`üìã Selecting job: ${selectedJob.lot_no} (ID: ${jobId})`);
                
                // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏´‡∏°‡∏î main-with-queue ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å job
                showMainWithQueue = false;
                stopAutoReturnTimer();
                stopActivityDetection();
                
                // ‡∏•‡∏ö job ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue
                const updatedQueue = queue.filter(job => job.jobId !== jobId);
                localStorage.setItem(QUEUE_KEY, JSON.stringify(updatedQueue));
                
                // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô active job
                setActiveJob(selectedJob);
                renderAll();
                
                console.log(`‚úÖ Job ${selectedJob.lot_no} activated. Remaining queue size: ${updatedQueue.length}`);
            } else {
                console.error('‚ùå Job not found:', jobId);
            }
        }

        // --- START: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ---
        /**
         * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Job ‡∏à‡∏≤‡∏Å Lot No. ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
         * @param {string} lotNo - The Lot No. to search for.
         */
        function findAndSelectJobByLot(lotNo) {
            if (!lotNo) return;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LOT number ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            if (!isValidLotNumberFormat(lotNo)) {
                showLotFormatWarningPopup(lotNo);
                return;
            }

            const queue = getQueue();
            const foundJob = queue.find(job => job.lot_no === lotNo);

            if (foundJob) {
                selectJob(foundJob.jobId);
                // ‡∏£‡∏≠‡πÉ‡∏´‡πâ renderAll() ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏™‡∏î‡∏á notification ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏¢‡∏≤‡∏ß
                setTimeout(() => {
                    // ‡∏•‡πâ‡∏≤‡∏á notification ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô persistent ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
                    const existingNotifications = document.querySelectorAll('.notification:not(#persistent-correct-shelf)');
                    existingNotifications.forEach(n => n.remove());
                    
                    // ‡∏•‡∏ö persistent notification ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                    const oldPersistent = document.getElementById('persistent-correct-shelf');
                    if (oldPersistent) oldPersistent.remove();
                    
                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á notification ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏á‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
                    const notification = document.createElement('div');
                    notification.className = 'notification success persistent';
                    notification.textContent = '‚úÖ Correct shelf';
                    notification.id = 'persistent-correct-shelf';
                    
                    notification.style.cssText = `
                        position: fixed !important;
                        top: 20px !important;
                        right: 20px !important;
                        padding: 20px 25px !important;
                        border-radius: 8px !important;
                        color: white !important;
                        font-weight: 900 !important;
                        font-size: 18px !important;
                        z-index: 99999 !important;
                        background-color: #28a745 !important;
                        box-shadow: 0 4px 8px rgba(0,0,0,0.1) !important;
                        max-width: 350px !important;
                        word-wrap: break-word !important;
                        opacity: 1 !important;
                        transform: translateX(0) !important;
                        transition: all 0.3s ease-in-out !important;
                        pointer-events: auto !important;
                    `;
                    
                    document.body.appendChild(notification);
                    console.log('‚úÖ Persistent notification created with !important styles:', notification);
                    
                    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                    notification.setAttribute('data-persistent', 'true');
                    
                    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
                    setTimeout(() => {
                        protectPersistentNotifications();
                    }, 100);
                    
                }, 800); // ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏õ‡πá‡∏ô 800ms
            } else {
                showNotification(`‚ùå Lot No. ${lotNo} not found in queue.`, 'error');
                const lotInput = document.getElementById('lot-no-input');
                if (lotInput) {
                    lotInput.classList.add('shake');
                    setTimeout(() => lotInput.classList.remove('shake'), 1000);
                }
            }
        }

        /**
         * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LOT number ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
         * ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: Alphanumeric 12 ‡∏ï‡∏±‡∏ß (xxxxxxxxx.xx)
         * - 9 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç + ‡∏à‡∏∏‡∏î + 2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
         * - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ABC123DEF.01, Y540C02AS.01, 123456789.99
         * @param {string} lotNo - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç LOT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
         * @returns {boolean} - true ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
         */
        function isValidLotNumberFormat(lotNo) {
            if (!lotNo || typeof lotNo !== 'string') {
                return false;
            }
            
            const trimmedLot = lotNo.trim();
            
            // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å: Alphanumeric 12 ‡∏ï‡∏±‡∏ß (xxxxxxxxx.xx)
            // 9 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç + ‡∏à‡∏∏‡∏î + 2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ABC123DEF.01, Y540C02AS.01, 123456789.99
            const mainPattern = /^[A-Za-z0-9]{9}\.\d{2}$/;
            
            console.log(`üîç Validating LOT format: "${trimmedLot}" against pattern: ${mainPattern}`);
            const isValid = mainPattern.test(trimmedLot);
            console.log(`‚úÖ LOT validation result: ${isValid} (Expected format: xxxxxxxxx.xx)`);
            
            return isValid;
        }

        /**
         * ‡πÅ‡∏™‡∏î‡∏á popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô job
         */
        function showJobConfirmationPopup(currentJob, newJob, scannedLot) {
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.6);
                z-index: 10000;
                display: flex;
                justify-content: center;
                align-items: center;
                animation: fadeIn 0.3s ease-in-out;
            `;

            const popup = document.createElement('div');
            popup.style.cssText = `
                background: linear-gradient(135deg, #17a2b8, #3498db);
                border: none;
                border-radius: 20px;
                padding: 40px;
                max-width: 650px;
                width: 90%;
                text-align: center;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                animation: slideIn 0.4s ease-in-out;
                position: relative;
                overflow: hidden;
            `;

            popup.innerHTML = `
                <div style="font-size: 48px; margin-bottom: 20px;">‚ö†Ô∏è</div>
                <div style="font-size: 28px; font-weight: bold; color: white; margin-bottom: 15px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
                    Job Confirmation Required
                </div>
                <div style="font-size: 20px; color: white; margin-bottom: 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
                    Current job: <strong>${currentJob.lot_no}</strong><br>
                    Scanned lot: <strong>${scannedLot}</strong>
                </div>
                <div style="font-size: 18px; color: white; margin-bottom: 30px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
                    Is job <strong>${currentJob.lot_no}</strong> completed?
                </div>
                <div style="display: flex; gap: 20px; justify-content: center; margin-top: 30px;">
                    <button id="confirmYes" style="
                        padding: 15px 30px;
                        font-size: 18px;
                        font-weight: bold;
                        background: #28a745;
                        color: white;
                        border: none;
                        border-radius: 10px;
                        cursor: pointer;
                        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                        transition: all 0.2s;
                    ">‚úÖ Yes, Complete</button>
                    <button id="confirmNo" style="
                        padding: 15px 30px;
                        font-size: 18px;
                        font-weight: bold;
                        background: #dc3545;
                        color: white;
                        border: none;
                        border-radius: 10px;
                        cursor: pointer;
                        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                        transition: all 0.2s;
                    ">‚ùå No, Continue</button>
                </div>
            `;

            overlay.appendChild(popup);
            document.body.appendChild(overlay);

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS animations
            const style = document.createElement('style');
            style.textContent = `
                @keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
                @keyframes slideIn {
                    from { transform: scale(0.7) translateY(-30px); opacity: 0; }
                    to { transform: scale(1) translateY(0); opacity: 1; }
                }
                @keyframes fadeOut {
                    from { opacity: 1; transform: scale(1); }
                    to { opacity: 0; transform: scale(0.8); }
                }
            `;
            document.head.appendChild(style);

            const closePopup = () => {
                overlay.style.animation = 'fadeOut 0.3s ease-in-out forwards';
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    if (document.head.contains(style)) {
                        document.head.removeChild(style);
                    }
                }, 300);
            };

            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Yes - Complete current job
            const yesBtn = popup.querySelector('#confirmYes');
            yesBtn.addEventListener('click', async () => {
                closePopup();
                console.log(`‚úÖ User confirmed completion of job ${currentJob.lot_no}`);
                
                // ‡πÅ‡∏™‡∏î‡∏á loading notification
                showNotification(`üîÑ Completing job ${currentJob.lot_no}...`, 'info');
                
                try {
                    // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á complete ‡∏ú‡πà‡∏≤‡∏ô HTTP API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                    const response = await fetch(`/command/${currentJob.jobId}/complete`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        console.log('‚úÖ Job completed successfully:', data);
                        
                        // Clear persistent notifications ‡πÅ‡∏•‡∏∞ active job
                        clearPersistentNotifications();
                        localStorage.removeItem(ACTIVE_JOB_KEY);
                        
                        // ‡∏î‡∏±‡∏ö‡πÑ‡∏ü LED
                        fetch('/api/led/clear', { method: 'POST' });
                        
                        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å job ‡πÉ‡∏´‡∏°‡πà
                        selectJob(newJob.jobId);
                        showNotification(`‚úÖ Job ${currentJob.lot_no} completed. Switched to ${scannedLot}`, 'success');
                        
                        // Render UI ‡πÉ‡∏´‡∏°‡πà
                        renderAll();
                    } else {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                } catch (error) {
                    console.error('‚ùå Error completing job:', error);
                    showNotification(`‚ùå Failed to complete job: ${error.message}`, 'error');
                    
                    // ‡∏ñ‡πâ‡∏≤ complete ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å job ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ó‡∏ô
                    selectJob(newJob.jobId);
                    showNotification(`‚ö†Ô∏è Switched to ${scannedLot} (previous job not completed)`, 'warning');
                }
            });

            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° No - Continue current job
            const noBtn = popup.querySelector('#confirmNo');
            noBtn.addEventListener('click', () => {
                closePopup();
                console.log(`‚ùå User chose to continue current job ${currentJob.lot_no}`);
                showNotification(`Continue working on ${currentJob.lot_no}`, 'info');
                
                // Focus ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà barcode input
                const barcodeInput = document.getElementById('barcode-scanner-input');
                if (barcodeInput) {
                    setTimeout(() => barcodeInput.focus(), 100);
                }
            });

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effects
            yesBtn.addEventListener('mouseenter', () => {
                yesBtn.style.transform = 'translateY(-2px)';
                yesBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';
            });
            yesBtn.addEventListener('mouseleave', () => {
                yesBtn.style.transform = 'translateY(0)';
                yesBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
            });

            noBtn.addEventListener('mouseenter', () => {
                noBtn.style.transform = 'translateY(-2px)';
                noBtn.style.boxShadow = '0 6px 12px rgba(0,0,0,0.3)';
            });
            noBtn.addEventListener('mouseleave', () => {
                noBtn.style.transform = 'translateY(0)';
                noBtn.style.boxShadow = '0 4px 8px rgba(0,0,0,0.2)';
            });

            // ‡∏Å‡∏î Escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏î No)
            const escapeHandler = (e) => {
                if (e.key === 'Escape') {
                    document.removeEventListener('keydown', escapeHandler);
                    noBtn.click();
                }
            };
            document.addEventListener('keydown', escapeHandler);
        }

        /**
         * ‡πÅ‡∏™‡∏î‡∏á popup ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LOT number
         */
        function showLotFormatWarningPopup(invalidLotNo = '') {
            const overlay = document.createElement('div');
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.6);
                z-index: 10000;
                display: flex;
                justify-content: center;
                align-items: center;
                animation: fadeIn 0.3s ease-in-out;
            `;

            const popup = document.createElement('div');
            popup.style.cssText = `
                background: linear-gradient(135deg, #FF8C00, #FFA500, #FFD700);
                border: none;
                border-radius: 20px;
                padding: 40px;
                max-width: 600px;
                width: 90%;
                text-align: center;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                animation: slideIn 0.4s ease-in-out;
                position: relative;
                overflow: hidden;
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar
            const progressBar = document.createElement('div');
            progressBar.style.cssText = `
                position: absolute;
                bottom: 0;
                left: 0;
                height: 4px;
                background-color: rgba(255,255,255,0.8);
                width: 100%;
                transform-origin: left;
                animation: progressBarAnimation 3s linear forwards;
            `;

            // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏° LOT ‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô
            const displayLot = invalidLotNo || 'ABC123DEF.01';
            const titleText = invalidLotNo ? 'Invalid LOT Format' : 'LOT Not in Job Queue';
            const messageText = invalidLotNo 
                ? 'Please scan only Lot No. data (Format: xxxxxxxxx.xx)' 
                : `LOT ${displayLot} not found in current job queue`;

            popup.innerHTML = `
                <div style="font-size: 48px; margin-bottom: 20px;">‚ö†Ô∏è</div>
                <div style="font-size: 32px; font-weight: bold; color: white; margin-bottom: 15px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
                    ${titleText}
                </div>
                <div style="font-size: 22px; color: white; margin-bottom: 25px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
                    ${messageText}
                </div>
                <div style="font-size: 18px; color: white; margin-bottom: 30px; text-shadow: 1px 1px 2px rgba(0,0,0,0.3);">
                    This window will close in <span id="countdown">3</span> seconds
                </div>
            `;

            popup.appendChild(progressBar);

            overlay.appendChild(popup);
            document.body.appendChild(overlay);

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS animations
            const style = document.createElement('style');
            style.textContent = `
                @keyframes fadeIn {
                    from { opacity: 0; }
                    to { opacity: 1; }
                }
                @keyframes slideIn {
                    from { transform: scale(0.7) translateY(-30px); opacity: 0; }
                    to { transform: scale(1) translateY(0); opacity: 1; }
                }
                @keyframes progressBarAnimation {
                    from { transform: scaleX(1); }
                    to { transform: scaleX(0); }
                }
                @keyframes fadeOut {
                    from { opacity: 1; transform: scale(1); }
                    to { opacity: 0; transform: scale(0.8); }
                }
            `;
            document.head.appendChild(style);

            // Countdown ‡πÅ‡∏•‡∏∞ auto-close
            let countdown = 3;
            const countdownElement = popup.querySelector('#countdown');
            
            const closePopup = () => {
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏¥‡∏î
                overlay.style.animation = 'fadeOut 0.3s ease-in-out forwards';
                setTimeout(() => {
                    if (document.body.contains(overlay)) {
                        document.body.removeChild(overlay);
                    }
                    if (document.head.contains(style)) {
                        document.head.removeChild(style);
                    }
                    
                    // Focus ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà input field
                    const lotInput = document.getElementById('lot-no-input');
                    if (lotInput) {
                        setTimeout(() => lotInput.focus(), 100);
                    }
                }, 300);
            };

            // ‡πÄ‡∏£‡∏¥‡πà‡∏° countdown
            const countdownInterval = setInterval(() => {
                countdown--;
                if (countdownElement) {
                    countdownElement.textContent = countdown;
                }
                
                if (countdown <= 0) {
                    clearInterval(countdownInterval);
                    closePopup();
                }
            }, 1000);

            // Click ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    clearInterval(countdownInterval);
                    closePopup();
                }
            });

            // ‡∏Å‡∏î Escape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
            const escapeHandler = (e) => {
                if (e.key === 'Escape') {
                    clearInterval(countdownInterval);
                    document.removeEventListener('keydown', escapeHandler);
                    closePopup();
                }
            };
            document.addEventListener('keydown', escapeHandler);
        }

        /**
         * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á input ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
         */
        function handleLotSearch() {
            const lotInput = document.getElementById('lot-no-input');
            if (lotInput) {
                const lotNoToSearch = lotInput.value.trim();
                
                if (lotNoToSearch.length > 0) {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LOT number ‡∏Å‡πà‡∏≠‡∏ô
                    if (!isValidLotNumberFormat(lotNoToSearch)) {
                        // ‡πÅ‡∏™‡∏î‡∏á popup ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LOT ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á LOT ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                        showLotFormatWarningPopup(lotNoToSearch);
                        lotInput.value = ''; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå input
                        return;
                    }
                    
                    event?.stopPropagation();
                    event?.preventDefault();
                    
                    findAndSelectJobByLot(lotNoToSearch);
                    lotInput.value = '';
                }
            }
        }
        // --- END: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ---

        // üîΩ ADD BARCODE SCANNING FUNCTIONALITY üîΩ
        /**
         * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Active Job
         */
        function setupBarcodeScanner() {
            const barcodeInput = document.getElementById('barcode-scanner-input');
            if (!barcodeInput) return;

            // ‡πÉ‡∏´‡πâ focus ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Active Job
            barcodeInput.focus();

            // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î (Enter key)
            barcodeInput.onkeyup = function(event) {
                if (event.key === 'Enter') {
                    handleBarcodeScanned();
                }
            };

            // ‡πÉ‡∏´‡πâ focus ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏°‡∏≠
            barcodeInput.onblur = function() {
                setTimeout(() => {
                    if (document.getElementById('mainView').style.display !== 'none') {
                        barcodeInput.focus();
                    }
                }, 100);
            };
        }

        /**
         * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
         */
        function handleBarcodeScanned() {
            const barcodeInput = document.getElementById('barcode-scanner-input');
            if (!barcodeInput) return;

            const scannedData = barcodeInput.value.trim();
            barcodeInput.value = '';

            if (!scannedData) return;

            console.log(`üì± Barcode scanned: ${scannedData}`);
            
            const activeJob = getActiveJob();
            if (!activeJob) {
                showNotification('‚ùå No active job to process barcode.', 'error');
                return;
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô lot number ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô queue ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (isValidLotNumberFormat(scannedData)) {
                const queue = getQueue();
                const queueJob = queue.find(job => job.lot_no === scannedData);
                
                if (queueJob && scannedData !== activeJob.lot_no) {
                    // ‡πÅ‡∏™‡∏î‡∏á popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô job
                    showJobConfirmationPopup(activeJob, queueJob, scannedData);
                    return;
                }
                
                // ‡∏ñ‡πâ‡∏≤‡∏™‡πÅ‡∏Å‡∏ô lot ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö active job ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ confirm
                if (scannedData === activeJob.lot_no) {
                    showNotification(`‚úÖ Confirmed current job: ${activeJob.lot_no}`, 'success');
                    return;
                }
            }

            const locationMatch = parseLocationFromBarcode(scannedData);
            
            if (!locationMatch) {
                showNotification(`‚ùå Invalid barcode format: ${scannedData}`, 'error');
                return;
            }

            const { level, block } = locationMatch;
            const correctLevel = Number(activeJob.level);
            const correctBlock = Number(activeJob.block);

            // ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡πâ‡∏•‡∏ö class error ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å cell
            const allCells = document.querySelectorAll('.shelf-cell');
            allCells.forEach(cell => {
                cell.classList.remove('wrong-location');
                // ‡πÑ‡∏°‡πà‡∏•‡∏ö selected-task ‡∏ó‡∏µ‡πà cell ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
                const cellId = cell.id;
                if (cellId !== `cell-${correctLevel}-${correctBlock}`) {
                    cell.classList.remove('selected-task');
                }
            });

            if (Number(level) === correctLevel && Number(block) === correctBlock) {
                if (activeJob.error) {
                    const cleanJob = { ...activeJob };
                    delete cleanJob.error;
                    delete cleanJob.errorType;
                    delete cleanJob.errorMessage;
                    setActiveJob(cleanJob);
                    renderAll();
                }
                showNotification(`‚úÖ Correct location! Completing job for Lot ${activeJob.lot_no}...`, 'success');
                completeCurrentJob();
            } else {
                // ‡πÅ‡∏™‡∏î‡∏á error UI ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô LED: ‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (selected-task, ‡∏ü‡πâ‡∏≤), ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î (wrong-location, ‡πÅ‡∏î‡∏á)
                //showNotification(`‚ùå Wrong location! Expected: L${correctLevel}-B${correctBlock}, Got: L${level}-B${block}`, 'error');

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI: ‡∏ä‡πà‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (selected-task)
                const correctCell = document.getElementById(`cell-${correctLevel}-${correctBlock}`);
                if (correctCell) {
                    correctCell.classList.add('selected-task');
                }
                // ‡∏ä‡πà‡∏≠‡∏á‡∏ú‡∏¥‡∏î (wrong-location)
                const wrongCell = document.getElementById(`cell-${level}-${block}`);
                if (wrongCell) {
                    wrongCell.classList.add('wrong-location');
                    wrongCell.classList.remove('selected-task');
                }
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state error ‡πÉ‡∏ô activeJob
                reportJobError('WRONG_LOCATION', `Scanned wrong location: L${level}-B${block}, Expected: L${correctLevel}-B${correctBlock}`);
            }
        }

        /**
         * ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
         * ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: L1-B2, 1-2, L1B2, 1,2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
         */
        function parseLocationFromBarcode(barcode) {
            // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
            const cleaned = barcode.replace(/\s+/g, '').toUpperCase();
            
            // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            const patterns = [
                /^L(\d+)-?B(\d+)$/,  // L1-B2 ‡∏´‡∏£‡∏∑‡∏≠ L1B2
                /^(\d+)-(\d+)$/,     // 1-2
                /^(\d+),(\d+)$/,     // 1,2
                /^(\d+)_(\d+)$/,     // 1_2
                /^L(\d+)B(\d+)$/     // L1B2
            ];

            for (const pattern of patterns) {
                const match = cleaned.match(pattern);
                if (match) {
                    const level = parseInt(match[1]);
                    const block = parseInt(match[2]);
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Level ‡πÅ‡∏•‡∏∞ Block ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if (level >= 1 && level <= TOTAL_LEVELS && 
                        block >= 1 && block <= SHELF_CONFIG[level]) {
                        return { level, block };
                    }
                }
            }

            return null;
        }

        /**
         * ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Complete Job ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Server
         */
        function completeCurrentJob() {
            let activeJob = getActiveJob();
            if (!activeJob) {
                showNotification('‚ùå No active job to complete.', 'error');
                return;
            }

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error state ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if (activeJob.error) {
                activeJob = { ...activeJob };
                delete activeJob.error;
                delete activeJob.errorType;  
                delete activeJob.errorMessage;
                setActiveJob(activeJob);
            }

            console.log('üöÄ Completing job:', activeJob.jobId, 'Lot:', activeJob.lot_no);
            console.log(`üìù Job details:`, {
                level: activeJob.level,
                block: activeJob.block,
                place_flg: activeJob.place_flg,
                biz: activeJob.biz,
                shelf_id: activeJob.shelf_id
            });
            console.log(`üéØ Target API endpoint: POST /command/${activeJob.jobId}/complete`);

            // Clear loggedCells so next render logs new state
            if (window.__rfid_loggedCells) window.__rfid_loggedCells.clear();

            // üîÑ ‡πÉ‡∏ä‡πâ HTTP API ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£ (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà WebSocket)
            console.log('üì§ Sending complete job request via HTTP API...');
            
            fetch(`/command/${activeJob.jobId}/complete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                console.log('ÔøΩ Complete job response status:', response.status);
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(async data => {
                console.log('‚úÖ Job completed successfully via HTTP API:', data);
                
                if (data.status === 'success') {
                    // ‡πÅ‡∏™‡∏î‡∏á notification ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                    const action = data.action || 'processed';
                    const location = data.location || `L${activeJob.level}B${activeJob.block}`;
                    showNotification(`‚úÖ Job completed for Lot ${data.lot_no || activeJob.lot_no} - ${action} at ${location}!`, 'success');
                    
                    // Validate job completion
                    const isValid = await validateJobCompletion(activeJob.jobId, activeJob.lot_no);
                    if (isValid) {
                        console.log('üéØ Job completion validated successfully');
                    } else {
                        console.warn('‚ö†Ô∏è Job completion validation failed, but continuing...');
                    }
                    
                    // Clear active job
                    clearPersistentNotifications();
                    localStorage.removeItem(ACTIVE_JOB_KEY);
                    
                    // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä shelf state ‡∏à‡∏≤‡∏Å server
                    await refreshShelfStateFromServer();
                    renderAll();

                    // ‡∏î‡∏±‡∏ö‡πÑ‡∏ü LED ‡∏´‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
                    fetch('/api/led/clear', { method: 'POST' });
                } else {
                    throw new Error(data.message || 'Job completion failed');
                }
            })
            .catch(error => {
                console.error('‚ùå Error completing job:', error);
                showNotification(`‚ùå Error completing job: ${error.message}. Please try again.`, 'error');
            });
        }

        /**
         * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä shelf state ‡∏à‡∏≤‡∏Å server ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å complete job
         */
        async function refreshShelfStateFromServer() {
            try {
                console.log('üîÑ Refreshing shelf state from server...');
                
                const response = await fetch('/api/shelf/state', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('üì¶ Updated shelf state from server:', data);
                    
                    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï global shelf state
                    window.shelfState = data.shelf_state || [];
                    
                    // ‡∏•‡∏ö job ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue ‡πÉ‡∏ô localStorage ‡∏î‡πâ‡∏ß‡∏¢
                    const currentQueue = getQueue();
                    const activeJob = getActiveJob();
                    if (activeJob) {
                        const updatedQueue = currentQueue.filter(job => job.jobId !== activeJob.jobId);
                        localStorage.setItem(QUEUE_KEY, JSON.stringify(updatedQueue));
                        console.log(`üóëÔ∏è Removed completed job ${activeJob.jobId} from local queue`);
                    }
                    
                    console.log('‚úÖ Shelf state refreshed successfully');
                } else {
                    console.error('‚ùå Failed to refresh shelf state:', response.status);
                }
            } catch (error) {
                console.error('üí• Error refreshing shelf state:', error);
            }
        }

        /**
         * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô desync
         */
        async function validateJobCompletion(jobId, lotNo) {
            try {
                console.log(`üîç Validating job completion: ${jobId} (${lotNo})`);
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô backend queue ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const queueResponse = await fetch('/command', {
                    method: 'GET',
                    headers: { 'Accept': 'application/json' }
                });
                
                if (queueResponse.ok) {
                    const queueData = await queueResponse.json();
                    const jobStillExists = queueData.jobs.some(job => job.jobId === jobId);
                    
                    if (jobStillExists) {
                        console.warn(`‚ö†Ô∏è Job ${jobId} still exists in backend queue after completion`);
                        return false;
                    } else {
                        console.log(`‚úÖ Job ${jobId} successfully removed from backend queue`);
                        return true;
                    }
                }
            } catch (error) {
                console.error('üí• Error validating job completion:', error);
                return false;
            }
        }

        /**
         * ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô
         */
        function reportJobError(errorType, errorMessage) {
            const activeJob = getActiveJob();
            if (!activeJob) return;

            console.log(`üö® Reporting job error: ${errorType}`);
            
            const errorJob = { ...activeJob, error: true, errorType, errorMessage };
            setActiveJob(errorJob);
            renderAll();

            if (websocketConnection && websocketConnection.readyState === WebSocket.OPEN) {
                const message = {
                    type: 'job_error',
                    payload: {
                        jobId: activeJob.jobId,
                        errorType,
                        errorMessage,
                        lot_no: activeJob.lot_no
                    }
                };
                websocketConnection.send(JSON.stringify(message));
            }
        }
        // üîº END OF BARCODE SCANNING FUNCTIONALITY üîº

        function renderAll() {
            const queue = getQueue();
            const activeJob = getActiveJob();

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Queue Notification
            updateQueueNotificationButton();

            // Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            if (showMainWithQueue) {
                // ‡πÇ‡∏´‡∏°‡∏î Main with Queue - ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Main ‡πÅ‡∏ï‡πà‡∏°‡∏µ notification button
                console.log('üè† Rendering Main view with queue notification');
                queueSelectionView.style.display = 'none';
                mainView.style.display = 'flex';
                renderActiveJob(); // ‡πÅ‡∏™‡∏î‡∏á shelf ‡πÅ‡∏ö‡∏ö full mode
                renderShelfGrid();
            } else if (queue.length > 0 && !activeJob) {
                // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Queue Selection
                console.log('üìã Rendering Queue Selection view');
                mainView.style.display = 'none';
                queueSelectionView.style.display = 'block';
                renderQueueSelectionView(queue);
                // controlLEDByQueue(); ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Queue
            } else if (activeJob) {
                // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Active Job
                console.log('üéØ Rendering Active Job view');
                showMainWithQueue = false; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag
                stopAutoReturnTimer(); // ‡∏´‡∏¢‡∏∏‡∏î timer
                stopActivityDetection(); // ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
                controlLEDByActiveJob();
                queueSelectionView.style.display = 'none';
                mainView.style.display = 'flex';
                renderActiveJob();
                renderShelfGrid();
                setupBarcodeScanner();
            } else {
                // ‡πÑ‡∏°‡πà‡∏°‡∏µ queue ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ active job - ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Main ‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥
                console.log('üè† Rendering Main view (no queue, no active job)');
                showMainWithQueue = false;
                stopAutoReturnTimer();
                stopActivityDetection();
                queueSelectionView.style.display = 'none';
                mainView.style.display = 'flex';
                renderActiveJob();
                renderShelfGrid();
            }
        }

        // --- Initial Load ---
        document.addEventListener('DOMContentLoaded', async () => {
            console.log('üìÑ DOM Content Loaded - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
            
            try {
                console.log('‚è≥ Loading shelf config...');
                await loadShelfConfig();
                console.log('‚úÖ Shelf config loaded');
                
                console.log('‚è≥ Initializing shelf name...');
                await initializeShelfName(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shelf name
                console.log('‚úÖ Shelf name initialized');
                
                // üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ shelf_id ‡πÅ‡∏•‡πâ‡∏ß
                console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway...');
                try {
                    const pendingResult = await loadPendingJobsFromGateway();
                    if (pendingResult && pendingResult.success) {
                        console.log(`‚úÖ ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡πÄ‡∏û‡∏¥‡πà‡∏° ${pendingResult.added}/${pendingResult.total} ‡∏á‡∏≤‡∏ô`);
                        if (pendingResult.skipped > 0) {
                            console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥: ${pendingResult.skipped} ‡∏á‡∏≤‡∏ô`);
                        }
                    } else {
                        console.log(`‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${pendingResult?.error || 'Unknown error'}`);
                    }
                } catch (pendingError) {
                    console.error('üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà:', pendingError);
                    showNotification('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ', 'error');
                }
                
                console.log('‚è≥ Initializing shelf state...');
                initializeShelfState();
                console.log('‚úÖ Shelf state initialized');
                
                console.log('‚è≥ Setting up WebSocket...');
                setupWebSocket();
                console.log('‚úÖ WebSocket setup completed');
                
                // Sync queue ‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                console.log('‚è≥ Syncing queue from backend...');
                try {
                    const syncResult = await syncQueueFromBackend();
                    if (syncResult.success) {
                        console.log(`‚úÖ Queue synced: ${syncResult.jobs.length} jobs`);
                    } else {
                        console.warn('‚ö†Ô∏è Queue sync failed:', syncResult.error);
                    }
                } catch (syncError) {
                    console.warn('‚ö†Ô∏è Could not sync queue on startup:', syncError);
                }
                
                // üîΩ RESTORE SHELF STATE FROM SERVER/GATEWAY üîΩ
                console.log('‚è≥ Restoring shelf state from server/Gateway...');
                try {
                    const restoreResult = await restoreShelfStateFromServer();
                    if (restoreResult.success) {
                        console.log(`‚úÖ Shelf state restored: ${restoreResult.positions_count} positions`);
                    } else {
                        console.warn('‚ö†Ô∏è Shelf state restore failed:', restoreResult.error);
                    }
                } catch (restoreError) {
                    console.warn('‚ö†Ô∏è Could not restore shelf state on startup:', restoreError);
                }
                
                console.log('‚è≥ Rendering all components...');
                renderAll();
                console.log('‚úÖ Initial setup completed successfully');
                
            } catch (error) {
                console.error('üí• ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:', error);
                showNotification('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', 'error');
            }
        });
        
        // ‡∏•‡∏ö Event Listener ‡∏Ç‡∏≠‡∏á 'storage' ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ WebSocket ‡πÅ‡∏ó‡∏ô
        window.removeEventListener('storage', renderAll);

        // üîΩ EXPOSE FUNCTIONS TO GLOBAL SCOPE FOR HTML ONCLICK üîΩ
        window.goBackToMain = goBackToMain;
        window.goToQueueSelection = goToQueueSelection;
        window.selectJob = selectJob;
        window.handleLotSearch = handleLotSearch;
        window.findAndSelectJobByLot = findAndSelectJobByLot;
        // üîº END OF EXPOSED FUNCTIONS üîº
        
        // *** START: WebSocket Integration ***
        let websocketConnection = null; // ‡πÄ‡∏Å‡πá‡∏ö WebSocket connection

        function setupWebSocket() {
            const ws = new WebSocket(`ws://${window.location.host}/ws`);
            
            websocketConnection = ws;

            ws.onopen = function(event) {
                console.log("‚úÖ WebSocket connected");
            };

            ws.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);

                    switch (data.type) {
                        case "initial_state":
                            localStorage.setItem(QUEUE_KEY, JSON.stringify(data.payload.jobs));
                            localStorage.setItem(GLOBAL_SHELF_STATE_KEY, JSON.stringify(data.payload.shelf_state));
                            renderAll();
                            break;
                        case "new_job":
                            const queue = getQueue();
                            if (!queue.some(job => job.jobId === data.payload.jobId)) {
                                queue.push(data.payload);
                                localStorage.setItem(QUEUE_KEY, JSON.stringify(queue));
                                
                                // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î main-with-queue ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ queue ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ job ‡πÉ‡∏´‡∏°‡πà
                                if (showMainWithQueue) {
                                    console.log('üìã New job arrived, returning to queue selection');
                                    showMainWithQueue = false;
                                    stopAutoReturnTimer();
                                    stopActivityDetection();
                                }
                                
                                renderAll();
                                showNotification(`New Lot: ${data.payload.lot_no}`);
                            }
                            break;
                        case "jobs_reloaded":
                            console.log('üîÑ Received jobs_reloaded message:', data.payload);
                            
                            // Sync queue ‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (async)
                            syncQueueFromBackend().then(syncResult => {
                                if (syncResult.success) {
                                    console.log('‚úÖ Queue synced successfully');
                                    renderAll(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏´‡∏•‡∏±‡∏á sync
                                } else {
                                    console.warn('‚ö†Ô∏è Queue sync failed:', syncResult.error);
                                    renderAll(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÅ‡∏°‡πâ sync ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
                                }
                            }).catch(syncError => {
                                console.error('üí• Error during queue sync:', syncError);
                                renderAll(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÅ‡∏°‡πâ‡πÄ‡∏Å‡∏¥‡∏î error
                            });
                            
                            // ‡πÅ‡∏™‡∏î‡∏á notification ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå
                            const payload = data.payload;
                            let notificationType = 'info';
                            if (payload.loaded_count > 0) {
                                notificationType = 'success';
                            } else if (payload.skipped_count > 0) {
                                notificationType = 'warning';
                            }
                            
                            showNotification(`üîÑ ${payload.message}`, notificationType);
                            
                            // Debug log
                            console.log(`üìä Jobs status - Loaded: ${payload.loaded_count}, Skipped: ${payload.skipped_count}, Total Pending: ${payload.total_pending}, Queue Size: ${payload.total_queue_size}`);
                            break;
                        case "job_completed":
                            console.log('üì¶ Received job_completed message:', data.payload);
                            
                            // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gateway ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ job ID ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                            // ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÅ‡∏Ñ‡πà‡∏•‡∏ö active job ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï shelf state ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
                            
                            let currentQueue = getQueue();
                            console.log(`üìã Queue before removal (size: ${currentQueue.length}):`, currentQueue.map(j => `${j.lot_no}(${j.jobId})`));
                            
                            currentQueue = currentQueue.filter(j => j.jobId !== data.payload.completedJobId);
                            console.log(`üìã Queue after removal (size: ${currentQueue.length}):`, currentQueue.map(j => `${j.lot_no}(${j.jobId})`));
                            
                            localStorage.setItem(QUEUE_KEY, JSON.stringify(currentQueue));
                            
                            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö shelf state ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                            const oldShelfState = JSON.parse(localStorage.getItem(GLOBAL_SHELF_STATE_KEY) || '[]');
                            console.log('üì¶ Shelf state before update:', oldShelfState);
                            console.log('üì¶ New shelf state from server:', data.payload.shelf_state);
                            
            localStorage.setItem(GLOBAL_SHELF_STATE_KEY, JSON.stringify(data.payload.shelf_state));
            clearPersistentNotifications(); // Clear persistent notifications on job completion
            localStorage.removeItem(ACTIVE_JOB_KEY);
            renderAll();
            showNotification(`‚úÖ Job completed for Lot ${data.payload.lot_no || 'Unknown'}!`, 'success');
            fetch('/api/led/clear', { method: 'POST' });
            
            // üîΩ AUTO-SYNC SHELF STATE AFTER JOB COMPLETION üîΩ
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á await ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ block UI
            autoSyncAfterJobComplete({
                lot_no: data.payload.lot_no,
                action: data.payload.action,
                level: data.payload.level,
                block: data.payload.block
            }).catch(error => {
                console.error('‚ùå Auto-sync failed after job completion:', error);
            });
                            break;
                        case "job_warning":
                            console.log('‚ö†Ô∏è Received job warning:', data.payload);
                            showNotification(`‚ö†Ô∏è ${data.payload.message}`, 'warning');
                            
                            // ‡∏ñ‡πâ‡∏≤ warning ‡πÄ‡∏õ‡πá‡∏ô JOB_ALREADY_COMPLETED ‡πÉ‡∏´‡πâ‡∏•‡∏ö active job ‡πÅ‡∏•‡∏∞ render ‡πÉ‡∏´‡∏°‡πà
                            if (data.payload.warning === 'JOB_ALREADY_COMPLETED') {
                                localStorage.removeItem(ACTIVE_JOB_KEY);
                                renderAll();
                            }
                            break;
                        case "job_error":
                            localStorage.setItem(ACTIVE_JOB_KEY, JSON.stringify(data.payload)); // ‡πÉ‡∏ä‡πâ Key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                            renderAll();
                            showNotification(`‚ùå Lot ${data.payload.lot_no} Must place at L${data.payload.level}-B${data.payload.block}`, 'error');
                            break;
                        case "system_reset":
                            localStorage.clear();
                            initializeShelfState();
                            renderAll();
                            showNotification('System has been reset.', 'warning');
                            break;
                        case "job_canceled":
                            console.log('Job canceled :', data.payload);
                            
                            // ‡∏•‡∏ö active job ‡∏ñ‡πâ‡∏≤ lot_no ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
                            const activeJob = localStorage.getItem(ACTIVE_JOB_KEY);
                            if (activeJob) {
                                try {
                                    const activeJobData = JSON.parse(activeJob);
                                    if (activeJobData.lot_no === data.payload.lot_no) {
                                        localStorage.removeItem(ACTIVE_JOB_KEY);
                                        console.log(`Removed active job for lot ${data.payload.lot_no}`);
                                    }
                                } catch (e) {
                                    console.error('Error parsing active job:', e);
                                    localStorage.removeItem(ACTIVE_JOB_KEY); // Remove corrupted data
                                }
                            }
                            
                            // Sync queue ‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ UI ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend
                            syncQueueFromBackend().then(() => {
                                // Render all components ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å sync ‡πÄ‡∏™‡∏£‡πá‡∏à
                                renderAll();
                            }).catch(error => {
                                console.error('Error syncing queue after job canceled:', error);
                                // Render ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏°‡πâ sync ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                renderAll();
                            });
                            
                            // ‡πÅ‡∏™‡∏î‡∏á notification
                            showNotification(`üóëÔ∏è Job canceled for Lot ${data.payload.lot_no || 'Unknown'} by Gateway`, 'warning');
                            break;
                    }
                } catch (e) {
                    console.error("Error parsing message from server:", e);
                }
            };

            ws.onclose = function(event) {
                console.log("‚ùå WebSocket disconnected. Reconnecting in 3 seconds...");
                setTimeout(setupWebSocket, 3000);
            };

            ws.onerror = function(error) {
                console.error("üí• WebSocket error:", error);
            };
        }

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î cell 
        function updateCellSizes() {
            // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î
            let cellHeight = 90;
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï level containers
            const levelContainers = document.querySelectorAll('.shelf-level');
            levelContainers.forEach(container => {
                container.style.height = `${cellHeight}px`;
            });
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á cell ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö state classes ‡πÑ‡∏ß‡πâ
            const allCells = document.querySelectorAll('.shelf-cell');
            allCells.forEach(cell => {
                // ‡πÄ‡∏Å‡πá‡∏ö state classes ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏ß‡πâ
                const hasItem = cell.classList.contains('has-item');
                const isSelectedTask = cell.classList.contains('selected-task');
                const isWrongLocation = cell.classList.contains('wrong-location');
                const hasHighlightError = cell.classList.contains('highlight-error');
                
                // cells ‡πÉ‡∏ä‡πâ flex: 1 ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° state classes ‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô
                if (hasItem) cell.classList.add('has-item');
                if (isSelectedTask) cell.classList.add('selected-task');
                if (isWrongLocation) cell.classList.add('wrong-location');
                if (hasHighlightError) cell.classList.add('highlight-error');
            });
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö window resize ‡πÅ‡∏•‡∏∞ full-shelf mode toggle
        window.addEventListener('resize', updateCellSizes);
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á full-shelf mode
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                    updateCellSizes();
                }
            });
        });
        
        // ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π main-container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á class
        const mainContainerElement = document.querySelector('.main-container');
        if (mainContainerElement) {
            observer.observe(mainContainerElement, { attributes: true, attributeFilter: ['class'] });
        }

        /**
         * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ active job (logic ‡∏≠‡∏¢‡∏π‡πà‡∏ù‡∏±‡πà‡∏á frontend)
         * ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö mapping ‡∏™‡∏µ/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
         */
        function controlLEDByActiveJob(wrongLocation = null) {
            const activeJob = getActiveJob();
            if (!activeJob) {
                console.log('üí° No active job - clearing LEDs');
                fetch('/api/led/clear', { method: 'POST' });
                return;
            }

            const level = Number(activeJob.level);
            const block = Number(activeJob.block);
            
            // ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö target position
            let targetColor = { r: 0, g: 100, b: 255 }; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            if (activeJob.place_flg === '0') {
                targetColor = { r: 255, g: 165, b: 0 }; // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pick
            }

            console.log(`üí° LED Control: Active job L${level}B${block}, Place=${activeJob.place_flg}`);

            // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô error state ‡πÅ‡∏•‡∏∞‡∏°‡∏µ wrong location
            if (activeJob.error && activeJob.errorType === 'WRONG_LOCATION' && activeJob.errorMessage) {
                const match = activeJob.errorMessage.match(/L(\d+)-B(\d+)/);
                if (match) {
                    const wrongLevel = Number(match[1]);
                    const wrongBlock = Number(match[2]);
                    
                    console.log(`üí° LED Error Mode: Target L${level}B${block}, Wrong L${wrongLevel}B${wrongBlock}`);
                    
                    // ‡πÉ‡∏ä‡πâ unified API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏∏‡∏î‡πÑ‡∏ü‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏Å‡πà‡∏≠‡∏ô
                    const positions = [
                        { position: `L${level}B${block}`, ...targetColor }, // ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏ü‡πâ‡∏≤/‡∏™‡πâ‡∏°)
                        { position: `L${wrongLevel}B${wrongBlock}`, r: 255, g: 0, b: 0 } // ‡∏ä‡πà‡∏≠‡∏á‡∏ú‡∏¥‡∏î (‡πÅ‡∏î‡∏á)
                    ];
                    
                    return fetch('/api/led', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            positions, 
                            clear_first: true 
                        })
                    });
                }
            }
            
            // ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏à‡∏∏‡∏î‡πÑ‡∏ü‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏Å‡πà‡∏≠‡∏ô
            console.log(`üí° LED Normal Mode: Target L${level}B${block}`);
            return fetch('/api/led', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    position: `L${level}B${block}`, 
                    ...targetColor
                })
            })
                .then(response => {
                    if (!response.ok) {
                        console.error('üí° LED Control failed:', response.status);
                        return response.text().then(text => {
                            console.error('üí° LED Error details:', text);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    if (data) {
                        console.log('üí° LED Control success:', data);
                    }
                })
                .catch(error => {
                    console.error('üí° LED Control error:', error);
                });
        }

          // üîΩ LMS Integration Functions üîΩ
        
        /**
         * ‡πÅ‡∏™‡∏î‡∏á Location Popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LMS ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
         * @param {string} lotNo - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç Lot
         * @param {string} location - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏õ
         * @param {string} type - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó popup (warning, error, success, info)
         * @param {number} duration - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏™‡∏î‡∏á popup (milliseconds, 0 = ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
         */
        function showLMSLocationPopup(lotNo, location, type = 'warning', duration = 0) {
            // ‡∏•‡∏ö popup ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            const existingPopup = document.getElementById('lmsLocationPopup');
            if (existingPopup) {
                existingPopup.remove();
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS animations ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if (!document.getElementById('lmsLocationPopupStyles')) {
                const style = document.createElement('style');
                style.id = 'lmsLocationPopupStyles';
                style.textContent = `
                    @keyframes lmsLocationFadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }
                    @keyframes lmsLocationSlideInDown {
                        from {
                            transform: translateY(-50px);
                            opacity: 0;
                        }
                        to {
                            transform: translateY(0);
                            opacity: 1;
                        }
                    }
                    @keyframes lmsLocationPulse {
                        0% {
                            transform: scale(1);
                        }
                        50% {
                            transform: scale(1.05);
                        }
                        100% {
                            transform: scale(1);
                        }
                    }
                `;
                document.head.appendChild(style);
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á overlay
            const overlay = document.createElement('div');
            overlay.id = 'lmsLocationPopup';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.8);
                z-index: 10000;
                display: flex;
                justify-content: center;
                align-items: center;
                animation: lmsLocationFadeIn 0.3s ease-in-out;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            `;

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏° type
            let backgroundColor, borderColor;
            switch (type) {
                case 'error':
                    backgroundColor = '#ff4757';
                    borderColor = '#ff3838';
                    break;
                case 'success':
                    backgroundColor = '#2ed573';
                    borderColor = '#1dd1a1';
                    break;
                case 'info':
                    backgroundColor = '#3742fa';
                    borderColor = '#2f3542';
                    break;
                default: // warning/default (orange like in image)
                    backgroundColor = '#ff6b35';
                    borderColor = '#e55a2b';
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á popup content
            const popup = document.createElement('div');
            popup.style.cssText = `
                background: ${backgroundColor};
                color: white;
                padding: 40px 50px;
                border-radius: 15px;
                box-shadow: 0 20px 60px rgba(0, 0, 0, 0.4);
                max-width: 500px;
                width: 90%;
                text-align: center;
                position: relative;
                animation: lmsLocationSlideInDown 0.5s ease-out;
                border: 3px solid ${borderColor};
                font-weight: bold;
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á Lot No.
            const lotElement = document.createElement('div');
            lotElement.textContent = `Lot No. ${lotNo}`;
            lotElement.style.cssText = `
                margin: 0 0 30px 0;
                font-size: 28px;
                font-weight: bold;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                line-height: 1.2;
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á "GO TO:" label
            const goToLabel = document.createElement('div');
            goToLabel.textContent = 'GO TO:';
            goToLabel.style.cssText = `
                margin: 0 0 15px 0;
                font-size: 20px;
                font-weight: bold;
                opacity: 0.9;
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á location
            const locationElement = document.createElement('div');
            locationElement.textContent = location;
            locationElement.style.cssText = `
                margin: 0 0 35px 0;
                font-size: 32px;
                font-weight: bold;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                line-height: 1.2;
                letter-spacing: 1px;
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° OK
            const okButton = document.createElement('button');
            okButton.textContent = 'OK';
            okButton.style.cssText = `
                background: rgba(255, 255, 255, 0.9);
                color: ${backgroundColor};
                border: none;
                padding: 12px 40px;
                border-radius: 8px;
                font-size: 18px;
                font-weight: bold;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
                min-width: 120px;
            `;

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° OK
            okButton.addEventListener('mouseenter', () => {
                okButton.style.background = 'white';
                okButton.style.transform = 'translateY(-2px)';
                okButton.style.boxShadow = '0 6px 20px rgba(0, 0, 0, 0.3)';
            });

            okButton.addEventListener('mouseleave', () => {
                okButton.style.background = 'rgba(255, 255, 255, 0.9)';
                okButton.style.transform = 'translateY(0)';
                okButton.style.boxShadow = '0 4px 15px rgba(0, 0, 0, 0.2)';
            });

            // Click event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° OK
            okButton.addEventListener('click', () => {
                overlay.remove();
            });

            // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö popup
            popup.appendChild(lotElement);
            popup.appendChild(goToLabel);
            popup.appendChild(locationElement);
            popup.appendChild(okButton);

            overlay.appendChild(popup);
            document.body.appendChild(overlay);

            // Auto hide after duration (‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î duration > 0)
            if (duration > 0) {
                setTimeout(() => {
                    if (overlay && overlay.parentNode) {
                        overlay.style.animation = 'lmsLocationFadeIn 0.3s ease-in-out reverse';
                        setTimeout(() => {
                            overlay.remove();
                        }, 300);
                    }
                }, duration);
            }

            // Click overlay to close
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    overlay.remove();
                }
            });

            // ESC to close
            const escHandler = (e) => {
                if (e.key === 'Escape') {
                    overlay.remove();
                    document.removeEventListener('keydown', escHandler);
                }
            };
            document.addEventListener('keydown', escHandler);

            // Focus ‡∏õ‡∏∏‡πà‡∏° OK ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î Enter ‡πÑ‡∏î‡πâ
            setTimeout(() => {
                okButton.focus();
            }, 100);

            // Enter to close
            okButton.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                    overlay.remove();
                }
            });
        }

        /**
         * ‡πÅ‡∏™‡∏î‡∏á Alert Popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LMS response (‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
         */
        function showLMSAlertPopup(title, message, details = null, type = 'warning', duration = 0) {
            // ‡∏•‡∏ö popup ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            const existingPopup = document.getElementById('lmsAlertPopup');
            if (existingPopup) {
                existingPopup.remove();
            }

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS animations ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if (!document.getElementById('lmsPopupStyles')) {
                const style = document.createElement('style');
                style.id = 'lmsPopupStyles';
                style.textContent = `
                    @keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }
                    @keyframes slideInDown {
                        from {
                            transform: translateY(-50px);
                            opacity: 0;
                        }
                        to {
                            transform: translateY(0);
                            opacity: 1;
                        }
                    }
                    @keyframes bounce {
                        0%, 20%, 50%, 80%, 100% {
                            transform: translateY(0);
                        }
                        40% {
                            transform: translateY(-10px);
                        }
                        60% {
                            transform: translateY(-5px);
                        }
                    }
                    @keyframes pulse {
                        0% {
                            box-shadow: 0 0 0 0 rgba(255, 87, 87, 0.7);
                        }
                        70% {
                            box-shadow: 0 0 0 20px rgba(255, 87, 87, 0);
                        }
                        100% {
                            box-shadow: 0 0 0 0 rgba(255, 87, 87, 0);
                        }
                    }
                `;
                document.head.appendChild(style);
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á overlay
            const overlay = document.createElement('div');
            overlay.id = 'lmsAlertPopup';
            overlay.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.8);
                z-index: 10000;
                display: flex;
                justify-content: center;
                align-items: center;
                animation: fadeIn 0.3s ease-in-out;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;

            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏° type
            let backgroundColor, borderColor, iconColor, icon;
            switch (type) {
                case 'error':
                    backgroundColor = 'linear-gradient(135deg, #ff4757, #ff3838)';
                    borderColor = '#ff4757';
                    iconColor = '#fff';
                    icon = '‚ö†Ô∏è';
                    break;
                case 'success':
                    backgroundColor = 'linear-gradient(135deg, #ffa502, #ff6348)';
                    borderColor = '#ffa502';
                    //backgroundColor = 'linear-gradient(135deg, #2ed573, #1dd1a1)';
                    //borderColor = '#2ed573';
                    iconColor = '#fff';
                    icon = '‚úÖ';
                    break;
                case 'info':
                    backgroundColor = 'linear-gradient(135deg, #3742fa, #2f3542)';
                    borderColor = '#3742fa';
                    iconColor = '#fff';
                    icon = 'üîç';
                    break;
                default: // warning
                    backgroundColor = 'linear-gradient(135deg, #ffa502, #ff6348)';
                    borderColor = '#ffa502';
                    iconColor = '#fff';
                    icon = '‚ö†Ô∏è';
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á popup content
            const popup = document.createElement('div');
            popup.style.cssText = `
                background: ${backgroundColor};
                color: white;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 25px 80px rgba(0, 0, 0, 0.3);
                max-width: 600px;
                width: 90%;
                text-align: center;
                position: relative;
                animation: slideInDown 0.5s ease-out;
                border: 4px solid ${borderColor};
                ${type === 'error' ? 'animation: slideInDown 0.5s ease-out, pulse 2s infinite;' : ''}
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á icon
            const iconElement = document.createElement('div');
            iconElement.innerHTML = icon;
            iconElement.style.cssText = `
                font-size: 80px;
                margin-bottom: 20px;
                animation: bounce 1s ease-in-out infinite;
                filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.3));
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á title
            const titleElement = document.createElement('h2');
            titleElement.textContent = title;
            titleElement.style.cssText = `
                margin: 0 0 20px 0;
                font-size: 32px;
                font-weight: bold;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                line-height: 1.2;
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á message
            const messageElement = document.createElement('p');
            messageElement.textContent = message;
            messageElement.style.cssText = `
                margin: 0 0 25px 0;
                font-size: 20px;
                line-height: 1.5;
                font-weight: 500;
            `;

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á details ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            let detailsElement = null;
            if (details) {
                detailsElement = document.createElement('div');
                detailsElement.style.cssText = `
                    background-color: rgba(255, 255, 255, 0.2);
                    padding: 20px;
                    border-radius: 12px;
                    margin: 20px 0;
                    font-size: 16px;
                    line-height: 1.6;
                    border: 1px solid rgba(255, 255, 255, 0.3);
                `;
                detailsElement.innerHTML = details;
            }

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á countdown ‡πÅ‡∏•‡∏∞ progress bar ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ duration > 0
            let countdownElement = null;
            let progressBar = null;
            let progressFill = null;
            let countdownInterval = null;

            if (duration > 0) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á countdown
                countdownElement = document.createElement('div');
                countdownElement.style.cssText = `
                    margin-top: 25px;
                    font-size: 14px;
                    opacity: 0.8;
                    font-weight: 500;
                `;
                
                let timeLeft = Math.floor(duration / 1000);
                countdownElement.textContent = `This window will close in ${timeLeft} second`;

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á progress bar
                progressBar = document.createElement('div');
                progressBar.style.cssText = `
                    width: 100%;
                    height: 4px;
                    background-color: rgba(255, 255, 255, 0.3);
                    border-radius: 2px;
                    margin-top: 15px;
                    overflow: hidden;
                `;
                
                progressFill = document.createElement('div');
                progressFill.style.cssText = `
                    height: 100%;
                    background-color: rgba(255, 255, 255, 0.8);
                    width: 100%;
                    border-radius: 2px;
                    transition: width ${duration}ms linear;
                `;
                progressBar.appendChild(progressFill);
            } else {
                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö manual close
                const manualCloseNote = document.createElement('div');
                manualCloseNote.style.cssText = `
                    margin-top: 25px;
                    font-size: 14px;
                    opacity: 0.8;
                    font-weight: 500;
                `;
                manualCloseNote.textContent = '‡∏Å‡∏î ESC ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î';
                countdownElement = manualCloseNote;
            }

            // ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö popup
            popup.appendChild(iconElement);
            popup.appendChild(titleElement);
            popup.appendChild(messageElement);
            if (detailsElement) popup.appendChild(detailsElement);
            if (countdownElement) popup.appendChild(countdownElement);
            if (progressBar) popup.appendChild(progressBar);

            overlay.appendChild(popup);
            document.body.appendChild(overlay);

            // ‡πÄ‡∏£‡∏¥‡πà‡∏° countdown ‡πÅ‡∏•‡∏∞ progress bar ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ duration > 0
            if (duration > 0 && progressFill) {
                setTimeout(() => {
                    progressFill.style.width = '0%';
                }, 100);

                countdownInterval = setInterval(() => {
                    let timeLeft = Math.floor((duration - (Date.now() - startTime)) / 1000);
                    if (timeLeft < 0) timeLeft = 0;
                    countdownElement.textContent = `This window will close in ${timeLeft} seconds`;

                    if (timeLeft <= 0) {
                        clearInterval(countdownInterval);
                    }
                }, 1000);

                const startTime = Date.now();
            }

            // Auto hide after duration (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ duration > 0)
            if (duration > 0) {
                setTimeout(() => {
                    if (overlay && overlay.parentNode) {
                        overlay.style.animation = 'fadeIn 0.3s ease-in-out reverse';
                        setTimeout(() => {
                            overlay.remove();
                        }, 300);
                    }
                    if (countdownInterval) clearInterval(countdownInterval);
                }, duration);
            }

            // Click to close
            overlay.addEventListener('click', (e) => {
                if (e.target === overlay) {
                    if (countdownInterval) clearInterval(countdownInterval);
                    overlay.remove();
                }
            });

            // ESC to close
            const escHandler = (e) => {
                if (e.key === 'Escape') {
                    if (countdownInterval) clearInterval(countdownInterval);
                    overlay.remove();
                    document.removeEventListener('keydown', escHandler);
                }
            };
            document.addEventListener('keydown', escHandler);
        }

        /**
         * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ scan LOT ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß (Auto LMS check - No confirmation)
         * @param {string} scannedLot - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç LOT ‡∏ó‡∏µ‡πà scan
         */
        async function handleUnknownLotScanned(scannedLot) {
            if (!scannedLot) return;

            console.log(`üîç Processing unknown LOT: ${scannedLot}`);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LOT ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const queue = getQueue();
            const lotInQueue = queue.find(job => job.lot_no === scannedLot);
            
            if (lotInQueue) {
                showNotification(`‚úÖ ‡∏û‡∏ö LOT ${scannedLot} ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å...`, 'success');
                findAndSelectJobByLot(scannedLot);
                return;
            }

            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            showLMSAlertPopup(
                '‚ö†Ô∏è LOT Not in Job Queue',
                `LOT ${scannedLot} not found in current job queue`,
                null,
                'warning',
                3000
            );

            // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏≤‡∏á (place_flg = "1") - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            const placeFlg = "1";
            
            // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LMS
            setTimeout(async () => {
                const lmsResult = await checkShelfFromLMS(scannedLot, placeFlg);
                
                if (lmsResult && lmsResult.success) {
                    console.log('üìä LMS Result:', lmsResult);
                    // LMS popup ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô checkShelfFromLMS ‡πÅ‡∏•‡πâ‡∏ß
                    
                    // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á job ‡πÉ‡∏´‡∏°‡πà
                } else if (lmsResult && !lmsResult.success) {
                    // Error popup ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô checkShelfFromLMS ‡πÅ‡∏•‡πâ‡∏ß
                    console.log('‚ùå LMS Error:', lmsResult);
                }
            }, 1000);
        }

        /**
         * Integration ‡∏Å‡∏±‡∏ö barcode scanner ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
         * ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô findAndSelectJobByLot ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö LMS
         */
        const originalFindAndSelectJobByLot = findAndSelectJobByLot;
        
        window.findAndSelectJobByLot = function(lotNo) {
            if (!lotNo) return;

            const queue = getQueue();
            const foundJob = queue.find(job => job.lot_no === lotNo);

            if (foundJob) {
                // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                originalFindAndSelectJobByLot(lotNo);
            } else {
                // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LMS integration
                handleUnknownLotScanned(lotNo);
            }
        };

        /**
         * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LMS API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LOT ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß
         * @param {string} lotNo - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç LOT
         * @param {string} placeFlg - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô ("0" = ‡∏´‡∏¢‡∏¥‡∏ö, "1" = ‡∏ß‡∏≤‡∏á)
         */
        async function checkShelfFromLMS(lotNo, placeFlg) {
            if (!lotNo) {
                showLMSAlertPopup(
                    '‚ùå Incomplete Data',
                    'Please specify LOT number',
                    null,
                    'error',
                    0
                );
                return null;
            }

            try {
                // ‡πÅ‡∏™‡∏î‡∏á loading popup
                showNotification(`üîç Checking LOT ${lotNo} from LMS...`, 'info');
                
                const response = await fetch('/api/shelf/askCorrectShelf', {  // api/shelf/askCorrectShelf ‚Üí Gateway ‚Üí LMS
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        lot_no: lotNo
                    })
                });

                console.log('üì° LMS API Response Status:', response.status);
                const result = await response.json();
                console.log('üìã LMS API Response Data:', result);

                if (response.ok && result.status === 'success') {
                    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á correct_shelf_name ‡πÅ‡∏•‡∏∞ correct_shelf
                    const correctShelf = result.correct_shelf_name || result.correct_shelf || 'UNKNOWN';
                    
                    console.log('‚úÖ LMS Success - Shelf:', correctShelf);
                    
                    // Success - ‡πÅ‡∏™‡∏î‡∏á location popup ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
                    showLMSLocationPopup(result.lot_no, correctShelf, 'warning', 0);
                    
                    return {
                        success: true,
                        correctShelf: correctShelf,
                        lotNo: result.lot_no
                    };
                } else {
                    console.error('‚ùå LMS API Error:', result);
                    
                    // Error popup
                    showLMSAlertPopup(
                        '‚ùå Not found in LMS',
                        result.message || `LOT ${lotNo} is not in the system`,
                        `Status: ${result.status || 'unknown'}<br>Code: ${result.code || 'N/A'}`,
                        'error',
                        5000
                    );
                    
                    return {
                        success: false,
                        error: result.error || 'Unknown error',
                        message: result.message || 'No message provided'
                    };
                }

            } catch (error) {
                console.error('LMS API Error:', error);
                
                // Network error popup - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç parameter order
                showLMSAlertPopup(
                    'üö´ Connection Error',
                    'Cannot connect to LMS system',
                    null,
                    'error',
                    5000
                );
                
                return {
                    success: false,
                    error: 'NETWORK_ERROR',
                    message: error.message
                };
            }
        }
// --- Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shelf name ‡∏à‡∏≤‡∏Å Gateway API ---
async function initializeShelfName() {
    console.log('üè∑Ô∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shelf name ‡πÅ‡∏•‡∏∞ shelf_id ‡∏à‡∏≤‡∏Å Gateway...');
    
    try {
        const response = await fetch('/ShelfName', {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Shelf:', data);
            
            // ‡πÄ‡∏Å‡πá‡∏ö shelf_id ‡πÉ‡∏ô global variable
            if (data.shelf_id) {
                shelf_id = data.shelf_id;
                console.log(`üíæ ‡πÄ‡∏Å‡πá‡∏ö shelf_id: ${shelf_id}`);
            } else {
                console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö shelf_id ‡∏à‡∏≤‡∏Å Gateway');
            }
            
            if (data.success && data.shelf_name) {
                // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
                const shelfDisplayName = data.shelf_name.toUpperCase();
                
                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô UI
                const shelfTitle = document.getElementById('shelfTitle');
                if (shelfTitle) {
                    shelfTitle.textContent = shelfDisplayName;
                    console.log(`‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ä‡∏∑‡πà‡∏≠ Shelf ‡πÄ‡∏õ‡πá‡∏ô: ${shelfDisplayName}`);
                } else {
                    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö element #shelfTitle');
                }
            } else {
                console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö shelf_name ‡∏à‡∏≤‡∏Å Gateway');
                console.log('üìÑ Response data:', data);
            }
        } else {
            console.error('‚ùå Error response:', response.status);
        }
    } catch (error) {
        console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shelf name:', error);
    }
}

// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ function ‡πÄ‡∏õ‡πá‡∏ô global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å console ‡πÑ‡∏î‡πâ
window.initializeShelfName = initializeShelfName;

// --- Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway (‡πÉ‡∏ä‡πâ API endpoint ‡πÉ‡∏´‡∏°‡πà) ---
async function loadPendingJobsFromGateway() {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway ‡∏ú‡πà‡∏≤‡∏ô API...');
    console.log('üìç Current shelf_id:', shelf_id);
    console.log('üìç Function called at:', new Date().toISOString());
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö flag ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
    if (pendingJobsLoaded) {
        console.log('‚ö†Ô∏è ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß, ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥');
        return {
            success: true,
            error: 'Already loaded',
            added: 0,
            skipped: 0,
            total: 0
        };
    }
    
    if (!shelf_id) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ shelf_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô');
        return { success: false, error: 'No shelf_id available' };
    }
    
    try {
        console.log('üì§ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á: POST /api/shelf/pending/load');
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API endpoint ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ
        const response = await fetch('/api/shelf/pending/load', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üì• ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`API request failed: ${response.status}`);
        }
        
        const result = await response.json();
        console.log('üì¶ API Response:', result);
        
        if (result.status === 'success') {
            const loadedCount = result.loaded_count || 0;
            const skippedCount = result.skipped_count || 0;
            const totalPending = result.total_pending || 0;
            
            if (loadedCount > 0) {
                console.log(`üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ${loadedCount} ‡∏á‡∏≤‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà queue`);
                console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥ ${skippedCount} ‡∏á‡∏≤‡∏ô`);
                
                // ‡πÅ‡∏™‡∏î‡∏á notification
                showNotification(
                    `üîÑ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ${loadedCount} ‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Gateway ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à${skippedCount > 0 ? ` (‡∏Ç‡πâ‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥ ${skippedCount} ‡∏á‡∏≤‡∏ô)` : ''}`,
                    'success'
                );
                
                // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä UI (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å API ‡∏™‡πà‡∏á WebSocket broadcast ‡πÅ‡∏•‡πâ‡∏ß)
                renderAll();
                
                // ‡∏ï‡∏±‡πâ‡∏á flag ‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß
                pendingJobsLoaded = true;
                return { success: true, added: loadedCount, skipped: skippedCount, total: totalPending };
            } else {
                console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°');
                if (totalPending > 0) {
                    console.log(`‚ÑπÔ∏è ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${totalPending} ‡∏á‡∏≤‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô queue ‡πÅ‡∏•‡πâ‡∏ß`);
                }
                // ‡∏ï‡∏±‡πâ‡∏á flag ‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà)
                pendingJobsLoaded = true;
                return { success: true, added: 0, skipped: skippedCount, total: totalPending };
            }
        } else {
            throw new Error(result.message || 'Unknown API error');
        }
        
    } catch (error) {
        console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà:', error);
        showNotification(
            `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway ‡πÑ‡∏î‡πâ: ${error.message}`,
            'error'
        );
        
        return { success: false, error: error.message };
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sync queue ‡∏à‡∏≤‡∏Å backend
async function syncQueueFromBackend() {
    try {
        console.log('üîÑ Syncing queue from backend...');
        
        const response = await fetch('/command', {
            method: 'GET',
            headers: {
                'Accept': 'application/json'
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            const backendJobs = data.jobs || [];
            
            console.log(`üì¶ Backend has ${backendJobs.length} jobs:`, backendJobs.map(j => `${j.lot_no}(${j.jobId})`));
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö backend
            localStorage.setItem(QUEUE_KEY, JSON.stringify(backendJobs));
            
            // ‡∏•‡πâ‡∏≤‡∏á active job ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß backend
            const activeJob = getActiveJob();
            if (activeJob && !backendJobs.some(job => job.jobId === activeJob.jobId)) {
                console.log(`üßπ Clearing orphaned active job: ${activeJob.jobId}`);
                clearActiveJob();
            }
            
            console.log(`‚úÖ Queue synced: ${backendJobs.length} jobs`);
            return { success: true, jobs: backendJobs };
        } else {
            console.error('‚ùå Failed to sync queue from backend:', response.status);
            return { success: false, error: `HTTP ${response.status}` };
        }
    } catch (error) {
        console.error('üí• Error syncing queue from backend:', error);
        return { success: false, error: error.message };
    }
}

// --- Shelf State Management Functions ---

/**
 * ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô shelf state ‡∏à‡∏≤‡∏Å server ‡∏ú‡πà‡∏≤‡∏ô API endpoint
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ sync ‡∏Å‡∏±‡∏ö Gateway
 */
async function restoreShelfStateFromServer() {
    try {
        console.log('üîÑ Restoring shelf state from server...');
        
        // ‡∏î‡∏∂‡∏á shelf_id ‡∏à‡∏≤‡∏Å server
        const shelfInfoResponse = await fetch('/ShelfName');
        if (!shelfInfoResponse.ok) {
            throw new Error('Failed to get shelf info');
        }
        
        const shelfInfo = await shelfInfoResponse.json();
        const shelf_id = shelfInfo.shelf_id;
        
        if (!shelf_id || shelf_id === 'ERROR') {
            throw new Error('Invalid shelf_id from server');
        }
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠ restore shelf state
        const response = await fetch('/api/shelf/shelfItem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                shelf_id: shelf_id,
                update_flg: "0", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å update ‡πÄ‡∏õ‡πá‡∏ô update_flg 
                shelf_state: [] // empty array for read
            })
        });
        
        if (!response.ok) {
            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('üì¶ Shelf state restored:', result);
        
        // Gateway ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÉ‡∏ô result.data ‡∏´‡∏£‡∏∑‡∏≠ result.shelf_state
        const serverState = result.shelf_state || result.data;
        
        if (result.status === 'success' && serverState) {
            let finalState = [];
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (Array.isArray(serverState)) {
                // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gateway ‡∏°‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ array ‡πÅ‡∏•‡πâ‡∏ß [{level: 1, block: 1, lots: [...]}]
                finalState = serverState;
                console.log('üì¶ Using array format from Gateway:', finalState);
            } else if (typeof serverState === 'object') {
                // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array
                finalState = [];
                for (const [positionKey, positionData] of Object.entries(serverState)) {
                    if (positionData.level && positionData.block) {
                        finalState.push({
                            level: positionData.level,
                            block: positionData.block,
                            lots: positionData.lots || []
                        });
                    }
                }
                console.log('üì¶ Converted object to array format:', finalState);
            }
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
            localStorage.setItem(GLOBAL_SHELF_STATE_KEY, JSON.stringify(finalState));
            
            console.log(`‚úÖ Shelf state restored: ${finalState.length} positions updated`);
            
            // Re-render UI
            renderAll();
            
            return {
                success: true,
                positions_count: finalState.length,
                message: 'Shelf state restored successfully'
            };
        } else {
            throw new Error('Invalid response format from server');
        }
        
    } catch (error) {
        console.error('‚ùå Failed to restore shelf state:', error);
        showNotification(`‚ö†Ô∏è Failed to restore shelf state: ${error.message}`, 'warning');
        
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * ‡∏™‡πà‡∏á current shelf state ‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà server/Gateway
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á state ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ sync
 */
async function syncShelfStateToServer() {
    try {
        console.log('üîÑ Syncing shelf state to server...');
        
        // ‡∏î‡∏∂‡∏á current state ‡∏à‡∏≤‡∏Å localStorage
        const currentState = JSON.parse(localStorage.getItem(GLOBAL_SHELF_STATE_KEY) || '[]');
        
        if (currentState.length === 0) {
            throw new Error('No shelf state data to sync');
        }
        
        // ‡∏î‡∏∂‡∏á shelf_id
        const shelfInfoResponse = await fetch('/ShelfName');
        if (!shelfInfoResponse.ok) {
            throw new Error('Failed to get shelf info');
        }
        
        const shelfInfo = await shelfInfoResponse.json();
        const shelf_id = shelfInfo.shelf_id;
        
        if (!shelf_id || shelf_id === 'ERROR') {
            throw new Error('Invalid shelf_id from server');
        }
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ array format ‡∏ï‡∏£‡∏á‡πÜ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á)
        // currentState ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ [{level: 1, block: 1, lots: [...]}] ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ position ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á
        const arrayFormat = currentState.filter(position => position.lots && position.lots.length > 0);
        
        console.log('üì¶ Sending shelf state array:', arrayFormat);
        
        // ‡∏™‡πà‡∏á‡πÑ‡∏õ server
        const response = await fetch('/api/shelf/shelfItem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                shelf_id: shelf_id,
                update_flg: "1", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å update ‡πÄ‡∏õ‡πá‡∏ô update_flg
                shelf_state: arrayFormat
            })
        });
        
        if (!response.ok) {
            throw new Error(`Server returned ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('üì° Shelf state sync result:', result);
        
        if (result.status === 'success') {
            console.log(`‚úÖ Shelf state synced successfully. Gateway sync: ${result.gateway_sync ? '‚úÖ' : '‚ùå'}`);
            
            return {
                success: true,
                gateway_sync: result.gateway_sync,
                message: 'Shelf state synced successfully'
            };
        } else {
            throw new Error(result.message || 'Sync failed');
        }
        
    } catch (error) {
        console.error('‚ùå Failed to sync shelf state:', error);
        showNotification(`‚ö†Ô∏è Failed to sync shelf state: ${error.message}`, 'warning');
        
        return {
            success: false,
            error: error.message
        };
    }
}

/**
 * Auto-sync shelf state ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å job completion
 * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ WebSocket ‡∏´‡∏£‡∏∑‡∏≠ manual trigger
 */
async function autoSyncAfterJobComplete(completedJobData = null) {
    try {
        console.log('üîÑ Auto-syncing shelf state after job completion...');
        
        if (completedJobData) {
            console.log(`üìã Job completed: ${completedJobData.lot_no} (${completedJobData.action})`);
        }
        
        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ local state ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Sync to server/Gateway
        const syncResult = await syncShelfStateToServer();
        
        if (syncResult.success) {
            showNotification(
                `‚úÖ Shelf state synced ${syncResult.gateway_sync ? 'to Gateway' : 'locally'}`, 
                'success'
            );
        }
        
        return syncResult;
        
    } catch (error) {
        console.error('‚ùå Auto-sync failed:', error);
        return { success: false, error: error.message };
    }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞
 */
async function getCellCapacityInfo(level, block) {
    try {
        const response = await fetch(`/api/shelf/capacity/${level}/${block}`);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log(`üìè Cell L${level}B${block} capacity info:`, result);
        return result;
        
    } catch (error) {
        console.error(`‚ùå Failed to get capacity info for L${level}B${block}:`, error);
        // Fallback to local calculation
        const capacity = getCellCapacity(level, block);
        const lots = getLotsInCell(level, block);
        const currentTray = lots.reduce((sum, lot) => sum + (lot.tray_count || 1), 0);
        
        return {
            level: level,
            block: block,
            max_capacity: capacity,
            current_tray: currentTray,
            available_space: capacity - currentTray,
            usage_percentage: Math.round((currentTray / capacity) * 100),
            is_full: currentTray >= capacity,
            error: error.message
        };
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Backend
 */
async function refreshCellCapacities() {
    try {
        console.log('üîÑ Refreshing cell capacities from Backend...');
        await loadShelfConfig(); // ‡πÇ‡∏´‡∏•‡∏î config ‡πÉ‡∏´‡∏°‡πà‡∏ã‡∏∂‡πà‡∏á‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏î‡πâ‡∏ß‡∏¢
        console.log('‚úÖ Cell capacities refreshed successfully');
        renderAll(); // Re-render UI
    } catch (error) {
        console.error('‚ùå Failed to refresh cell capacities:', error);
    }
}

/**
 * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©)
 */
function resetPendingJobsFlag() {
    pendingJobsLoaded = false;
    console.log('üîÑ Reset pending jobs flag - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
}

// ‡∏ó‡∏≥‡πÉ‡∏´‡πâ function ‡πÄ‡∏õ‡πá‡∏ô global ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å console ‡πÑ‡∏î‡πâ
window.loadPendingJobsFromGateway = loadPendingJobsFromGateway;
window.syncQueueFromBackend = syncQueueFromBackend;
window.restoreShelfStateFromServer = restoreShelfStateFromServer;
window.syncShelfStateToServer = syncShelfStateToServer;
window.autoSyncAfterJobComplete = autoSyncAfterJobComplete;
window.getCellCapacityInfo = getCellCapacityInfo;
window.refreshCellCapacities = refreshCellCapacities;
window.resetPendingJobsFlag = resetPendingJobsFlag;
window.loadLayoutFromGateway = loadLayoutFromGateway;
