/**
 * ui/queue.js - Queue Management, Barcode Scanning & Orchestration
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏ß‡∏á‡∏≤‡∏ô, ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
 */

/**
 * ===================
 * RENDERING FUNCTIONS
 * ===================
 */

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (orchestration)
 */
function renderAll() {
    const queue = ShelfState.getQueue();
    const activeJob = ShelfState.getActiveJob();
    const uiState = ShelfState.getUIState();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Queue Notification
    updateQueueNotificationButton();

    // Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    if (uiState.showMainWithQueue) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Main ‡∏û‡∏£‡πâ‡∏≠‡∏° notification button
        showView('main');
        ShelfUI.createShelfGridStructure();
        ShelfUI.renderShelfGrid();
        controlLEDByQueue();
    } else if (activeJob) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Active Job
        showView('activeJob');
        renderActiveJob();
        controlLEDByActiveJob();
        setupBarcodeScanner();
    } else if (queue.length > 0) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Queue Selection
        showView('queueSelection');
        renderQueueSelectionView(queue);
        controlLEDByQueue();
    } else {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Main (‡πÑ‡∏°‡πà‡∏°‡∏µ queue)
        showView('main');
        ShelfUI.createShelfGridStructure();
        ShelfUI.renderShelfGrid();
        ShelfServices.clearLED();
    }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Queue Selection View
 */
function renderQueueSelectionView(queue) {
    // ‡∏•‡πâ‡∏≤‡∏á containers
    const queueListContainer = document.getElementById('queueListContainer');
    if (queueListContainer) {
        queueListContainer.innerHTML = '';
    }
    
    // ‡∏´‡∏≤ containers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ù‡∏±‡πà‡∏á
    const placeContainer = document.getElementById('placeQueueContainer');
    const pickContainer = document.getElementById('pickQueueContainer');
    
    if (placeContainer) placeContainer.innerHTML = '';
    if (pickContainer) pickContainer.innerHTML = '';

    // ‡πÅ‡∏¢‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏° place_flg
    const placeJobs = queue.filter(job => job.place_flg === '1'); // ‡∏ß‡∏≤‡∏á
    const pickJobs = queue.filter(job => job.place_flg === '0');  // ‡∏´‡∏¢‡∏¥‡∏ö

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á job item
    function createJobItem(job) {
        const jobItem = document.createElement('div');
        jobItem.className = 'queue-item';
        jobItem.innerHTML = `
            <div class="job-info">
                <div class="job-lot">${job.lot_no}</div>
                <div class="job-location">L${job.level}B${job.block}</div>
            </div>
            <button onclick="selectJob('${job.jobId}')" class="select-job-btn">
                Select
            </button>
        `;
        return jobItem;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏ß‡∏≤‡∏á‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢
    if (placeContainer) {
        if (placeJobs.length > 0) {
            placeJobs.forEach(job => {
                placeContainer.appendChild(createJobItem(job));
            });
        } else {
            placeContainer.innerHTML = '<div class="no-jobs">No place jobs</div>';
        }
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏´‡∏¢‡∏¥‡∏ö‡πÉ‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤
    if (pickContainer) {
        if (pickJobs.length > 0) {
            pickJobs.forEach(job => {
                pickContainer.appendChild(createJobItem(job));
            });
        } else {
            pickContainer.innerHTML = '<div class="no-jobs">No pick jobs</div>';
        }
    }

    // Fallback: ‡πÉ‡∏ä‡πâ container ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ container ‡πÉ‡∏´‡∏°‡πà
    if (!placeContainer || !pickContainer) {
        if (queueListContainer) {
            queue.forEach(job => {
                const jobItem = createJobItem(job);
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° badge ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
                const typeBadge = document.createElement('span');
                typeBadge.className = `job-type-badge ${job.place_flg === '1' ? 'place' : 'pick'}`;
                typeBadge.textContent = job.place_flg === '1' ? 'PLACE' : 'PICK';
                jobItem.querySelector('.job-info').appendChild(typeBadge);
                
                queueListContainer.appendChild(jobItem);
            });
        }
    }

    // Logic focus ‡πÄ‡∏î‡∏¥‡∏°
    const lotInput = document.getElementById('lot-no-input');
    if (lotInput) {
        lotInput.focus();
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡πà‡∏≤
        lotInput.value = '';
        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ placeholder
        lotInput.placeholder = 'Scan or type LOT number...';
    }
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Active Job View
 */
function renderActiveJob() {
    const activeJob = ShelfState.getActiveJob();
    const queue = ShelfState.getQueue();
    const cellPreviewContainer = document.getElementById('cellPreviewContainer');
    const mainContainer = document.querySelector('.main-container');

    if (activeJob) {
        console.log(`üéØ Rendering active job: ${activeJob.lot_no} at L${activeJob.level}B${activeJob.block}`);
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô UI
        updateActiveJobDisplay(activeJob);
    } else {
        console.log('‚ö†Ô∏è No active job to render');
        // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ queue ‡∏´‡∏£‡∏∑‡∏≠ main
        goBackToQueue();
        return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á shelf grid ‡πÉ‡∏´‡∏°‡πà
    ShelfUI.createShelfGridStructure();

    // Log clearly which lot is currently selected as active job, and lots in that cell
    if (activeJob) {
        console.log(`üéØ Active Job Selected: ${activeJob.lot_no} (${activeJob.place_flg === '1' ? 'Place' : 'Pick'})`);
        console.log(`üìç Target Location: Level ${activeJob.level}, Block ${activeJob.block}`);
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô cell preview
        const lotsInCell = ShelfState.getLotsInCell(activeJob.level, activeJob.block);
        console.log(`üì¶ Current lots in L${activeJob.level}B${activeJob.block}:`, lotsInCell);
        
        // Render cell preview
        if (cellPreviewContainer) {
            ShelfUI.renderCellPreview({
                level: activeJob.level,
                block: activeJob.block,
                lots: lotsInCell,
                targetLotNo: activeJob.lot_no,
                isPlaceJob: activeJob.place_flg === '1'
            });
        }
    } else {
        console.log('‚ö†Ô∏è No active job found');
        if (queue.length > 0) {
            showView('queueSelection');
        } else {
            showView('main');
        }
    }

    ShelfUI.renderShelfGrid();
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Active Job
 */
function updateActiveJobDisplay(activeJob) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï job info elements
    const elements = {
        'activeLotNo': activeJob.lot_no,
        'activeJobLocation': `L${activeJob.level}B${activeJob.block}`,
        'activeJobType': activeJob.place_flg === '1' ? 'PLACE' : 'PICK'
    };

    Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress bar ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const progressBar = document.getElementById('jobProgress');
    if (progressBar) {
        const queue = ShelfState.getQueue();
        const totalJobs = queue.length + 1; // +1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö active job
        const completedJobs = 1; // active job ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥
        const percentage = (completedJobs / totalJobs) * 100;
        progressBar.style.width = `${percentage}%`;
    }
}

/**
 * ===================
 * NAVIGATION FUNCTIONS
 * ===================
 */

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
 */
function showView(viewName) {
    const views = ['mainView', 'queueSelectionView', 'activeJobView'];
    
    views.forEach(view => {
        const element = document.getElementById(view);
        if (element) {
            element.style.display = 'none';
        }
    });

    const targetView = document.getElementById(viewName + 'View');
    if (targetView) {
        targetView.style.display = 'block';
    }

    console.log(`üëÅÔ∏è Switched to ${viewName} view`);
}

/**
 * ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Main ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á queue ‡πÑ‡∏ß‡πâ (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Queue Selection)
 */
function goBackToMain() {
    console.log('üè† Going back to main view with queue preserved');
    ShelfState.setShowMainWithQueue(true);
    stopAutoReturnTimer();
    startActivityDetection();
    startAutoReturnTimer();
    renderAll();
}

/**
 * ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Queue Selection (‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° notification ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Main)
 */
function goToQueueSelection() {
    console.log('üìã Going to queue selection view');
    ShelfState.setShowMainWithQueue(false);
    stopAutoReturnTimer();
    stopActivityDetection();
    renderAll();
}

/**
 * ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Queue (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Active Job)
 */
function goBackToQueue() {
    const activeJob = ShelfState.getActiveJob();
    if (activeJob) {
        // ‡πÉ‡∏™‡πà‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ queue
        console.log(`üì§ Returning job ${activeJob.lot_no} to queue`);
        ShelfState.addToQueue(activeJob);
        
        // ‡∏•‡πâ‡∏≤‡∏á active job
        ShelfState.removeActiveJob();
        
        // ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü LED
        ShelfServices.clearLED();
    }
    
    // Clear persistent notifications when leaving Active Job view
    ShelfNotifications.clearPersistentNotifications();
    
    renderAll();
}

/**
 * ===================
 * JOB MANAGEMENT
 * ===================
 */

/**
 * ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å queue
 */
function selectJob(jobId) {
    const queue = ShelfState.getQueue();
    const selectedJob = queue.find(job => job.jobId === jobId);
    
    if (selectedJob) {
        console.log(`üìã Job selected: ${selectedJob.lot_no} at L${selectedJob.level}B${selectedJob.block}`);
        
        // ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue
        ShelfState.removeFromQueue(jobId);
        
        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô active job
        ShelfState.setActiveJob(selectedJob);
        
        // Clear loggedCells for fresh logging
        ShelfState.clearLoggedCells();
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Active Job
        renderAll();
        
        // ‡πÅ‡∏™‡∏î‡∏á notification
        const actionText = selectedJob.place_flg === '1' ? '‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á' : '‡∏´‡∏¢‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á';
        ShelfNotifications.showNotification(
            `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô: ${selectedJob.lot_no} (${actionText}) - L${selectedJob.level}B${selectedJob.block}`,
            'info'
        );
    } else {
        console.error('‚ùå Job not found:', jobId);
        ShelfNotifications.showNotification('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å', 'error');
    }
}

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å LOT number
 */
function findAndSelectJobByLot(lotNo) {
    if (!lotNo) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LOT number ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (!ShelfUtils.isValidLotNumberFormat(lotNo)) {
        console.warn(`‚ùå Invalid LOT format: ${lotNo}`);
        ShelfNotifications.showLotFormatWarningPopup(lotNo);
        return;
    }

    const queue = ShelfState.getQueue();
    const foundJob = queue.find(job => job.lot_no === lotNo);

    if (foundJob) {
        const activeJob = ShelfState.getActiveJob();
        
        if (activeJob && activeJob.lot_no !== lotNo) {
            // ‡∏°‡∏µ active job ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞ scan LOT ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á -> ‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô
            console.log(`ü§î Current active job: ${activeJob.lot_no}, Scanned: ${lotNo}`);
            
            ShelfNotifications.showJobConfirmationPopup(
                activeJob, 
                foundJob, 
                lotNo,
                // Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Yes (Complete current job)
                async () => {
                    console.log(`‚úÖ User confirmed completion of ${activeJob.lot_no}`);
                    
                    // Complete current job
                    const result = await ShelfServices.completeJob(activeJob.jobId);
                    
                    if (result.success) {
                        ShelfNotifications.showNotification(
                            `‡∏á‡∏≤‡∏ô ${activeJob.lot_no} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô`,
                            'success'
                        );
                        
                        // Refresh shelf state
                        await ShelfServices.refreshShelfStateFromServer();
                        
                        // Select new job
                        selectJob(foundJob.jobId);
                    } else {
                        ShelfNotifications.showNotification(
                            `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`,
                            'error'
                        );
                    }
                },
                // Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î No (Continue current job)
                () => {
                    console.log(`‚û°Ô∏è User chose to continue with ${activeJob.lot_no}`);
                    ShelfNotifications.showNotification(
                        `‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ${activeJob.lot_no} ‡∏ï‡πà‡∏≠`,
                        'info'
                    );
                }
            );
        } else {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ active job ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô LOT ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô -> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏¢
            selectJob(foundJob.jobId);
        }
    } else {
        // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô queue -> ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LMS
        console.log(`üîç LOT ${lotNo} not in queue, checking LMS...`);
        handleUnknownLotScanned(lotNo);
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠ scan LOT ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß (Auto LMS check)
 */
async function handleUnknownLotScanned(scannedLot) {
    if (!scannedLot) return;

    console.log(`üîç Processing unknown LOT: ${scannedLot}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LOT ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const queue = ShelfState.getQueue();
    const lotInQueue = queue.find(job => job.lot_no === scannedLot);
    
    if (lotInQueue) {
        // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
        selectJob(lotInQueue.jobId);
        return;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    ShelfNotifications.showLMSAlertPopup(
        '‚ö†Ô∏è LOT Not in Job Queue',
        `LOT ${scannedLot} not found in current job queue`,
        null,
        'warning',
        3000
    );

    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏≤‡∏á (place_flg = "1") - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const placeFlg = "1";
    
    // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å LMS
    setTimeout(async () => {
        try {
            const lmsResult = await ShelfServices.checkShelfFromLMS(scannedLot, placeFlg);
            
            if (lmsResult.success) {
                ShelfNotifications.showLMSLocationPopup(
                    lmsResult.lotNo,
                    lmsResult.correctShelf,
                    'info'
                );
            } else {
                ShelfNotifications.showLMSAlertPopup(
                    '‚ùå LMS Error',
                    lmsResult.error,
                    null,
                    'error',
                    5000
                );
            }
        } catch (error) {
            console.error('‚ùå LMS check failed:', error);
            ShelfNotifications.showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö LMS', 'error');
        }
    }, 1000);
}

/**
 * ===================
 * BARCODE SCANNING
 * ===================
 */

/**
 * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Active Job
 */
function setupBarcodeScanner() {
    const barcodeInput = document.getElementById('barcode-scanner-input');
    if (!barcodeInput) return;

    // ‡πÉ‡∏´‡πâ focus ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Active Job
    barcodeInput.focus();

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î (Enter key)
    barcodeInput.onkeyup = function(event) {
        if (event.key === 'Enter' && this.value.trim()) {
            handleBarcodeScanned();
        }
    };

    // ‡πÉ‡∏´‡πâ focus ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏°‡∏≠
    barcodeInput.onblur = function() {
        setTimeout(() => {
            if (document.getElementById('barcode-scanner-input')) {
                this.focus();
            }
        }, 100);
    };
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
 */
function handleBarcodeScanned() {
    const barcodeInput = document.getElementById('barcode-scanner-input');
    if (!barcodeInput) return;

    const scannedData = barcodeInput.value.trim();
    barcodeInput.value = '';

    if (!scannedData) return;

    console.log(`üì± Barcode scanned: ${scannedData}`);
    
    const activeJob = ShelfState.getActiveJob();
    if (!activeJob) {
        console.warn('‚ö†Ô∏è No active job for barcode scanning');
        return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô lot number ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô queue ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (ShelfUtils.isValidLotNumberFormat(scannedData)) {
        const isLotInQueue = ShelfState.isLotInQueue(scannedData);
        
        if (isLotInQueue && scannedData !== activeJob.lot_no) {
            // LOT ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô queue -> ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            findAndSelectJobByLot(scannedData);
            return;
        } else if (scannedData === activeJob.lot_no) {
            // ‡∏™‡πÅ‡∏Å‡∏ô LOT ‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô -> ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            ShelfNotifications.showNotification(`Confirmed LOT: ${scannedData}`, 'success');
            return;
        }
    }

    const locationMatch = ShelfUtils.parseLocationFromBarcode(scannedData);
    
    if (!locationMatch) {
        ShelfNotifications.showNotification('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'warning');
        return;
    }

    const { level, block } = locationMatch;
    const correctLevel = Number(activeJob.level);
    const correctBlock = Number(activeJob.block);

    // ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÉ‡∏´‡πâ‡∏•‡∏ö class error ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å cell
    const allCells = document.querySelectorAll('.shelf-cell');
    allCells.forEach(cell => {
        cell.classList.remove('error-source', 'error-target');
    });

    if (Number(level) === correctLevel && Number(block) === correctBlock) {
        // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        console.log(`‚úÖ Correct location scanned: L${level}B${block}`);
        ShelfNotifications.showNotification('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...', 'success', { persistent: true });
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô complete job
        setTimeout(() => {
            completeCurrentJob();
        }, 1500);
    } else {
        // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î
        console.log(`‚ùå Wrong location scanned: L${level}B${block}, expected: L${correctLevel}B${correctBlock}`);
        
        const errorMessage = `Wrong location: scanned L${level}B${block}, should be L${correctLevel}B${correctBlock}`;
        const errorJob = { 
            ...activeJob, 
            error: true, 
            errorType: 'WRONG_LOCATION', 
            errorMessage 
        };
        
        ShelfState.setActiveJob(errorJob);
        renderAll();
        
        ShelfNotifications.showNotification(errorMessage, 'error', { persistent: true });
        
        // ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü LED ‡πÅ‡∏™‡∏î‡∏á error
        controlLEDByActiveJob();
    }
}

/**
 * ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Complete Job
 */
async function completeCurrentJob() {
    let activeJob = ShelfState.getActiveJob();
    if (!activeJob) {
        console.warn('‚ö†Ô∏è No active job to complete');
        return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error state ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (activeJob.error) {
        console.log('üîÑ Clearing error state before completion');
        delete activeJob.error;
        delete activeJob.errorType;
        delete activeJob.errorMessage;
        ShelfState.setActiveJob(activeJob);
    }

    console.log('üöÄ Completing job:', activeJob.jobId, 'Lot:', activeJob.lot_no);

    // Clear loggedCells so next render logs new state
    ShelfState.clearLoggedCells();

    // ‡πÉ‡∏ä‡πâ HTTP API ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    console.log('üì§ Sending complete job request via HTTP API...');
    
    const result = await ShelfServices.completeJob(activeJob.jobId);
    
    if (result.success) {
        console.log('‚úÖ Job completed successfully');
        ShelfNotifications.showNotification(`‡∏á‡∏≤‡∏ô ${activeJob.lot_no} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß`, 'success');
        
        // ‡∏•‡∏ö active job
        ShelfState.removeActiveJob();
        
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä shelf state
        await ShelfServices.refreshShelfStateFromServer();
        
        // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        renderAll();
    } else {
        console.error('‚ùå Job completion failed:', result.error);
        ShelfNotifications.showNotification(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`, 'error');
    }
}

/**
 * ===================
 * LED CONTROL
 * ===================
 */

/**
 * ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü LED ‡∏ï‡∏≤‡∏° active job
 */
async function controlLEDByActiveJob(wrongLocation = null) {
    const activeJob = ShelfState.getActiveJob();
    if (!activeJob) {
        console.log('üí° No active job - clearing LEDs');
        return await ShelfServices.clearLED();
    }

    const level = Number(activeJob.level);
    const block = Number(activeJob.block);
    
    // ‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö target position
    let targetColor = { r: 0, g: 100, b: 255 }; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    if (activeJob.place_flg === '0') {
        targetColor = { r: 255, g: 165, b: 0 }; // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pick
    }

    console.log(`üí° LED Control: Active job L${level}B${block}, Place=${activeJob.place_flg}`);

    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô error state ‡πÅ‡∏•‡∏∞‡∏°‡∏µ wrong location
    if (activeJob.error && activeJob.errorType === 'WRONG_LOCATION' && activeJob.errorMessage) {
        const match = activeJob.errorMessage.match(/L(\d+)B(\d+)/);
        if (match) {
            const wrongLevel = parseInt(match[1], 10);
            const wrongBlock = parseInt(match[2], 10);
            
            // ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å
            const positions = [
                { position: `L${wrongLevel}B${wrongBlock}`, r: 255, g: 0, b: 0 }, // ‡πÅ‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏¥‡∏î
                { position: `L${level}B${block}`, r: 0, g: 255, b: 0 } // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å
            ];
            
            return await ShelfServices.setBatchLED(positions, true);
        }
    }
    
    // ‡πÇ‡∏´‡∏°‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ - ‡∏à‡∏∏‡∏î‡πÑ‡∏ü‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    return await ShelfServices.setLED(`L${level}B${block}`, targetColor.r, targetColor.g, targetColor.b);
}

/**
 * ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü LED ‡∏ï‡∏≤‡∏° queue
 */
async function controlLEDByQueue() {
    const queue = ShelfState.getQueue();
    if (!queue || queue.length === 0) {
        console.log('üí° No queue items - clearing LEDs');
        return await ShelfServices.clearLED();
    }
    
    console.log(`üí° LED Queue Mode: ${queue.length} jobs`);
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° batch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å job ‡πÉ‡∏ô queue
    const positions = queue.map(job => ({
        position: `L${Number(job.level)}B${Number(job.block)}`,
        r: 0, g: 150, b: 255 // ‡∏ü‡πâ‡∏≤‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö queue
    }));
    
    return await ShelfServices.setBatchLED(positions, true);
}

/**
 * ===================
 * TIMER FUNCTIONS
 * ===================
 */

/**
 * ‡πÄ‡∏£‡∏¥‡πà‡∏° Auto Return Timer (7 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
 */
function startAutoReturnTimer() {
    const uiState = ShelfState.getUIState();
    if (uiState.autoReturnTimer) {
        stopAutoReturnTimer();
    }
    
    console.log('‚è±Ô∏è Starting auto-return timer (7 seconds)');
    ShelfState.startAutoReturnTimer(() => {
        console.log('‚è∞ Auto-return timer expired - going to queue selection');
        goToQueueSelection();
    }, 7000);
}

/**
 * ‡∏´‡∏¢‡∏∏‡∏î Auto Return Timer
 */
function stopAutoReturnTimer() {
    ShelfState.stopAutoReturnTimer();
    console.log('üõë Auto-return timer stopped');
}

/**
 * Reset Auto Return Timer (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°)
 */
function resetAutoReturnTimer() {
    const uiState = ShelfState.getUIState();
    if (uiState.showMainWithQueue && uiState.autoReturnTimer) {
        console.log('üîÑ Resetting auto-return timer');
        ShelfState.resetAutoReturnTimer(() => {
            goToQueueSelection();
        }, 7000);
    }
}

/**
 * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
function startActivityDetection() {
    const uiState = ShelfState.getUIState();
    if (uiState.activityDetectionActive) return;
    
    ShelfState.setActivityDetectionActive(true);
    console.log('üëÅÔ∏è Starting activity detection');
    
    // Event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    const activityEvents = ['mousedown', 'mousemove', 'keydown', 'scroll', 'touchstart'];
    
    activityEvents.forEach(event => {
        document.addEventListener(event, resetAutoReturnTimer, { passive: true });
    });
}

/**
 * ‡∏´‡∏¢‡∏∏‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 */
function stopActivityDetection() {
    const uiState = ShelfState.getUIState();
    if (!uiState.activityDetectionActive) return;
    
    ShelfState.setActivityDetectionActive(false);
    console.log('üõë Stopping activity detection');
    
    const activityEvents = ['mousedown', 'mousemove', 'keydown', 'scroll', 'touchstart'];
    
    activityEvents.forEach(event => {
        document.removeEventListener(event, resetAutoReturnTimer);
    });
}

/**
 * ===================
 * UI HELPER FUNCTIONS
 * ===================
 */

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏° Queue Notification ‡πÅ‡∏•‡∏∞ Back to Queue
 */
function updateQueueNotificationButton() {
    const queueBtn = document.getElementById('queueNotificationBtn');
    const queueCountBadge = document.getElementById('queueCountBadge');
    const backToQueueBtn = document.getElementById('backToQueueBtn');
    
    if (!queueBtn || !queueCountBadge) return;
    
    const queue = ShelfState.getQueue();
    const queueCount = queue.length;
    const activeJob = ShelfState.getActiveJob();
    const uiState = ShelfState.getUIState();
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏° Queue Notification (‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ main ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ queue)
    if (uiState.showMainWithQueue && queueCount > 0) {
        queueBtn.style.display = 'block';
        queueCountBadge.textContent = queueCount;
        queueBtn.onclick = goToQueueSelection;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï tooltip
        queueBtn.title = `${queueCount} job${queueCount > 1 ? 's' : ''} in queue`;
    } else {
        queueBtn.style.display = 'none';
    }
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏° Back to Queue (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ active job ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô mainView)
    if (backToQueueBtn) {
        if (activeJob && !uiState.showMainWithQueue) {
            backToQueueBtn.style.display = 'block';
            backToQueueBtn.onclick = goBackToQueue;
        } else {
            backToQueueBtn.style.display = 'none';
        }
    }
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á input ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
 */
function handleLotSearch() {
    const lotInput = document.getElementById('lot-no-input');
    if (lotInput) {
        const lotNo = lotInput.value.trim();
        if (lotNo) {
            console.log(`üîç Manual LOT search: ${lotNo}`);
            findAndSelectJobByLot(lotNo);
            
            // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            lotInput.value = '';
        } else {
            console.warn('‚ö†Ô∏è Empty LOT input');
            ShelfNotifications.showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç LOT', 'warning');
        }
    }
}

/**
 * ===================
 * EXPORT FUNCTIONS (Global Scope)
 * ===================
 */

if (typeof window !== 'undefined') {
    // Export all functions to ShelfQueue module
    window.ShelfQueue = {
        renderAll,
        renderQueueSelectionView,
        renderActiveJob,
        updateActiveJobDisplay,
        showView,
        goBackToMain,
        goToQueueSelection,
        goBackToQueue,
        selectJob,
        findAndSelectJobByLot,
        handleUnknownLotScanned,
        setupBarcodeScanner,
        handleBarcodeScanned,
        completeCurrentJob,
        controlLEDByActiveJob,
        controlLEDByQueue,
        startAutoReturnTimer,
        stopAutoReturnTimer,
        resetAutoReturnTimer,
        startActivityDetection,
        stopActivityDetection,
        updateQueueNotificationButton,
        handleLotSearch
    };
    
    // Expose functions that HTML needs to call directly
    window.selectJob = selectJob;
    window.goBackToMain = goBackToMain;
    window.goToQueueSelection = goToQueueSelection;
    window.goBackToQueue = goBackToQueue;
    window.handleLotSearch = handleLotSearch;
    window.findAndSelectJobByLot = findAndSelectJobByLot;
}