# SHELF_CONFIG - ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô! ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô:
# 1. Fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Gateway ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
# 2. LED Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pixel positions  
# 3. Frontend grid creation ‡πÅ‡∏•‡∏∞ validation
# 4. API endpoints ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
# 5. Database initialization ‡πÅ‡∏•‡∏∞ state management
# *** ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gateway ***
SHELF_CONFIG = {
    1: 6,  # Level 1: 6 blocks (fallback)
    2: 6,  # Level 2: 6 blocks (fallback)
    3: 6,  # Level 3: 6 blocks (fallback)
    4: 6,  # Level 4: 6 blocks (fallback)
}

# === Dynamic Layout Configuration ===
# ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Gateway API ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ hardcode

# CELL_CAPACITIES - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏£‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Gateway)
CELL_CAPACITIES = {
    # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å override ‡∏à‡∏≤‡∏Å Gateway
    '1-1': 24,  
    '1-2': 24,
    '1-3': 24,
    '1-4': 24,
    '1-5': 24,
    '1-6': 24,
}

# DYNAMIC_LAYOUT - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• layout ‡∏à‡∏≤‡∏Å Gateway
DYNAMIC_LAYOUT = {}

# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô CELL_CAPACITIES
DEFAULT_CELL_CAPACITY = 24

def update_layout_from_gateway(gateway_layout: dict):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï local configuration ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• layout ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Gateway
    
    Args:
        gateway_layout: dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡πÄ‡∏õ‡πá‡∏ô position (‡πÄ‡∏ä‡πà‡∏ô "L1-B1") ‡πÅ‡∏•‡∏∞ value ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏≠‡∏á
        
    Returns:
        bool: True ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        
    Example Gateway Layout:
    {
        "L1-B1": {"capacity": 40, "active": true, "level": "1", "block": "1"},
        "L1-B2": {"capacity": 40, "active": true, "level": "1", "block": "2"},
        ...
    }
    """
    try:
        global CELL_CAPACITIES, SHELF_CONFIG, DYNAMIC_LAYOUT
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å Gateway
        DYNAMIC_LAYOUT = gateway_layout.copy()
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï CELL_CAPACITIES
        new_capacities = {}
        new_shelf_config = {}
        
        for position_key, slot_info in gateway_layout.items():
            if not slot_info.get("active", True):
                continue  # ‡∏Ç‡πâ‡∏≤‡∏° slot ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active
                
            level = int(slot_info.get("level", "1"))
            block = int(slot_info.get("block", "1"))
            capacity = int(slot_info.get("capacity", DEFAULT_CELL_CAPACITY))
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï capacity
            cell_key = f"{level}-{block}"
            new_capacities[cell_key] = capacity
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï shelf config
            if level not in new_shelf_config:
                new_shelf_config[level] = 0
            new_shelf_config[level] = max(new_shelf_config[level], block)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï global variables
        CELL_CAPACITIES.update(new_capacities)
        SHELF_CONFIG.update(new_shelf_config)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï shelf_state structure ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        current_state = DB.get("shelf_state", [])
        new_state = []
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á state structure ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° Gateway layout
        for level in sorted(new_shelf_config.keys()):
            for block in range(1, new_shelf_config[level] + 1):
                # ‡∏´‡∏≤ existing data
                existing_lots = []
                for cell in current_state:
                    if len(cell) >= 3 and cell[0] == level and cell[1] == block:
                        existing_lots = cell[2]
                        break
                
                new_state.append([level, block, existing_lots])
        
        DB["shelf_state"] = new_state
        
        print(f"‚úÖ Layout updated from Gateway:")
        print(f"   üìä SHELF_CONFIG: {new_shelf_config}")
        print(f"   üì¶ CELL_CAPACITIES: {len(new_capacities)} positions")
        print(f"   üèóÔ∏è  SHELF_STATE: {len(new_state)} cells")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° detailed logging ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö layout ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        log_current_layout()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to update layout from Gateway: {e}")
        return False

def get_layout_info():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• layout ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏£‡∏ß‡∏° Gateway data ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    """
    return {
        "shelf_config": SHELF_CONFIG,
        "cell_capacities": CELL_CAPACITIES,
        "dynamic_layout": DYNAMIC_LAYOUT,
        "total_positions": len(CELL_CAPACITIES),
        "default_capacity": DEFAULT_CELL_CAPACITY
    }

def create_initial_shelf_state():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏ï‡∏≤‡∏° SHELF_CONFIG (stacked lots)"""
    shelf_state = []
    for level, num_blocks in SHELF_CONFIG.items():
        for block in range(1, num_blocks + 1):
            shelf_state.append([level, block, []])  # [level, block, lots]
    return shelf_state

DB = {
    "jobs": [],
    "shelf_state": create_initial_shelf_state(),
    "job_counter": 0
}

# --- Helper Functions ---
def get_job_by_id(job_id: str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Job ‡∏à‡∏≤‡∏Å ID ‡πÉ‡∏ô DB"""
    return next((job for job in DB["jobs"] if job.get("jobId") == job_id), None)


# --- Stacked Lots Helper Functions ---

def get_cell_capacity(level: int, block: int):
    """‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏≤‡∏° level ‡πÅ‡∏•‡∏∞ block"""
    cell_key = f"{level}-{block}"
    return CELL_CAPACITIES.get(cell_key, DEFAULT_CELL_CAPACITY)

def get_cell(level: int, block: int):
    for cell in DB["shelf_state"]:
        if cell[0] == level and cell[1] == block:
            return cell
    return None

def get_lots_in_position(level: int, block: int):
    cell = get_cell(level, block)
    if cell:
        return cell[2]
    return []

def add_lot_to_position(level: int, block: int, lot_no: str, tray_count: int, biz: str = "Unknown"):
    cell = get_cell(level, block)
    if not cell:
        return False
    lots = cell[2]
    total_tray = sum(lot['tray_count'] for lot in lots) + tray_count
    max_capacity = get_cell_capacity(level, block)
    if total_tray > max_capacity:
        print(f"‚ö†Ô∏è Cell L{level}B{block} overflow: {total_tray} > {max_capacity}")
        return False  # overflow
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ lot_no ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô cell ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° tray_count ‡πÑ‡∏õ‡∏ó‡∏µ‡πà lot ‡πÄ‡∏î‡∏¥‡∏°
    for lot in lots:
        if lot['lot_no'] == lot_no:
            lot['tray_count'] += tray_count
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï biz ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô Unknown
            if 'biz' not in lot or lot['biz'] == "Unknown":
                lot['biz'] = biz
            return True
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ lot_no ‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏™‡∏∏‡∏î: append)
    lots.append({"lot_no": lot_no, "tray_count": tray_count, "biz": biz})
    return True

def remove_lot_from_position(level: int, block: int, lot_no: str):
    cell = get_cell(level, block)
    if not cell:
        return False
    lots = cell[2]
    for i, lot in enumerate(lots):
        if lot['lot_no'] == lot_no:
            lots.pop(i)
            return True
    return False

def update_lot_quantity(level: int, block: int, lot_no: str, new_tray_count: int):
    cell = get_cell(level, block)
    if not cell:
        return False
    lots = cell[2]
    for lot in lots:
        if lot['lot_no'] == lot_no:
            lot['tray_count'] = new_tray_count
            return True
    return False

def find_lot_location(lot_no: str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤ lot_no ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà cell ‡πÑ‡∏´‡∏ô (‡∏Ñ‡∏∑‡∏ô (level, block) ‡∏´‡∏£‡∏∑‡∏≠ None)"""
    for cell in DB["shelf_state"]:
        for lot in cell[2]:
            if lot['lot_no'] == lot_no:
                return (cell[0], cell[1])
    return None

def get_lot_in_position(level: int, block: int):
    """‡∏î‡∏∂‡∏á lot_no ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    for cell in DB["shelf_state"]:
        if cell[0] == level and cell[1] == block:
            return cell[3]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô lot_no
    return None

def validate_position(level: int, block: int):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    return level in SHELF_CONFIG and 1 <= block <= SHELF_CONFIG[level]

def update_lot_biz(lot_no: str, biz: str):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï biz ‡∏Ç‡∏≠‡∏á lot_no ‡∏ó‡∏∏‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö"""
    updated_count = 0
    for cell in DB["shelf_state"]:
        for lot in cell[2]:
            if lot['lot_no'] == lot_no:
                lot['biz'] = biz
                updated_count += 1
    return updated_count
def migrate_existing_lots_add_biz():
    """‡πÄ‡∏û‡∏¥‡πà‡∏° biz field ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö lots ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ biz"""
    updated_count = 0
    for cell in DB["shelf_state"]:
        for lot in cell[2]:
            if 'biz' not in lot:
                lot['biz'] = "Unknown"
                updated_count += 1
    if updated_count > 0:
        print(f"üîÑ Migrated {updated_count} existing lots to include biz field")
    return updated_count

def get_shelf_info():
    """‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á"""
    return {
        "config": SHELF_CONFIG,
        "total_levels": len(SHELF_CONFIG),
        "max_blocks": max(SHELF_CONFIG.values()) if SHELF_CONFIG else 0,
        "cell_capacities": CELL_CAPACITIES,
        "dynamic_layout": DYNAMIC_LAYOUT
    }

def is_layout_loaded_from_gateway():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î layout ‡∏à‡∏≤‡∏Å Gateway ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á"""
    return bool(DYNAMIC_LAYOUT)

def get_active_positions():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà active ‡∏à‡∏≤‡∏Å Gateway layout"""
    active_positions = []
    for position_key, slot_info in DYNAMIC_LAYOUT.items():
        if slot_info.get("active", True):
            level = int(slot_info.get("level", "1"))
            block = int(slot_info.get("block", "1"))
            active_positions.append((level, block))
    return active_positions

def get_layout_status():
    """‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ layout ‡πÅ‡∏ö‡∏ö compact ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API response"""
    return {
        "shelf_config": SHELF_CONFIG,
        "cell_capacities_count": len(CELL_CAPACITIES),
        "dynamic_layout_count": len(DYNAMIC_LAYOUT), 
        "gateway_loaded": bool(DYNAMIC_LAYOUT),
        "total_cells": len(DB.get("shelf_state", [])),
        "occupied_cells": len([cell for cell in DB.get("shelf_state", []) if len(cell) >= 3 and cell[2]]),
        "default_capacity": DEFAULT_CELL_CAPACITY
    }

def log_current_layout():
    """‡πÅ‡∏™‡∏î‡∏á log ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á layout ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    print("\n" + "="*50)
    print("üìã CURRENT LAYOUT SUMMARY")
    print("="*50)
    
    # 1. SHELF_CONFIG
    print(f"üèóÔ∏è  SHELF_CONFIG (Current): {SHELF_CONFIG}")
    total_positions = sum(SHELF_CONFIG.values()) if SHELF_CONFIG else 0
    print(f"   Total positions: {total_positions}")
    
    # 2. CELL_CAPACITIES  
    print(f"üì¶ CELL_CAPACITIES ({len(CELL_CAPACITIES)} positions):")
    if CELL_CAPACITIES:
        for level in sorted(set(int(k.split('-')[0]) for k in CELL_CAPACITIES.keys())):
            level_capacities = {k: v for k, v in CELL_CAPACITIES.items() if k.startswith(f"{level}-")}
            print(f"   Level {level}: {level_capacities}")
    else:
        print("   (Empty)")
    
    # 3. DYNAMIC_LAYOUT from Gateway
    print(f"üåê DYNAMIC_LAYOUT from Gateway ({len(DYNAMIC_LAYOUT)} positions):")
    if DYNAMIC_LAYOUT:
        for level in sorted(set(int(info.get('level', '1')) for info in DYNAMIC_LAYOUT.values())):
            level_layout = {k: v for k, v in DYNAMIC_LAYOUT.items() if int(v.get('level', '1')) == level}
            print(f"   Level {level}:")
            for pos_key, slot_info in sorted(level_layout.items()):
                status = "‚úÖ" if slot_info.get("active", True) else "‚ùå"
                capacity = slot_info.get("capacity", "?")
                print(f"     {pos_key}: {status} Cap={capacity}")
    else:
        print("   (Empty - using fallback SHELF_CONFIG)")
    
    # 4. Current DB state summary
    print(f"üíæ DATABASE SHELF_STATE ({len(DB.get('shelf_state', []))} cells):")
    if DB.get("shelf_state"):
        occupied_count = 0
        for cell in DB["shelf_state"]:
            if len(cell) >= 3 and cell[2]:  # ‡∏°‡∏µ lots
                occupied_count += 1
        print(f"   Total cells: {len(DB['shelf_state'])}")
        print(f"   Occupied cells: {occupied_count}")
        print(f"   Empty cells: {len(DB['shelf_state']) - occupied_count}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á
        if occupied_count > 0:
            print("   üì¶ Occupied positions:")
            for cell in DB["shelf_state"]:
                if len(cell) >= 3 and cell[2]:
                    level, block, lots = cell[0], cell[1], cell[2]
                    total_trays = sum(lot.get("tray_count", 0) for lot in lots)
                    capacity = get_cell_capacity(level, block)
                    usage_pct = round((total_trays / capacity) * 100, 1) if capacity > 0 else 0
                    print(f"     L{level}B{block}: {len(lots)} lots, {total_trays}/{capacity} trays ({usage_pct}%)")
    else:
        print("   (Empty)")
    
    # 5. Summary
    gateway_loaded = bool(DYNAMIC_LAYOUT)
    print(f"\nüìä SUMMARY:")
    print(f"   Gateway Layout Loaded: {'‚úÖ Yes' if gateway_loaded else '‚ùå No (using fallback)'}")
    print(f"   Active Layout Source: {'Gateway' if gateway_loaded else 'Fallback SHELF_CONFIG'}")
    print(f"   Default Cell Capacity: {DEFAULT_CELL_CAPACITY}")
    print("="*50 + "\n")