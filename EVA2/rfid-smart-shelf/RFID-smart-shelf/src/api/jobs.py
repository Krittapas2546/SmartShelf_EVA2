from fastapi import APIRouter, Request
from fastapi.responses import HTMLResponse , JSONResponse
from fastapi.templating import Jinja2Templates

import json
import pathlib
import httpx
import re
from datetime import datetime

# --- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ---
from core.led_controller import set_led

# --- Import ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ---
from core.models import JobRequest, ErrorRequest, LEDPositionRequest, LEDPositionsRequest, LEDClearAndBatch, LMSCheckShelfRequest, LMSCheckShelfResponse, ShelfComplete, ShelfState, BlockState, LotData, LayoutRequest, LayoutResponse, SlotData
from core.database import (
    DB, get_job_by_id, get_lots_in_position, add_lot_to_position, remove_lot_from_position, update_lot_quantity, validate_position, get_shelf_info, SHELF_CONFIG, update_lot_biz, get_cell_capacity, update_layout_from_gateway, get_layout_info, is_layout_loaded_from_gateway, log_current_layout, get_layout_status
)
from core.lms_config import LMS_BASE_URL, LMS_ENDPOINT, LMS_API_KEY, LMS_TIMEOUT
from api.websockets import manager # <-- impor        },

# Gateway Configuration  
GATEWAY_BASE_URL = "http://43.72.20.238:8000"  # Gateway server URL

# Global shelf information (filled during startup)
GLOBAL_SHELF_INFO = {
    "shelf_id": None,
    "shelf_name": None,
    "local_ip": None
}

def get_actual_local_ip():
    """‡∏î‡∏∂‡∏á local IP address ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 127.0.0.1)"""
    import socket
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á socket ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á external server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ local IP
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(("8.8.8.8", 80))
            local_ip = s.getsockname()[0]
            return local_ip
    except Exception:
        # Fallback: ‡πÉ‡∏ä‡πâ hostname
        try:
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            if local_ip.startswith("127."):
                return "192.168.1.100" 
            return local_ip
        except:
            return "192.168.1.100"  #

# === Gateway Layout Functions ===
async def fetch_layout_from_gateway(shelf_id: str = None):
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• layout (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏≤‡∏á) ‡∏à‡∏≤‡∏Å Gateway
    """
    try:
        if not shelf_id:
            shelf_id = GLOBAL_SHELF_INFO.get("shelf_id", "PC2")
        
        gateway_payload = {
            "shelf_id": shelf_id,
            "update_flg": "0",  # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            "slots": {}
        }
        
        headers = {
            "Accept": "application/json", 
            "Content-Type": "application/json"
        }
        
        print(f"üîÑ Fetching layout from Gateway: {GATEWAY_BASE_URL}/IoTManagement/shelf/layout")
        print(f"üì¶ Payload: {gateway_payload}")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{GATEWAY_BASE_URL}/IoTManagement/shelf/layout",
                json=gateway_payload,
                headers=headers
            )
            
            print(f"üì° Gateway Response Status: {response.status_code}")
            
            if response.status_code == 200:
                response_data = response.json()
                print(f"‚úÖ Layout fetched successfully")
                print(f"üì¶ Layout data: {response_data}")
                
                return response_data
            else:
                print(f"‚ö†Ô∏è Gateway layout fetch failed: {response.status_code} - {response.text}")
                return None
                
    except Exception as e:
        print(f"‚ö†Ô∏è Layout fetch error: {e}")
        return None

async def sync_layout_to_gateway(layout_data: dict, shelf_id: str = None):
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• layout ‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà Gateway (‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
    """
    try:
        if not shelf_id:
            shelf_id = GLOBAL_SHELF_INFO.get("shelf_id", "PC2")
        
        gateway_payload = {
            "shelf_id": shelf_id,
            "update_flg": "1",  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            "slots": layout_data
        }
        
        headers = {
            "Accept": "application/json", 
            "Content-Type": "application/json"
        }
        
        print(f"üîÑ Syncing layout to Gateway: {GATEWAY_BASE_URL}/IoTManagement/shelf/layout")
        print(f"üì¶ Payload: {gateway_payload}")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{GATEWAY_BASE_URL}/IoTManagement/shelf/layout",
                json=gateway_payload,
                headers=headers
            )
            
            print(f"üì° Gateway Response Status: {response.status_code}")
            
            if response.status_code == 200:
                print(f"‚úÖ Layout synced successfully")
                return True
            else:
                print(f"‚ö†Ô∏è Gateway layout sync failed: {response.status_code} - {response.text}")
                return False
                
    except Exception as e:
        print(f"‚ö†Ô∏è Layout sync error: {e}")
        return False

# === Gateway Logging Functions ===
async def log_to_gateway(event_type: str, event_data: dict, shelf_id: str = None):
    """
    Gateway logging disabled - Gateway API requires full ShelfComplete format
    Only ShelfComplete data is sent via send_shelf_complete_to_gateway()
    """
    print(f"üìù Local log: {event_type} - {event_data}")
    return True  # Always return success to avoid breaking existing code

async def get_logs_from_gateway(limit: int = 20, event_type: str = None):
    """‡∏î‡∏∂‡∏á logs ‡∏à‡∏≤‡∏Å Gateway (‡πÉ‡∏ä‡πâ auto-detected shelf_id)"""
    try:
        params = {"limit": limit}
        if event_type:
            params["event_type"] = event_type
            
        # ‚úÖ ‡πÉ‡∏ä‡πâ endpoint ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà Gateway auto-detect shelf ‡∏à‡∏≤‡∏Å IP
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(
                f"{GATEWAY_BASE_URL}/IoTManagement/shelf/requestID",
                params=params
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                return {"error": f"Gateway returned {response.status_code}: {response.text}"}
                
    except Exception as e:
        return {"error": str(e)}

async def send_shelf_complete_to_gateway(job: dict):
    """
    ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ShelfComplete ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gateway API
    ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å job (‡∏ó‡∏µ‡πà‡∏°‡∏µ biz ‡πÅ‡∏•‡∏∞ shelf_id ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if not job.get("biz"):
            print(f"‚ö†Ô∏è Warning: Missing biz in job {job.get('jobId', 'unknown')}")
            return False
            
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ShelfComplete ‡∏ï‡∏≤‡∏° Gateway API format
        shelf_complete_data = {
            "job_id": job.get("jobId"),  # ‡πÉ‡∏ä‡πâ jobId ‡∏Ç‡∏≠‡∏á local system
            "biz": job["biz"],  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ
            "shelf_id": job.get("shelf_id", "UNKNOWN"),
            "lot_no": job["lot_no"],
            "level": str(job["level"]),
            "block": str(job["block"]),
            "place_flg": str(job["place_flg"]),
            "trn_status": str(job.get("trn_status", "1")),  # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å job
            "tray_count": str(job.get("tray_count", 1)),
            "status": "success"  # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç! Gateway ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ mark ‡πÄ‡∏õ‡πá‡∏ô completed
        }
        
        headers = {
            "Accept": "application/json", 
            "Content-Type": "application/json"
        }
        
        print(f"üîç Sending ShelfComplete to Gateway: {GATEWAY_BASE_URL}/shelf/complete")
        print(f"üì¶ Payload: {shelf_complete_data}")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{GATEWAY_BASE_URL}/shelf/complete",
                json=shelf_complete_data,
                headers=headers
            )
            
            print(f"üì° Gateway Response Status: {response.status_code}")
            print(f"üìÑ Gateway Response Body: {response.text}")
            
            if response.status_code == 200:
                print(f"‚úÖ ShelfComplete sent successfully")
                return True
            else:
                print(f"‚ö†Ô∏è Gateway ShelfComplete failed: {response.status_code} - {response.text}")
                return False
                
    except Exception as e:
        print(f"‚ö†Ô∏è ShelfComplete Gateway error: {e}")
        return False

router = APIRouter() # <-- ‡∏™‡∏£‡πâ‡∏≤‡∏á router ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
templates = Jinja2Templates(directory=str(pathlib.Path(__file__).parent.parent / "templates"))



# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏î‡∏ß‡∏á (‡πÄ‡∏î‡∏¥‡∏°)
@router.post("/api/led", tags=["System"])
async def control_led(request: Request):
    """‡∏£‡∏±‡∏ö level, block ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED (Pi5Neo)"""
    try:
        data = await request.json()
        level = int(data.get('level', 0))
        block = int(data.get('block', 0))
        r = int(data.get('r', 0))
        g = int(data.get('g', 255))
        b = int(data.get('b', 0))
    except Exception as e:
        return JSONResponse(status_code=400, content={"error": "Invalid JSON", "detail": str(e)})

    # Dynamic validation using current shelf config
    if not validate_position(level, block):
        return JSONResponse(status_code=400, content={
            "error": "Invalid position", 
            "message": f"Level {level}, Block {block} does not exist in current shelf configuration"
        })

    try:
        result = set_led(level, block, r, g, b)
        return result
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": "LED control failed", "detail": str(e)})

# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏±‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
@router.post("/api/led/batch", tags=["System"])
async def control_led_batch(request: Request):
    """‡∏£‡∏±‡∏ö array ‡∏Ç‡∏≠‡∏á led objects ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡∏´‡∏•‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô"""
    try:
        data = await request.json()
        leds = data.get('leds', [])
        if not isinstance(leds, list):
            return JSONResponse(status_code=400, content={"error": "Invalid format: 'leds' must be a list"})
        
        # Validate all LED positions before execution
        invalid_positions = []
        for i, led in enumerate(leds):
            level = int(led.get('level', 0))
            block = int(led.get('block', 0))
            if not validate_position(level, block):
                invalid_positions.append(f"Index {i}: L{level}B{block}")
        
        if invalid_positions:
            return JSONResponse(status_code=400, content={
                "error": "Invalid LED positions found",
                "invalid_positions": invalid_positions
            })
        
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: [{level, block, r, g, b}, ...]
        from core.led_controller import set_led_batch
        result = set_led_batch(leds)
        return result
    except Exception as e:
        return JSONResponse(status_code=400, content={"error": "Invalid JSON or batch", "detail": str(e)})

# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ü‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö position string ‡πÄ‡∏ä‡πà‡∏ô "L1B1"
@router.post("/api/led/position", tags=["LED Control"])
async def control_led_by_position(request: LEDPositionRequest):
    """‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á position string ‡πÄ‡∏ä‡πà‡∏ô L1B1, L2B3"""
    try:
        position = request.position.upper().strip()
        r = request.r
        g = request.g
        b = request.b
        
        # Parse position string (L1B1, L2B3, etc.)
        import re
        match = re.match(r'^L(\d+)B(\d+)$', position)
        if not match:
            return JSONResponse(status_code=400, content={
                "error": "Invalid position format", 
                "message": "Position must be in format L{level}B{block} (e.g., L1B1, L2B3)"
            })
        
        level = int(match.group(1))
        block = int(match.group(2))
        
        # Validate position exists in shelf config
        if not validate_position(level, block):
            return JSONResponse(status_code=400, content={
                "error": "Invalid position", 
                "message": f"Position {position} does not exist in shelf configuration"
            })
        
        # Control LED
        print(f"üîç LED Control Debug: {position} -> L{level}B{block}")
        result = set_led(level, block, r, g, b)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED
        if not result.get("ok", False):
            return JSONResponse(status_code=500, content={
                "error": "LED control failed",
                "message": result.get("error", "Unknown LED error"),
                "position": position
            })
        
        # LED control logged locally only
        hex_color = f"#{r:02x}{g:02x}{b:02x}"
        print(f"üí° LED Control: L{level}B{block} = {hex_color} ‚úÖ")
        
        result.update({
            "position": position,
            "level": level,
            "block": block,
            "color": {"r": r, "g": g, "b": b},
            "hex_color": hex_color
        })
        
        return result
        
    except Exception as e:
        return JSONResponse(status_code=400, content={
            "error": "Invalid request", 
            "detail": str(e)
        })

# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ü‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ position strings
@router.post("/api/led/positions", tags=["LED Control"])
async def control_led_by_positions(request: LEDPositionsRequest):
    """‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á array ‡∏Ç‡∏≠‡∏á position objects"""
    try:
        led_commands = []
        invalid_positions = []
        
        # Parse each position
        import re
        for pos_data in request.positions:
            position = pos_data.position.upper().strip()
            r = pos_data.r
            g = pos_data.g
            b = pos_data.b
            
            # Parse position string
            match = re.match(r'^L(\d+)B(\d+)$', position)
            if not match:
                invalid_positions.append(f"{position}: Invalid format")
                continue
                
            level = int(match.group(1))
            block = int(match.group(2))
            
            # Validate position
            if not validate_position(level, block):
                invalid_positions.append(f"{position}: Not in shelf config")
                continue
                
            led_commands.append({
                "level": level,
                "block": block, 
                "r": r,
                "g": g,
                "b": b,
                "position": position,
                "hex_color": f"#{r:02x}{g:02x}{b:02x}"
            })
        
        if invalid_positions:
            return JSONResponse(status_code=400, content={
                "error": "Invalid positions found",
                "invalid_positions": invalid_positions,
                "valid_count": len(led_commands)
            })
        
        if not led_commands:
            return JSONResponse(status_code=400, content={
                "error": "No valid positions provided"
            })
        
        # Execute LED commands
        from core.led_controller import set_led_batch
        set_led_batch(led_commands)
        
        return {
            "ok": True,
            "count": len(led_commands),
            "positions": [cmd["position"] for cmd in led_commands],
            "colors": [
                {
                    "position": cmd["position"], 
                    "rgb": {"r": cmd["r"], "g": cmd["g"], "b": cmd["b"]},
                    "hex": cmd["hex_color"]
                } for cmd in led_commands
            ]
        }
        
    except Exception as e:
        return JSONResponse(status_code=400, content={
            "error": "Invalid request",
            "detail": str(e)
        })
    

@router.post("/api/led/clear", tags=["System"])
async def clear_leds():
    try:
        from core.led_controller import clear_all_leds
        clear_all_leds()
        
        # LED clear logged locally only
        print(f"üí° All LEDs cleared via API")
        
        return {"ok": True}
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": "LED clear failed", "detail": str(e)})

@router.post("/api/led/clear-and-batch", tags=["LED Control"])
async def control_led_clear_and_batch(request: LEDClearAndBatch):
    """
    ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡πÅ‡∏ö‡∏ö clear ‡πÅ‡∏•‡∏∞ batch ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ clear ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤ clear_first=True) ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∂‡∏á set LED ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    """
    try:
        led_commands = []
        invalid_positions = []
        
        # Parse ‡πÅ‡∏•‡∏∞ validate ‡∏ó‡∏∏‡∏Å position ‡∏Å‡πà‡∏≠‡∏ô
        import re
        for pos_data in request.positions:
            position = pos_data.position.upper().strip()
            r = pos_data.r
            g = pos_data.g
            b = pos_data.b
            
            # Parse position string
            match = re.match(r'^L(\d+)B(\d+)$', position)
            if not match:
                invalid_positions.append(f"{position}: Invalid format")
                continue
                
            level = int(match.group(1))
            block = int(match.group(2))
            
            # Validate position exists in shelf config
            if not validate_position(level, block):
                invalid_positions.append(f"{position}: Not in shelf config")
                continue
                
            led_commands.append({
                "level": level,
                "block": block, 
                "r": r,
                "g": g,
                "b": b,
                "position": position,
                "hex_color": f"#{r:02x}{g:02x}{b:02x}"
            })
        
        if invalid_positions:
            return JSONResponse(status_code=400, content={
                "error": "Invalid positions found",
                "invalid_positions": invalid_positions,
                "valid_count": len(led_commands)
            })
        
        if not led_commands:
            return JSONResponse(status_code=400, content={
                "error": "No valid positions provided"
            })
        
        # Clear LEDs ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤ clear_first=True
        if request.clear_first:
            from core.led_controller import clear_all_leds
            clear_all_leds()
            print(f"üí° LEDs cleared before batch operation")
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            if request.delay_ms > 0:
                import asyncio
                await asyncio.sleep(request.delay_ms / 1000.0)
        
        # Execute LED batch commands
        from core.led_controller import set_led_batch
        set_led_batch(led_commands)
        
        print(f"üí° LED Clear & Batch: {len(led_commands)} positions controlled")
        for cmd in led_commands:
            print(f"   {cmd['position']} = {cmd['hex_color']}")
        
        return {
            "ok": True,
            "cleared_first": request.clear_first,
            "delay_ms": request.delay_ms if request.clear_first else 0,
            "count": len(led_commands),
            "positions": [cmd["position"] for cmd in led_commands],
            "colors": [
                {
                    "position": cmd["position"], 
                    "rgb": {"r": cmd["r"], "g": cmd["g"], "b": cmd["b"]},
                    "hex": cmd["hex_color"]
                } for cmd in led_commands
            ]
        }
        
    except Exception as e:
        return JSONResponse(status_code=400, content={
            "error": "Invalid request",
            "detail": str(e)
        })
    
@router.get("/", response_class=HTMLResponse, include_in_schema=False)
def serve_shelf_ui(request: Request):
    return templates.TemplateResponse("shelf_ui.html", {"request": request})

@router.get("/simulator", response_class=HTMLResponse, include_in_schema=False)
def serve_simulator(request: Request):
    return templates.TemplateResponse("test_api.html", {"request": request})

@router.get("/health", tags=["System"])
def health_check():
    return {"status": "ok", "message": "Barcode Smart Shelf Server is running"}

@router.post("/api/shelf/askCorrectShelf", tags=["Shelf Operations"])
async def ask_correct_shelf(request: LMSCheckShelfRequest):
    """
    Smart Shelf ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏õ Gateway ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    Smart Shelf ‚Üí Gateway ‚Üí LMS ‚Üí Gateway ‚Üí Smart Shelf
    """
    try:
        # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Pydantic model
        lot_no = request.lot_no
        
        if not lot_no:
            return JSONResponse(
                status_code=400,
                content={"error": "Missing lot number", "status": "missing_lot"}
            )
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LOT ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing_job = any(j['lot_no'] == lot_no for j in DB["jobs"])
        
        if existing_job:
            return JSONResponse(
                status_code=400, 
                content={
                    "error": "LOT already exists in queue",
                    "status": "duplicate_lot",
                    "message": f"LOT {lot_no} is already in the job queue"
                }
            )
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ Gateway (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ lot_no ‡∏ï‡∏≤‡∏° format ‡πÉ‡∏´‡∏°‡πà)
        gateway_payload = {
            "lot_no": lot_no
        }
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ Gateway ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ LMS ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        gateway_url = f"{GATEWAY_BASE_URL}/shelf/askCorrectShelf"  # Gateway endpoint
        
        headers = {
            "Content-Type": "application/json"
        }
        
        print(f"üîÑ Shelf forwarding to Gateway: {gateway_url}")
        print(f"üì¶ Payload: {gateway_payload}")
        
        async with httpx.AsyncClient(timeout=LMS_TIMEOUT) as client:
            response = await client.post(
                gateway_url,
                json=gateway_payload,
                headers=headers
            )
            
            if response.status_code == 200:
                gateway_response = response.json()
                print(f"üìã Gateway response: {gateway_response}")
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ status ‡πÅ‡∏•‡∏∞ lot_no
                if "status" in gateway_response and "lot_no" in gateway_response:
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Gateway/LMS ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if gateway_response["status"] == "success":
                        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á correct_shelf ‡πÅ‡∏•‡∏∞ correct_shelf_name
                        correct_shelf = (gateway_response.get("correct_shelf_name") or 
                                       gateway_response.get("correct_shelf") or 
                                       "UNKNOWN_SHELF")
                        
                        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shelf ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        if correct_shelf == "UNKNOWN_SHELF" or correct_shelf == "undefined" or not correct_shelf:
                            return JSONResponse(
                                status_code=404,
                                content={
                                    "error": "Shelf information not found",
                                    "message": f"No shelf information found for LOT {gateway_response['lot_no']}",
                                    "status": "not_found"
                                }
                            )
                        
                        return {
                            "status": "success",
                            "correct_shelf_name": correct_shelf,
                            "lot_no": gateway_response["lot_no"],
                            "message": gateway_response.get("message", f"Found correct shelf: {correct_shelf}")
                        }
                    else:
                        # ‡∏Å‡∏£‡∏ì‡∏µ error response ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ code ‡πÅ‡∏•‡∏∞ data
                        error_code = gateway_response.get("code", 400)
                        return JSONResponse(
                            status_code=error_code,
                            content={
                                "error": "Gateway/LMS processing failed",
                                "message": gateway_response.get("message", "Unknown error from Gateway/LMS"),
                                "status": gateway_response["status"],
                                "code": error_code,
                                "data": gateway_response.get("data", [])
                            }
                        )
                else:
                    return JSONResponse(
                        status_code=502,
                        content={
                            "error": "Invalid Gateway response format",
                            "message": "Gateway response missing required fields (status, lot_no)",
                            "received_fields": list(gateway_response.keys()),
                            "raw_response": gateway_response
                        }
                    )
            else:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô error response ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                try:
                    error_response = response.json()
                    if "status" in error_response and error_response["status"] == "error":
                        error_code = error_response.get("code", response.status_code)
                        return JSONResponse(
                            status_code=error_code,
                            content={
                                "error": "Gateway/LMS error",
                                "message": error_response.get("message", "Unknown error"),
                                "status": "error",
                                "code": error_code,
                                "data": error_response.get("data", [])
                            }
                        )
                except:
                    pass  # ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse JSON ‡πÑ‡∏î‡πâ
                
                return JSONResponse(
                    status_code=502,
                    content={
                        "error": "Gateway server error", 
                        "message": f"Gateway server returned status {response.status_code}",
                        "detail": response.text
                    }
                )
                
    except httpx.TimeoutException:
        return JSONResponse(
            status_code=504,
            content={
                "error": "Gateway server timeout",
                "message": "Connection to Gateway server timed out"
            }
        )
    except httpx.ConnectError:
        return JSONResponse(
            status_code=503,
            content={
                "error": "Gateway server unavailable",
                "message": "Cannot connect to Gateway server"
            }
        )
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "error": "Internal server error",
                "message": str(e)
            }
        )

# Backward compatibility endpoint - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö endpoint ‡πÄ‡∏î‡∏¥‡∏°
# @router.post("/api/LMS/checkshelf", tags=["LMS Integration (Legacy)"])
# async def check_shelf_from_lms_legacy(request: LMSCheckShelfRequest):
#     """
#     Legacy endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
#     ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ask_correct_shelf ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
#     """
#     # ‡πÅ‡∏õ‡∏•‡∏á LMSCheckShelfRequest ‡πÄ‡∏õ‡πá‡∏ô Request format
#     from fastapi import Request
#     from fastapi.datastructures import FormData
#     import json
    
#     # ‡∏™‡∏£‡πâ‡∏≤‡∏á mock request object
#     class MockRequest:
#         async def json(self):
#             return {
#                 "lot_no": request.lot_no,
#                 "place_flg": request.place_flg
#             }
    
#     mock_request = MockRequest()
    
#     # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ask_correct_shelf
#     return await ask_correct_shelf(mock_request)

@router.get("/command", tags=["Jobs"])
def get_all_jobs():
    return {"jobs": DB["jobs"]}

@router.get("/api/shelf/state", tags=["Jobs"])
def get_shelf_state():
    # Return lots as list per cell
    shelf_state = []
    for cell in DB["shelf_state"]:
        level, block, lots = cell
        shelf_state.append({
            "level": level,
            "block": block,
            "lots": lots
        })
    return {"shelf_state": shelf_state}

@router.get("/api/shelf/config", tags=["Jobs"])
def get_shelf_config():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á"""
    config = get_shelf_info()
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏£‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á
    config["cell_capacities"] = {}
    for level, num_blocks in SHELF_CONFIG.items():
        for block in range(1, num_blocks + 1):
            cell_key = f"{level}-{block}"
            capacity = get_cell_capacity(level, block)
            config["cell_capacities"][cell_key] = capacity
    return config

@router.get("/api/shelf/layout/status", tags=["Shelf Layout Management"])
def get_layout_status_api():
    """
    ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ layout ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gateway ‡∏´‡∏£‡∏∑‡∏≠ fallback
    """
    try:
        # Log detailed layout info to console/logs
        log_current_layout()
        
        # Return compact status for API response
        status = get_layout_status()
        
        return {
            "status": "success",
            "layout_status": status,
            "message": f"Layout loaded from {'Gateway' if status['gateway_loaded'] else 'fallback configuration'}"
        }
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": f"Failed to get layout status: {str(e)}"
            }
        )

@router.get("/api/shelf/capacity/{level}/{block}", tags=["Jobs"])
def get_cell_capacity_api(level: int, block: int):
    """‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
    if not validate_position(level, block):
        return {
            "error": "Invalid position",
            "message": f"Position L{level}B{block} does not exist in shelf configuration"
        }
    
    capacity = get_cell_capacity(level, block)
    lots = get_lots_in_position(level, block)
    current_tray = sum(lot.get("tray_count", 0) for lot in lots)
    
    return {
        "level": level,
        "block": block,
        "max_capacity": capacity,
        "current_tray": current_tray,
        "available_space": capacity - current_tray,
        "usage_percentage": round((current_tray / capacity) * 100, 1) if capacity > 0 else 0,
        "is_full": current_tray >= capacity
    }

@router.get("/api/shelf/position/{level}/{block}", tags=["Jobs"])
def get_position_info(level: int, block: int):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (level, block)"""
    if not validate_position(level, block):
        return {
            "error": "Invalid position",
            "message": f"Position L{level}B{block} does not exist in shelf configuration"
        }
    lots = get_lots_in_position(level, block)
    return {
        "level": level,
        "block": block,
        "lots": lots,
        "message": f"Position L{level}B{block}: {len(lots)} lot(s)"
    }

@router.get("/api/shelf/lots", tags=["Jobs"])
def get_all_lots_in_shelf():
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Lot ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á (‡∏ó‡∏∏‡∏Å lot ‡∏ó‡∏∏‡∏Å cell)"""
    lots_info = []
    for cell in DB["shelf_state"]:
        level, block, lots = cell
        for lot in lots:
            lots_info.append({
                "level": level,
                "block": block,
                "lot_no": lot["lot_no"],
                "tray_count": lot["tray_count"]
            })
    return {
        "total_lots": len(lots_info),
        "lots": lots_info
    }

@router.post("/command", status_code=201, tags=["Jobs"])
async def create_job_via_api(job: JobRequest):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥
    existing_lot = any(j['lot_no'] == job.lot_no for j in DB["jobs"])
    if existing_lot:
         print(f"API: Rejected duplicate job for Lot {job.lot_no}")
         return {"status": "error", "message": f"Job for lot {job.lot_no} already exists in the queue."}

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏´‡∏¢‡∏¥‡∏ö (pick)
    if job.place_flg == "0":  # ‡∏á‡∏≤‡∏ô‡∏´‡∏¢‡∏¥‡∏ö (pick)
        level = int(job.level)
        block = int(job.block)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ position ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not validate_position(level, block):
            print(f"API: Rejected job for invalid position L{level}B{block}")
            return {
                "status": "error", 
                "message": f"Invalid position L{level}B{block} does not exist in shelf configuration"
            }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ lot_no ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        lots_in_cell = get_lots_in_position(level, block)
        lot_exists = any(lot["lot_no"] == job.lot_no for lot in lots_in_cell)
        
        if not lot_exists:
            print(f"API: Rejected pick job for Lot {job.lot_no} - not found in L{level}B{block}")
            return {
                "status": "error", 
                "message": f"Lot {job.lot_no} not found in position L{level}B{block}. Cannot create pick job for non-existent lot."
            }
        
        print(f"API: Validation passed - Lot {job.lot_no} exists in L{level}B{block}")

    print(f"API: Received new job for Lot {job.lot_no}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö biz (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
    if not hasattr(job, 'biz') or not job.biz:
        print(f"API: Rejected job - missing biz field")
        return {"status": "error", "message": "biz field is required"}
    
    # ‡πÉ‡∏ä‡πâ shelf_id ‡∏à‡∏≤‡∏Å global ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å request
    shelf_id = GLOBAL_SHELF_INFO.get("shelf_id") or getattr(job, 'shelf_id', None)
    if not shelf_id:
        print(f"API: Warning - no shelf_id available, using UNKNOWN")
        shelf_id = "UNKNOWN"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á job object
    new_job = job.dict()
    new_job["shelf_id"] = shelf_id  # ‡πÉ‡∏ä‡πâ shelf_id ‡∏à‡∏≤‡∏Å global ‡∏´‡∏£‡∏∑‡∏≠ request
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° tray_count default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    if "tray_count" not in new_job:
        new_job["tray_count"] = 1
    else:
        new_job["tray_count"] = int(new_job.get("tray_count", 1))
    
    DB["job_counter"] += 1
    new_job["jobId"] = f"job_{DB['job_counter']}"
    DB["jobs"].append(new_job)
    
    print(f"‚úÖ Created job {new_job['jobId']} - Biz: {new_job['biz']}, Shelf: {new_job['shelf_id']}, Lot: {new_job['lot_no']}")
    
    # Job creation logged locally only
    print(f"üìã Job created: {new_job['jobId']} - {new_job['lot_no']} (Biz: {new_job['biz']}, Shelf: {new_job['shelf_id']})")
    
    await manager.broadcast(json.dumps({"type": "new_job", "payload": new_job}))
    return {"status": "success", "job_data": new_job}

@router.post("/command/{job_id}/complete", tags=["Jobs"])
async def complete_job(job_id: str):
    print(f"API: Received 'Task Complete' for job {job_id}")
    job = get_job_by_id(job_id)
    if not job:
        return {"status": "error", "message": "Job not found"}
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if not job.get("biz"):
        print(f"‚ö†Ô∏è Job {job_id} missing biz field")
        return {"status": "error", "message": "Job missing biz field"}
    
    level = int(job["level"])
    block = int(job["block"])
    lot_no = job["lot_no"]
    tray_count = int(job.get("tray_count", 1))
    biz = job["biz"]
    shelf_id = job.get("shelf_id", "UNKNOWN")
    
    if job["place_flg"] == "1":
        # ‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á: ‡πÄ‡∏û‡∏¥‡πà‡∏° lot ‡πÄ‡∏Ç‡πâ‡∏≤ cell ‡∏û‡∏£‡πâ‡∏≠‡∏° biz
        add_lot_to_position(level, block, lot_no, tray_count, biz)
        action = "placed"
    else:
        # ‡∏´‡∏¢‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á: ‡∏•‡∏ö lot ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cell
        remove_lot_from_position(level, block, lot_no)
        action = "picked"
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ShelfComplete ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gateway (job ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• biz ‡πÅ‡∏•‡∏∞ shelf_id ‡πÅ‡∏•‡πâ‡∏ß)
    gateway_success = await send_shelf_complete_to_gateway(job)
    
    print(f"üìã Job {job_id} completed - Biz: {biz}, Shelf: {shelf_id}, Lot: {lot_no}, Action: {action}")
    
    # Job completion logged locally (Gateway data sent via send_shelf_complete_to_gateway)
    print(f"‚úÖ Job completed: {job_id} - {lot_no} ({action}) - Gateway: {'‚úÖ' if gateway_success else '‚ùå'}")
    
    # üîΩ AUTO-SYNC SHELF STATE TO GATEWAY AFTER JOB COMPLETION üîΩ
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á current shelf_state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ Gateway
        current_shelf_state = {}
        for cell in DB["shelf_state"]:
            l, b, lots = cell
            position_key = f"L{l}B{b}"
            current_shelf_state[position_key] = {
                "level": l,
                "block": b, 
                "lots": lots,
                "total_trays": sum(lot.get("tray_count", 1) for lot in lots) if lots else 0
            }
        
        # ‡∏™‡πà‡∏á‡πÑ‡∏õ Gateway
        sync_success = await sync_shelf_state_to_gateway(current_shelf_state)
        print(f"üì° Shelf state auto-sync after job completion: {'‚úÖ' if sync_success else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Auto-sync shelf state failed: {e}")
        # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏ô‡∏µ‡πâ‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
    
    # ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
    DB["jobs"] = [j for j in DB["jobs"] if j.get("jobId") != job_id]
    
    # Broadcast shelf_state as lots per cell
    shelf_state = []
    for cell in DB["shelf_state"]:
        l, b, lots = cell
        shelf_state.append({"level": l, "block": b, "lots": lots})
    await manager.broadcast(json.dumps({
        "type": "job_completed",
        "payload": {
            "completedJobId": job_id,
            "shelf_state": shelf_state,
            "lot_no": lot_no,
            "biz": biz,
            "shelf_id": shelf_id,
            "action": action,
            "gateway_success": gateway_success
        }
    }))
    return {
        "status": "success",
        "lot_no": lot_no,
        "action": action,
        "location": f"L{level}B{block}"
    }

@router.post("/command/{job_id}/error", tags=["Jobs"])
async def error_job(job_id: str, body: ErrorRequest):
    print(f"API: Received 'Error' for job {job_id}")
    job = get_job_by_id(job_id)
    if not job: return {"status": "error", "message": "Job not found"}
        
    job["trn_status"] = "2"
    job["error"] = True
    job["errorLocation"] = body.errorLocation
    
    # Job error logged locally only
    print(f"‚ùå Job error: {job_id} - {job['lot_no']} at {body.errorLocation}")
    
    await manager.broadcast(json.dumps({"type": "job_error", "payload": job}))
    return {"status": "success"}

@router.post("/api/system/reset", tags=["System"])
async def reset_system():
    print("API: Received 'System Reset'")
    DB["jobs"] = []
    # Reset shelf_state to empty stacked lots
    DB["shelf_state"] = []
    for level, num_blocks in SHELF_CONFIG.items():
        for block in range(1, num_blocks + 1):
            DB["shelf_state"].append([level, block, []])
    DB["job_counter"] = 0
    await manager.broadcast(json.dumps({"type": "system_reset"}))
    return {"status": "success"}

@router.post("/clearCommand", tags=["Gateway Operations"])
async def clear_command_from_gateway(request: Request):
    """
    Gateway ‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ lot_no ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
    
    Request Body:
    {
        "shelf_id": "shelf_001",
        "lot_no": "LOT123456",
        "level": 1,
        "block": 2,
        "biz": "business_code"
    }
    """
    try:
        payload = await request.json()
        shelf_id = payload.get("shelf_id")
        lot_no = payload.get("lot_no")
        level = payload.get("level")
        block = payload.get("block")
        biz = payload.get("biz")
        
        print(f"üóëÔ∏è Gateway Clear Command: Shelf {shelf_id}, Lot {lot_no}, Position L{level}B{block}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if not lot_no:
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error",
                    "shelf_id": shelf_id,
                    "lot_no": lot_no,
                    "message": "Missing lot_no parameter"
                }
            )
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        job_to_cancel = None
        for job in DB["jobs"]:
            if job.get("lot_no") == lot_no:
                job_to_cancel = job
                break
        
        if not job_to_cancel:
            # ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ
            return JSONResponse(
                status_code=404,
                content={
                    "status": "not_found",
                    "shelf_id": shelf_id,
                    "lot_no": lot_no,
                    "message": f"Job for lot {lot_no} not found in queue"
                }
            )
        
        # ‡∏•‡∏ö‡∏á‡∏≤‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß
        DB["jobs"] = [job for job in DB["jobs"] if job.get("lot_no") != lot_no]
        
        # ‡∏•‡πâ‡∏≤‡∏á LED ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ level, block)
        if level and block:
            try:
                from core.led_controller import set_led
                set_led(int(level), int(block), 0, 0, 0)  # Turn off LED
                print(f"üí° LED cleared for L{level}B{block}")
            except Exception as led_error:
                print(f"‚ö†Ô∏è LED clear failed: {led_error}")
        
        print(f"‚úÖ Gateway Clear Command Success: Lot {lot_no} removed from queue")
        
        # Broadcast to WebSocket clients
        broadcast_message = {
            "type": "job_canceled",
            "payload": {
                "lot_no": lot_no,
                "level": level,
                "block": block,
                "shelf_id": shelf_id,
                "biz": biz,
                "canceled_job": job_to_cancel,
                "message": f"Job for lot {lot_no} canceled by Gateway"
            }
        }
        
        print(f"üì° Broadcasting job_canceled: {broadcast_message}")
        await manager.broadcast(json.dumps(broadcast_message))
        
        return {
            "status": "success",
            "shelf_id": shelf_id,
            "lot_no": lot_no,
            "message": f"Command canceled successfully for lot {lot_no}",
            "canceled_job": job_to_cancel
        }
        
    except Exception as e:
        print(f"‚ùå Gateway Clear Command Error: {e}")
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "shelf_id": payload.get("shelf_id", "unknown") if 'payload' in locals() else "unknown",
                "lot_no": payload.get("lot_no", "unknown") if 'payload' in locals() else "unknown",
                "message": f"Internal server error: {str(e)}"
            }
        )

@router.get("/api/shelf/occupied", tags=["Jobs"])
def get_occupied_positions():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á (‡∏°‡∏µ lot ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1)"""
    occupied_positions = []
    for cell in DB["shelf_state"]:
        level, block, lots = cell
        if lots:
            for lot in lots:
                occupied_positions.append({
                    "position": f"L{level}B{block}",
                    "level": level,
                    "block": block,
                    "lot_no": lot["lot_no"],
                    "tray_count": lot["tray_count"]
                })
    return {
        "total_occupied": len(occupied_positions),
        "occupied_positions": occupied_positions
    }

@router.get("/api/shelf/summary", tags=["Jobs"])
def get_shelf_summary():
    """‡∏î‡∏∂‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (stacked lots)"""
    total_positions = len(DB["shelf_state"])
    occupied_count = 0
    empty_count = 0
    occupied_list = []
    for cell in DB["shelf_state"]:
        level, block, lots = cell
        if lots:
            occupied_count += 1
            for lot in lots:
                occupied_list.append({
                    "position": f"L{level}B{block}",
                    "lot_no": lot["lot_no"],
                    "tray_count": lot["tray_count"]
                })
        else:
            empty_count += 1
    return {
        "summary": {
            "total_positions": total_positions,
            "occupied": occupied_count,
            "empty": empty_count,
            "occupancy_rate": f"{(occupied_count/total_positions)*100:.1f}%"
        },
        "occupied_details": occupied_list
    }

@router.get("/api/shelf/pending", tags=["Shelf Operations"])
async def get_pending_jobs_from_gateway():
    """
    ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏ü‡∏î‡∏±‡∏ö
    Flow: Smart Shelf ‚Üí Gateway ‚Üí Response with pending jobs
    """
    try:
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö shelf_id ‡∏à‡∏≤‡∏Å global ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡πÉ‡∏´‡∏°‡πà
        shelf_id = GLOBAL_SHELF_INFO.get("shelf_id")
        
        if not shelf_id:
            print("üîÑ No shelf_id in global, fetching from Gateway...")
            
            # ‡∏î‡∏∂‡∏á shelf_id ‡∏à‡∏≤‡∏Å Gateway ‡∏Å‡πà‡∏≠‡∏ô
            local_ip = get_actual_local_ip()
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(
                    'http://43.72.20.238:8000/IoTManagement/shelf/requestID',
                    headers={
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    json={"shelf_ip": local_ip}
                )
                
                if response.status_code == 200:
                    data = response.json()
                    shelf_id = data.get("shelf_id")
                    
                    # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó global
                    GLOBAL_SHELF_INFO["shelf_id"] = shelf_id
                    GLOBAL_SHELF_INFO["shelf_name"] = data.get("shelf_name")
                    GLOBAL_SHELF_INFO["local_ip"] = local_ip
                    
                    print(f"‚úÖ Got shelf_id: {shelf_id}")
                else:
                    return JSONResponse(
                        status_code=502,
                        content={
                            "error": "Cannot get shelf_id from Gateway",
                            "status": "gateway_error",
                            "message": f"Gateway returned {response.status_code}"
                        }
                    )
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway
        pending_url = f"{GATEWAY_BASE_URL}/IoTManagement/shelf/pending/{shelf_id}"
        print(f"üîÑ Fetching pending jobs from: {pending_url}")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(
                pending_url,
                headers={'Accept': 'application/json'}
            )
            
            if response.status_code == 200:
                pending_data = response.json()
                print(f"üì¶ Gateway pending response: {pending_data}")
                
                if pending_data.get("status") == "success" and "data" in pending_data:
                    jobs_data = pending_data["data"]
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Smart Shelf
                    converted_jobs = []
                    for gateway_job in jobs_data:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á jobId ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ job_counter ‡∏Ç‡∏≠‡∏á local
                        DB["job_counter"] += 1
                        local_job_id = f"job_{DB['job_counter']}"
                        
                        converted_job = {
                            "jobId": local_job_id,  # ‡πÉ‡∏ä‡πâ local job_counter ‡∏™‡∏£‡πâ‡∏≤‡∏á jobId ‡πÉ‡∏´‡∏°‡πà
                            "lot_no": gateway_job.get("lot_no"),
                            "level": gateway_job.get("level"),
                            "block": gateway_job.get("block"),
                            "place_flg": gateway_job.get("place_flg"),
                            "tray_count": gateway_job.get("tray_count"),
                            "status": gateway_job.get("status"),
                            "biz": gateway_job.get("biz", "Unknown"),
                            "shelf_id": shelf_id,
                            "create_date": gateway_job.get("create_date"),
                            "source": "gateway_recovery",
                            "gateway_job_id": gateway_job.get("job_id")  # ‡πÄ‡∏Å‡πá‡∏ö original job_id ‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö Gateway
                        }
                        converted_jobs.append(converted_job)
                    
                    print(f"‚úÖ Converted {len(converted_jobs)} pending jobs")
                    
                    return {
                        "status": "success",
                        "shelf_id": shelf_id,
                        "total_pending": len(converted_jobs),
                        "jobs": converted_jobs,
                        "message": f"Found {len(converted_jobs)} pending jobs for shelf {shelf_id}"
                    }
                else:
                    return {
                        "status": "success",
                        "shelf_id": shelf_id,
                        "total_pending": 0,
                        "jobs": [],
                        "message": f"No pending jobs found for shelf {shelf_id}"
                    }
            else:
                return JSONResponse(
                    status_code=502,
                    content={
                        "error": "Gateway pending jobs request failed",
                        "status": "gateway_error",
                        "message": f"Gateway returned {response.status_code}",
                        "detail": response.text
                    }
                )
                
    except httpx.TimeoutException:
        return JSONResponse(
            status_code=504,
            content={
                "error": "Gateway timeout",
                "status": "timeout",
                "message": "Connection to Gateway timed out"
            }
        )
    except httpx.ConnectError:
        return JSONResponse(
            status_code=503,
            content={
                "error": "Gateway unavailable",
                "status": "connection_error",
                "message": "Cannot connect to Gateway server"
            }
        )
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "error": "Internal server error",
                "status": "server_error",
                "message": str(e)
            }
        )

@router.post("/api/shelf/pending/load", tags=["Shelf Operations"])
async def load_pending_jobs_into_queue():
    """
    ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏≤‡∏Å Gateway ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ local job queue
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏î‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö
    """
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
        pending_response = await get_pending_jobs_from_gateway()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ response ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if isinstance(pending_response, JSONResponse):
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error response ‡πÉ‡∏´‡πâ return ‡πÄ‡∏•‡∏¢
            return pending_response
        
        if pending_response.get("status") != "success":
            return JSONResponse(
                status_code=400,
                content={
                    "error": "Failed to get pending jobs",
                    "message": pending_response.get("message", "Unknown error")
                }
            )
        
        pending_jobs = pending_response.get("jobs", [])
        
        if not pending_jobs:
            return {
                "status": "success",
                "message": "No pending jobs to load",
                "loaded_count": 0,
                "skipped_count": 0,
                "total_queue_size": len(DB["jobs"])
            }
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ local queue (‡∏Ç‡πâ‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥)
        loaded_count = 0
        skipped_count = 0
        
        for pending_job in pending_jobs:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥ (lot_no, level, block) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à gateway_job_id
            job_exists = any(
                job["lot_no"] == pending_job["lot_no"] and
                job["level"] == pending_job["level"] and
                job["block"] == pending_job["block"]
                for job in DB["jobs"]
            )
            
            if not job_exists:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ queue
                DB["jobs"].append(pending_job)
                loaded_count += 1
                print(f"‚úÖ Loaded pending job: {pending_job['jobId']} - {pending_job['lot_no']} (L{pending_job['level']}B{pending_job['block']})")
            else:
                skipped_count += 1
                print(f"‚ö†Ô∏è Skipped duplicate job: {pending_job['jobId']} - {pending_job['lot_no']} (L{pending_job['level']}B{pending_job['block']})")
        
        # Broadcast ‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket clients
        if loaded_count > 0:
            for job in pending_jobs[-loaded_count:]:  # ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á
                if not any(
                    existing_job["lot_no"] == job["lot_no"] and
                    existing_job["level"] == job["level"] and
                    existing_job["block"] == job["block"]
                    for existing_job in DB["jobs"][:-loaded_count]  # ‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                ):
                    await manager.broadcast(json.dumps({
                        "type": "new_job", 
                        "payload": job
                    }))
        
        return {
            "status": "success",
            "message": f"Successfully loaded {loaded_count} pending jobs into queue",
            "loaded_count": loaded_count,
            "skipped_count": skipped_count,
            "total_pending": len(pending_jobs),
            "total_queue_size": len(DB["jobs"])
        }
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "error": "Failed to load pending jobs",
                "status": "server_error",
                "message": str(e)
            }
        )

@router.post("/api/shelf/layout", tags=["Shelf Layout Management"])
async def manage_shelf_layout(layout_request: LayoutRequest):
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ layout ‡∏Ç‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gateway ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï local database
    
    Parameters:
    - shelf_id: ‡∏£‡∏´‡∏±‡∏™‡∏ä‡∏±‡πâ‡∏ô‡∏ß‡∏≤‡∏á (‡πÄ‡∏ä‡πà‡∏ô "PC2")
    - update_flg: "0" = ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, "1" = ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    - slots: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• layout (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ update_flg = "1")
    
    Returns:
    - Layout configuration ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• capacity ‡πÅ‡∏•‡∏∞ active status
    """
    try:
        shelf_id = layout_request.shelf_id
        update_mode = layout_request.update_flg
        slots_data = layout_request.slots
        
        print(f"üìã Layout Management: ID={shelf_id}, Mode={update_mode}")
        
        if update_mode == "0":
            # Read mode - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gateway
            print(f"üìñ Reading layout from Gateway...")
            
            layout_data = await fetch_layout_from_gateway(shelf_id)
            
            if layout_data and layout_data.get("status") == "success":
                gateway_layout = layout_data.get("layout", {})
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï local database configuration
                from core.database import update_layout_from_gateway
                update_success = update_layout_from_gateway(gateway_layout)
                
                if update_success:
                    print(f"‚úÖ Local database updated with Gateway layout")
                    
                    # Broadcast layout update to WebSocket clients  
                    try:
                        await manager.broadcast(json.dumps({
                            "type": "layout_updated",
                            "payload": {
                                "shelf_id": shelf_id,
                                "layout": gateway_layout,
                                "source": "gateway_fetch"
                            }
                        }))
                        print(f"üì° Broadcasted layout update to WebSocket clients")
                    except Exception as broadcast_error:
                        print(f"‚ö†Ô∏è WebSocket broadcast failed: {broadcast_error}")
                
                return {
                    "status": "success",
                    "shelf_id": shelf_id,
                    "update_flg": "0",
                    "layout": gateway_layout,
                    "local_update": update_success,
                    "message": f"Layout fetched from Gateway for shelf {shelf_id}"
                }
            else:
                return JSONResponse(
                    status_code=502,
                    content={
                        "status": "error",
                        "shelf_id": shelf_id,
                        "message": "Failed to fetch layout from Gateway",
                        "gateway_response": layout_data
                    }
                )
        
        elif update_mode == "1":
            # Write mode - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Gateway (Future feature)
            print(f"üíæ Writing layout to Gateway...")
            
            sync_success = await sync_layout_to_gateway(slots_data, shelf_id)
            
            return {
                "status": "success" if sync_success else "error",
                "shelf_id": shelf_id,
                "update_flg": "1",
                "slots": slots_data,
                "gateway_sync": sync_success,
                "message": "Layout synced to Gateway" if sync_success else "Gateway sync failed"
            }
        
        else:
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error",
                    "message": "Invalid update_flg. Use '0' for read or '1' for write"
                }
            )
            
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "message": str(e)
            }
        )

@router.get("/ShelfName", tags=["Shelf Operations"])
async def get_shelf_info_endpoint():
    """
    Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• shelf name ‡∏à‡∏≤‡∏Å Gateway API
    ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô global variable
    """
    try:
        local_ip = get_actual_local_ip()
        print(f"üåê Local IP: {local_ip}")
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gateway API
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                'http://43.72.20.238:8000/IoTManagement/shelf/requestID',
                headers={
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                json={
                    "shelf_ip": local_ip  # ‡πÉ‡∏ä‡πâ local IP ‡∏à‡∏£‡∏¥‡∏á
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Gateway Response: {data}")
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô global variable
                GLOBAL_SHELF_INFO["shelf_id"] = data.get("shelf_id")
                GLOBAL_SHELF_INFO["shelf_name"] = data.get("shelf_name")
                GLOBAL_SHELF_INFO["local_ip"] = local_ip
                
                print(f"üíæ Stored global shelf info: {GLOBAL_SHELF_INFO}")
                
                return {
                    "success": True,
                    "shelf_id": data.get("shelf_id"),
                    "shelf_name": data.get("shelf_name"),
                    "local_ip": local_ip
                }
            else:
                print(f"‚ùå Gateway Error: {response.status_code}")
                # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ fallback ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô global
                return {
                    "success": False,
                    "error": f"Gateway returned {response.status_code}",
                    "shelf_id": "UNKNOWN",
                    "shelf_name": "Shelf",
                    "local_ip": local_ip
                }
                
    except Exception as e:
        print(f"Error calling Gateway: {e}")
        return {
            "success": False,
            "error": str(e),
            "shelf_id": "ERROR",  
            "shelf_name": "Shelf",
            "local_ip": "unknown"
        }

# === Shelf State Management Functions ===

async def sync_shelf_state_to_gateway(shelf_state_data):
    """
    ‡∏™‡πà‡∏á shelf_state ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gateway ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    """
    try:
        shelf_id = GLOBAL_SHELF_INFO.get("shelf_id", "UNKNOWN")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gateway
        shelf_state_array = []
        if isinstance(shelf_state_data, dict):
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å dict ‡πÄ‡∏õ‡πá‡∏ô array
            for position_key, position_data in shelf_state_data.items():
                shelf_state_array.append({
                    "level": position_data["level"],
                    "block": position_data["block"], 
                    "lots": position_data["lots"]
                })
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô array ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            shelf_state_array = shelf_state_data
        
        gateway_payload = {
            "shelf_id": shelf_id,
            "update_flg": "1",  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å update ‡πÄ‡∏õ‡πá‡∏ô update_flg
            "shelf_state": shelf_state_array
        }
        
        headers = {
            "Accept": "application/json", 
            "Content-Type": "application/json"
        }
        
        print(f"üîÑ Syncing shelf state to Gateway: {GATEWAY_BASE_URL}/IoTManagement/shelf/shelfItem")
        print(f"üì¶ Payload: {gateway_payload}")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{GATEWAY_BASE_URL}/IoTManagement/shelf/shelfItem",
                json=gateway_payload,
                headers=headers
            )
            
            print(f"üì° Gateway Response Status: {response.status_code}")
            
            if response.status_code == 200:
                print(f"‚úÖ Shelf state synced successfully")
                return True
            else:
                print(f"‚ö†Ô∏è Gateway sync failed: {response.status_code} - {response.text}")
                return False
                
    except Exception as e:
        print(f"‚ö†Ô∏è Shelf state sync error: {e}")
        return False

async def restore_shelf_state_from_gateway():
    """
    ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô shelf_state ‡∏à‡∏≤‡∏Å Gateway ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    """
    try:
        shelf_id = GLOBAL_SHELF_INFO.get("shelf_id")
        
        if not shelf_id:
            print(f"‚ö†Ô∏è No shelf_id available for state restore")
            return None
            
        gateway_payload = {
            "shelf_id": shelf_id,
            "update_flg": "0",  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å update ‡πÄ‡∏õ‡πá‡∏ô update_flg
            "shelf_state": []  # empty array for read
        }
        
        headers = {
            "Accept": "application/json", 
            "Content-Type": "application/json"
        }
        
        print(f"üîÑ Restoring shelf state from Gateway: {GATEWAY_BASE_URL}/IoTManagement/shelf/shelfItem")
        print(f"üì¶ Read Payload: {gateway_payload}")
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{GATEWAY_BASE_URL}/IoTManagement/shelf/shelfItem",
                json=gateway_payload,
                headers=headers
            )
            
            print(f"üì° Gateway Response Status: {response.status_code}")
            
            if response.status_code == 200:
                response_data = response.json()
                print(f"‚úÖ Shelf state restored successfully")
                print(f"üì¶ Restored state: {response_data}")
                
        
                shelf_state = response_data.get("data", [])
                
                return shelf_state
            else:
                print(f"‚ö†Ô∏è Gateway restore failed: {response.status_code} - {response.text}")
                return None
                
    except Exception as e:
        print(f"‚ö†Ô∏è Shelf state restore error: {e}")
        return None

@router.post("/api/shelf/shelfItem", tags=["Shelf State Management"])
async def manage_shelf_state(shelf_state_request: ShelfState):
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ shelf state - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô (update_flg="0") ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô (update_flg="1")
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gateway API ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    
    Example Values:
    - shelf_id: "PC2"
    - update_flg: "0" (read) or "1" (write)
    - shelf_state: Array of BlockState objects with lots data
    """
    try:
        shelf_id = shelf_state_request.shelf_id
        update_mode = shelf_state_request.update_flg  
        shelf_state_data = shelf_state_request.shelf_state
        
        print(f"üìã Shelf State Management: ID={shelf_id}, Mode={update_mode}")
        
        # Validate required fields
        if not shelf_id:
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error",
                    "message": "shelf_id is required"
                }
            )
        
        if update_mode not in ["0", "1"]:
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error", 
                    "message": "update_flg must be '0' (read) or '1' (write)"
                }
            )
        
        if update_mode == "0":
            # Read mode - ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å Gateway
            print(f"üìñ Reading shelf state from Gateway...")
            
            restored_state = await restore_shelf_state_from_gateway()
            
            if restored_state is not None and len(restored_state) > 0:
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï local database ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Gateway array format ‡πÄ‡∏õ‡πá‡∏ô local DB format
                DB["shelf_state"] = []
                for level, num_blocks in SHELF_CONFIG.items():
                    for block in range(1, num_blocks + 1):
                        DB["shelf_state"].append([level, block, []])
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Gateway
                for cell_data in restored_state:
                    level = cell_data.get("level")
                    block = cell_data.get("block") 
                    lots = cell_data.get("lots", [])
                    
                    # ‡∏´‡∏≤ cell ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô DB
                    for i, (l, b, existing_lots) in enumerate(DB["shelf_state"]):
                        if l == level and b == block:
                            DB["shelf_state"][i] = [level, block, lots]
                            break
                
                print(f"‚úÖ Local DB updated with restored state")
                
                # Broadcast restored state to WebSocket clients
                try:
                    websocket_shelf_state = []
                    for cell in DB["shelf_state"]:
                        level, block, lots = cell
                        websocket_shelf_state.append({"level": level, "block": block, "lots": lots})
                    
                    await manager.broadcast(json.dumps({
                        "type": "shelf_state_restored",
                        "payload": {
                            "shelf_state": websocket_shelf_state,
                            "shelf_id": shelf_id,
                            "source": "gateway_restore"
                        }
                    }))
                    print(f"üì° Broadcasted restored shelf state to WebSocket clients")
                except Exception as broadcast_error:
                    print(f"‚ö†Ô∏è WebSocket broadcast failed: {broadcast_error}")
                
                return {
                    "status": "success", 
                    "shelf_id": shelf_id,
                    "update_flg": "0",
                    "shelf_state": restored_state,
                    "message": "Shelf state restored from Gateway"
                }
            else:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Gateway ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á current state ‡∏Å‡∏•‡∏±‡∏ö
                current_state = []
                for cell in DB["shelf_state"]:
                    level, block, lots = cell
                    if lots:  # ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ cell ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á
                        current_state.append({
                            "level": level,
                            "block": block,
                            "lots": lots
                        })
                
                return {
                    "status": "success",
                    "shelf_id": shelf_id, 
                    "update_flg": "0",
                    "shelf_state": current_state,
                    "message": "No data in Gateway, using current local state"
                }
        
        elif update_mode == "1":
            # Write mode - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏õ Gateway
            print(f"üíæ Writing shelf state to Gateway...")
            
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï local database ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            if shelf_state_data and len(shelf_state_data) > 0:
                # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï shelf_state
                DB["shelf_state"] = []
                for level, num_blocks in SHELF_CONFIG.items():
                    for block in range(1, num_blocks + 1):
                        DB["shelf_state"].append([level, block, []])
                
                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏õ‡∏•‡∏á Pydantic models ‡πÄ‡∏õ‡πá‡∏ô dict)
                for cell_data in shelf_state_data:
                    # ‡πÅ‡∏õ‡∏•‡∏á BlockState object ‡πÄ‡∏õ‡πá‡∏ô dict
                    if hasattr(cell_data, 'dict'):
                        cell_dict = cell_data.dict()
                    else:
                        cell_dict = cell_data
                        
                    level = cell_dict.get("level")
                    block = cell_dict.get("block")
                    lots = cell_dict.get("lots", [])
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á LotData objects ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                    lots_dict = []
                    for lot in lots:
                        if hasattr(lot, 'dict'):
                            lots_dict.append(lot.dict())
                        else:
                            lots_dict.append(lot)
                    
                    # ‡∏´‡∏≤ cell ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô DB
                    for i, (l, b, existing_lots) in enumerate(DB["shelf_state"]):
                        if l == level and b == block:
                            DB["shelf_state"][i] = [level, block, lots_dict]
                            break
                
                print(f"‚úÖ Local DB updated with new state")
            
            # ‡∏™‡πà‡∏á‡πÑ‡∏õ Gateway (‡πÅ‡∏õ‡∏•‡∏á Pydantic models ‡πÄ‡∏õ‡πá‡∏ô dict format)
            shelf_state_dict = []
            for block_state in shelf_state_data:
                if hasattr(block_state, 'dict'):
                    shelf_state_dict.append(block_state.dict())
                else:
                    shelf_state_dict.append(block_state)
            
            sync_success = await sync_shelf_state_to_gateway(shelf_state_dict)
            
            # Broadcast shelf state update to WebSocket clients
            if sync_success:
                try:
                    # ‡πÅ‡∏õ‡∏•‡∏á shelf_state ‡πÄ‡∏õ‡πá‡∏ô format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WebSocket
                    websocket_shelf_state = []
                    for cell in DB["shelf_state"]:
                        level, block, lots = cell
                        websocket_shelf_state.append({"level": level, "block": block, "lots": lots})
                    
                    await manager.broadcast(json.dumps({
                        "type": "shelf_state_updated",
                        "payload": {
                            "shelf_state": websocket_shelf_state,
                            "shelf_id": shelf_id,
                            "source": "gateway_sync"
                        }
                    }))
                    print(f"üì° Broadcasted shelf state update to WebSocket clients")
                except Exception as broadcast_error:
                    print(f"‚ö†Ô∏è WebSocket broadcast failed: {broadcast_error}")
            
            return {
                "status": "success" if sync_success else "error",
                "shelf_id": shelf_id,
                "update_flg": "1", 
                "shelf_state": shelf_state_dict,
                "gateway_sync": sync_success,
                "message": "Shelf state updated and synced" if sync_success else "Gateway sync failed"
            }
            
        else:
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error",
                    "message": "Invalid update_flg. Use '0' for read or '1' for write"
                }
            )
            
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "status": "error", 
                "message": str(e)
            }
        )

# === Debug Endpoints ===
@router.get("/api/debug/position/{level}/{block}", tags=["Debug"])
async def debug_position_validation(level: int, block: int):
    """Debug position validation - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    try:
        from core.database import debug_position_validation, SHELF_CONFIG, DYNAMIC_LAYOUT
        
        # Run debug validation
        is_valid = debug_position_validation(level, block)
        
        return {
            "position": f"L{level}B{block}",
            "valid": is_valid,
            "shelf_config": SHELF_CONFIG,
            "has_gateway_layout": bool(DYNAMIC_LAYOUT),
            "gateway_positions": list(DYNAMIC_LAYOUT.keys()) if DYNAMIC_LAYOUT else []
        }
    except Exception as e:
        return JSONResponse(status_code=500, content={
            "error": "Debug validation failed",
            "detail": str(e)
        })
