# core/led_controller.py

from core.database import get_shelf_config

def get_num_pixels():
    """Get current number of pixels based on dynamic shelf config"""
    shelf_config = get_shelf_config()
    return sum(shelf_config.values())

# NUM_PIXELS ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô refresh_led_config()
NUM_PIXELS = 24  # Fallback initial value

def idx(level, block):
    """
    ‡πÅ‡∏õ‡∏•‡∏á (level, block) ‡πÄ‡∏õ‡πá‡∏ô index ‡∏Ç‡∏≠‡∏á LED
    level: 1..N (1 ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏±‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î)
    
    Returns:
        int: LED index, ‡∏´‡∏£‡∏∑‡∏≠ -1 ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    """
    try:
        shelf_config = get_shelf_config()
        print(f"üîç idx({level}, {block}) - shelf_config: {shelf_config}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö level ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if level not in shelf_config:
            print(f"‚ùå Invalid level {level}. Available levels: {list(shelf_config.keys())}")
            return -1
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö block ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if not (1 <= block <= shelf_config[level]):
            print(f"‚ùå Invalid block {block} for level {level}. Max blocks: {shelf_config[level]}")
            return -1
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì LED index ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô 1
        # ‡∏ä‡∏±‡πâ‡∏ô 1 = index 0-7, ‡∏ä‡∏±‡πâ‡∏ô 2 = index 8-13, ‡∏Ø‡∏•‡∏Ø
        calculated_idx = 0
        
        # ‡∏£‡∏ß‡∏° blocks ‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏ñ‡∏∂‡∏á‡∏ä‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        for l in range(1, level):
            if l in shelf_config:
                calculated_idx += shelf_config[l]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° block offset ‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (block ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1)
        calculated_idx += (block - 1)
        
        total_pixels = sum(shelf_config.values())
        
        print(f"üîç Calculation: level_offset={calculated_idx-(block-1)}, block_offset={block-1}, final_idx={calculated_idx}, total={total_pixels}")
        
        # üîç Debug: ‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á L1B1 ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        if level == 1 and block == 1:
            print(f"üö® CRITICAL: L1B1 maps to LED index {calculated_idx} (should be 0 normally)")
        elif level == 1 and block == 2:
            print(f"üîç DEBUG: L1B2 maps to LED index {calculated_idx}")
        elif level == 1 and block == 3:
            print(f"üîç DEBUG: L1B3 maps to LED index {calculated_idx}")
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bounds
        if calculated_idx < 0 or calculated_idx >= total_pixels:
            print(f"‚ùå LED index {calculated_idx} out of bounds (0-{total_pixels-1})")
            return -1
            
        print(f"‚úÖ L{level}B{block} -> LED index {calculated_idx}")
        return calculated_idx
        
    except Exception as e:
        print(f"‚ùå Error calculating LED index for L{level}B{block}: {e}")
        return -1


def init_led_state():
    """Initialize LED state based on current shelf config"""
    return [(0, 0, 0)] * get_num_pixels()

# _led_state ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô refresh_led_config()
_led_state = [(0, 0, 0)] * 24  # Fallback initial value

# Lazy initialization - ‡∏à‡∏∞ refresh ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
_initialized = False

def ensure_led_initialized():
    """Ensure LED system is initialized with correct configuration"""
    global _initialized
    if not _initialized:
        try:
            refresh_led_config()
            _initialized = True
            print("üí° LED Controller lazy-initialized with correct configuration")
        except Exception as e:
            print(f"‚ö†Ô∏è LED Controller initialization warning: {e}")

def refresh_led_config():
    """Refresh LED configuration when shelf config changes"""
    global _led_state, NUM_PIXELS, neo
    old_pixels = NUM_PIXELS
    NUM_PIXELS = get_num_pixels()
    _led_state = init_led_state()
    
    print(f"üí° LED Config Refreshed: {old_pixels} -> {NUM_PIXELS} pixels")
    print(f"üí° New _led_state size: {len(_led_state)}")
    
    # Reinitialize hardware if available
    if 'pi5neo' in globals():
        try:
            import time
            neo = pi5neo.Pi5Neo('/dev/spidev0.0', NUM_PIXELS, 800)
            # Clear ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á init
            neo.fill_strip(0, 0, 0)
            neo.update_strip()
            time.sleep(0.02)
            print(f"üí° Hardware LED strip reinitialized with {NUM_PIXELS} pixels")
        except Exception as e:
            print(f"‚ö†Ô∏è Hardware LED reinit failed: {e}")

try:
    import pi5neo
    import time
    
    neo = pi5neo.Pi5Neo('/dev/spidev0.0', NUM_PIXELS, 800)

    def set_led(level, block, r, g, b):
        try:
            ensure_led_initialized()
            i = idx(level, block)
            if i == -1:
                return {"ok": False, "error": f"Invalid position L{level}B{block}"}
                
            # üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            if g > 0:
                print(f"‚ö†Ô∏è WARNING: Green detected! L{level}B{block} -> RGB({r},{g},{b})")
            
            global _led_state
            current_pixels = get_num_pixels()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ refresh _led_state ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if len(_led_state) != current_pixels:
                print(f"üí° Refreshing LED state: {len(_led_state)} -> {current_pixels} pixels")
                _led_state = [(0, 0, 0)] * current_pixels
            
            _led_state = list(_led_state)
            
            # Double-check bounds
            if i >= len(_led_state):
                return {"ok": False, "error": f"LED index {i} >= array length {len(_led_state)}"}
                
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï state
            _led_state[i] = (r, g, b)
            
            # Set ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ LED ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà clear ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            neo.set_led_color(i, r, g, b)
            neo.update_strip()
            time.sleep(0.02)
            
            return {"ok": True, "index": i, "position": f"L{level}B{block}"}
            
        except Exception as e:
            return {"ok": False, "error": f"LED control failed: {str(e)}"}

    def set_led_batch(leds):
        try:
            global _led_state
            current_pixels = get_num_pixels()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ refresh _led_state ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if len(_led_state) != current_pixels:
                print(f"üí° Refreshing LED state for batch: {len(_led_state)} -> {current_pixels} pixels")
                _led_state = [(0, 0, 0)] * current_pixels
            
            _led_state = list(_led_state)
            processed = 0
            errors = []
            
            # Clear strip ‡∏Å‡πà‡∏≠‡∏ô
            neo.fill_strip(0, 0, 0)
            neo.update_strip()
            time.sleep(0.02)
            
            for led in leds:
                level = int(led.get('level', 0))
                block = int(led.get('block', 0))
                r = int(led.get('r', 0))
                g = int(led.get('g', 0))
                b = int(led.get('b', 0))
                
                # üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
                if g > 0:
                    print(f"‚ö†Ô∏è WARNING: Green in batch! L{level}B{block} -> RGB({r},{g},{b})")
                
                i = idx(level, block)
                if i == -1:
                    errors.append(f"L{level}B{block}: Invalid position")
                    continue
                    
                if i >= len(_led_state):
                    errors.append(f"L{level}B{block}: Index {i} out of bounds")
                    continue
                    
                _led_state[i] = (r, g, b)
                neo.set_led_color(i, r, g, b)  # Set ‡πÅ‡∏ï‡πà‡∏•‡∏∞ LED ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                processed += 1
            
            # Update hardware ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            neo.update_strip()
            time.sleep(0.02)
            
            result = {"ok": True, "count": processed, "total_requested": len(leds)}
            if errors:
                result["errors"] = errors
            return result
            
        except Exception as e:
            return {"ok": False, "error": f"LED batch failed: {str(e)}"}

except ImportError:
    def set_led(level, block, r, g, b):
        try:
            ensure_led_initialized()
            i = idx(level, block)
            if i == -1:
                return {"ok": False, "error": f"Invalid position L{level}B{block}", "mock": True}
                
            # üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
            if g > 0:
                print(f"‚ö†Ô∏è WARNING: Green detected! L{level}B{block} -> RGB({r},{g},{b})")
                
            global _led_state
            current_pixels = get_num_pixels()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ refresh _led_state ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if len(_led_state) != current_pixels:
                print(f"üí° Refreshing LED state: {len(_led_state)} -> {current_pixels} pixels")
                _led_state = [(0, 0, 0)] * current_pixels
            
            _led_state = list(_led_state)
            
            # Double-check bounds
            if i >= len(_led_state):
                return {"ok": False, "error": f"LED index {i} >= array length {len(_led_state)}", "mock": True}
                
            _led_state[i] = (r, g, b)
            position_str = f"L{level}B{block}"
            
            # üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (Mock)
            if g > 0:
                print(f"‚ö†Ô∏è WARNING: Green detected in mock! L{level}B{block} -> RGB({r},{g},{b})")
            
            print(f"[MOCK] ‚úÖ LED {position_str} -> index {i}, color=({r},{g},{b}), state_size={len(_led_state)}")
            result = {"ok": True, "index": i, "position": position_str, "mock": True}
            return result
            
        except Exception as e:
            return {"ok": False, "error": f"LED control failed: {str(e)}", "mock": True}

    def set_led_batch(leds):
        try:
            global _led_state
            current_pixels = get_num_pixels()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ refresh _led_state ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if len(_led_state) != current_pixels:
                print(f"üí° Refreshing LED state for batch: {len(_led_state)} -> {current_pixels} pixels")
                _led_state = [(0, 0, 0)] * current_pixels
            
            _led_state = list(_led_state)
            processed = 0
            errors = []
            
            for led in leds:
                level = int(led.get('level', 0))
                block = int(led.get('block', 0))
                r = int(led.get('r', 0))
                g = int(led.get('g', 0))
                b = int(led.get('b', 0))
                
                # üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ (Mock)
                if g > 0:
                    print(f"‚ö†Ô∏è WARNING: Green in mock batch! L{level}B{block} -> RGB({r},{g},{b})")
                
                i = idx(level, block)
                if i == -1:
                    errors.append(f"L{level}B{block}: Invalid position")
                    continue
                    
                if i >= len(_led_state):
                    errors.append(f"L{level}B{block}: Index {i} out of bounds")
                    continue
                    
                _led_state[i] = (r, g, b)
                processed += 1
            
            print(f"[MOCK] Would batch set LEDs: {processed}/{len(leds)} successful")
            if errors:
                print(f"[MOCK] Batch errors: {errors}")
            
            result = {"ok": True, "count": processed, "total_requested": len(leds), "mock": True}
            if errors:
                result["errors"] = errors
            return result
            
        except Exception as e:
            return {"ok": False, "error": f"LED batch failed: {str(e)}", "mock": True}

def clear_all_leds():
    """Clear all LEDs and reset state"""
    global _led_state
    current_pixels = get_num_pixels()
    _led_state = [(0, 0, 0)] * current_pixels
    
    if 'neo' in globals() and neo:
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà work ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        neo.fill_strip(0, 0, 0)
        neo.update_strip()
        time.sleep(0.02)  # ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
        print(f"üí° Hardware LEDs cleared ({current_pixels} pixels)")
    else:
        print(f"[MOCK] Would clear all LEDs ({current_pixels} pixels)")
    
    return {"ok": True, "pixels_cleared": current_pixels}
