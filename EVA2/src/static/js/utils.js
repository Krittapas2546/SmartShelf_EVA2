/**
 * utils.js - Pure Helper Functions
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö DOM ‡∏´‡∏£‡∏∑‡∏≠ I/O operations
 */

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LOT number ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: Alphanumeric 12 ‡∏ï‡∏±‡∏ß (xxxxxxxxx.xx)
 * - 9 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç + ‡∏à‡∏∏‡∏î + 2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
 * - ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ABC123DEF.01, Y540C02AS.01, 123456789.99
 * @param {string} lotNo - ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç LOT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
 * @returns {boolean} - true ‡∏ñ‡πâ‡∏≤‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
function isValidLotNumberFormat(lotNo) {
    if (!lotNo || typeof lotNo !== 'string') {
        return false;
    }
    
    const trimmedLot = lotNo.trim();
    
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å: Alphanumeric 12 ‡∏ï‡∏±‡∏ß (xxxxxxxxx.xx)
    // 9 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç + ‡∏à‡∏∏‡∏î + 2 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ABC123DEF.01, Y540C02AS.01, 123456789.99
    const mainPattern = /^[A-Za-z0-9]{9}\.\d{2}$/;
    
    console.log(`üîç Validating LOT format: "${trimmedLot}" against pattern: ${mainPattern}`);
    const isValid = mainPattern.test(trimmedLot);
    console.log(`‚úÖ LOT validation result: ${isValid} (Expected format: xxxxxxxxx.xx)`);
    
    return isValid;
}

/**
 * ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
 * ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: L1-B2, 1-2, L1B2, 1,2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
 * @param {string} barcode - ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @returns {Object|null} - {level, block} ‡∏´‡∏£‡∏∑‡∏≠ null ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
 */
function parseLocationFromBarcode(barcode) {
    // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
    const cleaned = barcode.replace(/\s+/g, '').toUpperCase();
    
    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
    const patterns = [
        /^L(\d+)-?B(\d+)$/,  // L1-B2 ‡∏´‡∏£‡∏∑‡∏≠ L1B2
        /^(\d+)-(\d+)$/,     // 1-2
        /^(\d+),(\d+)$/,     // 1,2
        /^(\d+)_(\d+)$/,     // 1_2
        /^L(\d+)B(\d+)$/     // L1B2
    ];

    for (const pattern of patterns) {
        const match = cleaned.match(pattern);
        if (match) {
            return {
                level: parseInt(match[1], 10),
                block: parseInt(match[2], 10)
            };
        }
    }

    return null;
}

// Export functions for module usage
if (typeof window !== 'undefined') {
    // Browser environment
    window.ShelfUtils = {
        isValidLotNumberFormat,
        parseLocationFromBarcode
    };
}

// For CommonJS/Node.js environments
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        isValidLotNumberFormat,
        parseLocationFromBarcode
    };
}