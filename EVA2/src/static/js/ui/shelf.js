

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á shelf grid
 */
function createShelfGridStructure() {
    const shelfGrid = document.getElementById('shelfGrid');
    if (!shelfGrid) return;

    const config = ShelfState.getShelfConfig();
    const totalLevels = ShelfState.getTotalLevels();
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå grid ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏° config ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    shelfGrid.innerHTML = '';
    
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î shelf-frame ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î
    let shelfFrameWidth, shelfFrameHeight, cellHeight;
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏´‡∏°‡∏î full-shelf ‡πÅ‡∏•‡∏∞ active job
    shelfFrameWidth = 500;
    shelfFrameHeight = 475;
    cellHeight = 90;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid container ‡∏´‡∏•‡∏±‡∏Å
    shelfGrid.style.display = 'flex';
    shelfGrid.style.flexDirection = 'column';
    shelfGrid.style.gap = '14px'; // ‡∏•‡∏î gap ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á 475px
    shelfGrid.style.padding = '10px'; // ‡∏•‡∏î padding ‡∏à‡∏≤‡∏Å 12px ‡πÄ‡∏õ‡πá‡∏ô 10px
    shelfGrid.style.background = '#f8f9fa';
    shelfGrid.style.border = '1px solid #dee2e6';
    shelfGrid.style.width = '100%';
    shelfGrid.style.height = '100%';
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö shelf-frame ‡∏ï‡∏≤‡∏°‡πÇ‡∏´‡∏°‡∏î
    const shelfFrameBorder = 16; // border ‡∏£‡∏ß‡∏° (8px √ó 2) 
    const shelfPadding = 20; // padding ‡∏£‡∏ß‡∏° (10px √ó 2)
    const availableWidth = shelfFrameWidth - shelfFrameBorder - shelfPadding;
    const gapSize = 4; // gap ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á cells
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Level ‡πÄ‡∏õ‡πá‡∏ô flexbox ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ä‡∏±‡πâ‡∏ô‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏±‡πâ‡∏ô 1 ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á)
    for (let level = totalLevels; level >= 1; level--) {
        const blocksInThisLevel = config[level];
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ level
        const levelContainer = document.createElement('div');
        levelContainer.className = 'shelf-level';
        levelContainer.style.display = 'flex';
        levelContainer.style.gap = `${gapSize}px`;
        levelContainer.style.height = `${cellHeight}px`;
        levelContainer.style.width = '100%';
        levelContainer.style.justifyContent = 'stretch'; // ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á cells ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö level ‡∏ô‡∏µ‡πâ
        for (let block = 1; block <= blocksInThisLevel; block++) {
            const cell = document.createElement('div');
            cell.className = 'shelf-cell';
            cell.id = `cell-${level}-${block}`;
            cell.dataset.level = level;
            cell.dataset.block = block;
            
            // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î cell ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
            const totalGaps = (blocksInThisLevel - 1) * gapSize;
            const cellWidth = (availableWidth - totalGaps) / blocksInThisLevel;
            
            cell.style.flex = `0 0 ${cellWidth}px`;
            cell.style.height = '100%';
            cell.style.border = '2px solid #dee2e6';
            cell.style.borderRadius = '8px';
            cell.style.background = 'linear-gradient(135deg, #ffffff, #f8f9fa)';
            cell.style.display = 'flex';
            cell.style.flexDirection = 'column';
            cell.style.alignItems = 'center';
            cell.style.justifyContent = 'flex-end'; // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á (LIFO)
            cell.style.padding = '4px';
            cell.style.fontSize = '11px';
            cell.style.fontWeight = 'bold';
            cell.style.color = '#495057';
            cell.style.position = 'relative';
            cell.style.overflow = 'hidden';
            
            levelContainer.appendChild(cell);
        }
        
        shelfGrid.appendChild(levelContainer);
    }
    
    console.log(`üìê Created flexible shelf grid: ${totalLevels} levels with configuration:`, config);
    console.log(`üìè Shelf frame: ${shelfFrameWidth}√ó${shelfFrameHeight}px | Available width: ${availableWidth}px | Cell height: ${cellHeight}px | Gap: ${gapSize}px`);
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (Cell Preview)
 */
function renderCellPreview({ level, block, lots, targetLotNo, isPlaceJob = false, newLotTrayCount = 0 }) {
    const container = document.getElementById('cellPreviewContainer');
    if (!container) return;

    // lots: array of {lot_no, tray_count}
    if (!Array.isArray(lots)) lots = [];

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Place job ‡πÉ‡∏´‡πâ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    let previewLots = [...lots];
    if (isPlaceJob && targetLotNo && newLotTrayCount > 0) {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° lot ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏á‡∏•‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (LIFO)
        previewLots.push({
            lot_no: targetLotNo,
            tray_count: newLotTrayCount
        });
    }

    let html = '';
    html += `<h3>Level ${level} Block ${block}</h3>`;
    
    html += `<div class="block-preview">`;

    if (previewLots.length > 0) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ lot ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á (‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô)
        for (let i = previewLots.length - 1; i >= 0; i--) {
            const lot = previewLots[i];
            const isNewLot = isPlaceJob && lot.lot_no === targetLotNo;
            
            html += `<div class="lot-item ${isNewLot ? 'new-lot' : ''}">`;
            html += `<span class="lot-name">${lot.lot_no}</span>`;
            html += `<span class="lot-tray-count">${lot.tray_count} trays</span>`;
            html += `</div>`;
        }
    } else {
        html += `<div class="lot-item empty-slot">`;
        html += `<span class="lot-name">(empty)</span>`;
        html += `</div>`;
    }

    html += `</div>`;
    container.innerHTML = html;
}

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• shelf grid ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• lots
 */
function renderShelfGrid() {
    // Expect shelfState as array of {level, block, lots}
    const shelfState = ShelfState.getShelfState();
    const activeJob = ShelfState.getActiveJob();
    
    console.log(`üîÑ renderShelfGrid called with activeJob:`, activeJob);
    if (activeJob) {
        console.log(`üéØ Active job: L${activeJob.level}B${activeJob.block} - ${activeJob.lot_no} (${activeJob.place_flg === '1' ? 'Place' : 'Pick'})`);
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á error (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    let wrongLevel = null, wrongBlock = null;
    if (activeJob && activeJob.error && activeJob.errorType === 'WRONG_LOCATION' && activeJob.errorMessage) {
        const match = activeJob.errorMessage.match(/L(\d+)B(\d+)/);
        if (match) {
            wrongLevel = parseInt(match[1], 10);
            wrongBlock = parseInt(match[2], 10);
        }
    }

    // Clear all cells first
    const totalLevels = ShelfState.getTotalLevels();
    const config = ShelfState.getShelfConfig();
    for (let level = 1; level <= totalLevels; level++) {
        const blocksInLevel = config[level] || 0;
        for (let block = 1; block <= blocksInLevel; block++) {
            const cell = document.getElementById(`cell-${level}-${block}`);
            if (cell) {
                cell.innerHTML = '';
                cell.className = 'shelf-cell'; // Reset classes
            }
        }
    }

    // Render stacked lots in each cell (bottom-to-top: index 0 = bottom)
    const loggedCells = ShelfState.hasLoggedCell;
    if (Array.isArray(shelfState)) {
        shelfState.forEach(cellData => {
            let cellLevel, cellBlock, cellLots;
            
            if (Array.isArray(cellData)) {
                // ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤: [level, block, lots]
                [cellLevel, cellBlock, cellLots] = cellData;
            } else {
                // ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà: {level, block, lots}
                cellLevel = cellData.level;
                cellBlock = cellData.block;
                cellLots = cellData.lots;
            }
            
            const cell = document.getElementById(`cell-${cellLevel}-${cellBlock}`);
            if (!cell) return;

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° label L{level}B{block}
            const labelDiv = document.createElement('div');
            labelDiv.textContent = `L${cellLevel}B${cellBlock}`;
            labelDiv.style.cssText = `
                position: absolute;
                top: 2px;
                left: 4px;
                font-size: 8px;
                font-weight: bold;
                color: #6c757d;
                z-index: 1;
            `;
            cell.appendChild(labelDiv);

            // ‡πÅ‡∏™‡∏î‡∏á lots (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if (Array.isArray(cellLots) && cellLots.length > 0) {
                // Log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ lots
                const cellKey = `${cellLevel}-${cellBlock}`;
                if (!loggedCells(cellKey)) {
                    console.log(`üì¶ Cell L${cellLevel}B${cellBlock} has ${cellLots.length} lots:`, cellLots);
                    ShelfState.addLoggedCell(cellKey);
                }

                // ‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lots
                const lotsContainer = document.createElement('div');
                lotsContainer.style.cssText = `
                    display: flex;
                    flex-direction: column-reverse;
                    align-items: center;
                    justify-content: flex-end;
                    height: calc(100% - 16px);
                    width: 100%;
                    gap: 1px;
                    margin-top: 12px;
                `;

                // ‡πÅ‡∏™‡∏î‡∏á lots (‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô: index 0 = ‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î)
                cellLots.forEach((lot, index) => {
                    const lotDiv = document.createElement('div');
                    lotDiv.style.cssText = `
                        background: linear-gradient(135deg, #007bff, #0056b3);
                        color: white;
                        padding: 2px 4px;
                        border-radius: 3px;
                        font-size: 9px;
                        font-weight: bold;
                        text-align: center;
                        white-space: nowrap;
                        overflow: hidden;
                        text-overflow: ellipsis;
                        width: calc(100% - 8px);
                        min-height: 16px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        box-shadow: 0 1px 3px rgba(0,0,0,0.2);
                        border: 1px solid rgba(255,255,255,0.3);
                    `;
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• lot
                    const lotText = lot.lot_no || lot;
                    const trayCount = lot.tray_count || '';
                    lotDiv.textContent = trayCount ? `${lotText} (${trayCount})` : lotText;
                    
                    lotsContainer.appendChild(lotDiv);
                });

                cell.appendChild(lotsContainer);
            }
        });
    } else {
        console.warn('‚ö†Ô∏è Shelf state is not an array:', shelfState);
    }

    // --- Apply activeJob ‡πÅ‡∏•‡∏∞ error state classes ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å cell ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å render lots ‡πÅ‡∏•‡πâ‡∏ß ---
    console.log(`üîç Checking activeJob:`, activeJob);
    if (activeJob) {
        const targetLevel = Number(activeJob.level);
        const targetBlock = Number(activeJob.block);
        const targetCell = document.getElementById(`cell-${targetLevel}-${targetBlock}`);
        
        if (targetCell) {
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° active-job class
            targetCell.classList.add('active-job');
            console.log(`üéØ Applied active-job class to L${targetLevel}B${targetBlock}`);
            
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error state
            if (activeJob.error && activeJob.errorType === 'WRONG_LOCATION') {
                targetCell.classList.add('error-target');
                console.log(`‚ùå Applied error-target class to L${targetLevel}B${targetBlock}`);
                
                // ‡πÄ‡∏û‡∏¥‡πà‡∏° class error-source ‡πÉ‡∏´‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô‡∏ú‡∏¥‡∏î
                if (wrongLevel && wrongBlock) {
                    const wrongCell = document.getElementById(`cell-${wrongLevel}-${wrongBlock}`);
                    if (wrongCell) {
                        wrongCell.classList.add('error-source');
                        console.log(`üö® Applied error-source class to L${wrongLevel}B${wrongBlock}`);
                    }
                }
            }
        }
    }
}

/**
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î cell ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
 */
function updateCellSizes() {
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÇ‡∏´‡∏°‡∏î
    let cellHeight = 90;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï level containers
    const levelContainers = document.querySelectorAll('.shelf-level');
    levelContainers.forEach(container => {
        container.style.height = `${cellHeight}px`;
    });
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á cell ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö state classes ‡πÑ‡∏ß‡πâ
    const allCells = document.querySelectorAll('.shelf-cell');
    allCells.forEach(cell => {
        // ‡πÄ‡∏Å‡πá‡∏ö classes ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
        const currentClasses = cell.className;
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï style
        cell.style.height = '100%';
        
        // ‡∏Ñ‡∏∑‡∏ô classes
        cell.className = currentClasses;
    });
}

/**
 * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä shelf grid structure
 */
function refreshShelfGrid() {
    console.log('üîÑ Force refreshing shelf grid with config:', ShelfState.getShelfConfig());
    
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡πÉ‡∏´‡∏°‡πà
    localStorage.removeItem(ShelfState.GLOBAL_SHELF_STATE_KEY);
    
    const shelfGrid = document.getElementById('shelfGrid');
    if (shelfGrid) {
        createShelfGridStructure();
        ShelfState.initializeShelfState(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á state ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° config ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        renderShelfGrid();
        console.log('‚úÖ Shelf grid refreshed successfully');
    }
}

/**
 * Export functions for module usage
 */
if (typeof window !== 'undefined') {
    window.ShelfUI = {
        createShelfGridStructure,
        renderCellPreview,
        renderShelfGrid,
        updateCellSizes,
        refreshShelfGrid
    };
}