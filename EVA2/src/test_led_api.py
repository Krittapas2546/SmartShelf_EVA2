#!/usr/bin/env python3
"""
API Test ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö LED Controller ‡πÉ‡∏´‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô HTTP API
‡∏ó‡∏î‡∏™‡∏≠‡∏ö endpoints ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
"""

import requests
import time
import json

BASE_URL = "http://localhost:8000"

def test_led_clear():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö LED clear"""
    print("\nüßπ Testing LED Clear...")
    
    response = requests.post(f"{BASE_URL}/api/led/clear")
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ Clear success: {data}")
    else:
        print(f"‚ùå Clear failed: {response.text}")
    
    return response.status_code == 200

def test_led_control_single():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏µ"""
    print("\nüî¥ Testing Single LED Control...")
    
    test_cases = [
        {"level": "1", "block": "1", "color": "blue"},
        {"level": "1", "block": "2", "color": "red"}, 
        {"level": "2", "block": "1", "color": "green"},
        {"level": "2", "block": "2", "color": "yellow"},
    ]
    
    for case in test_cases:
        print(f"   Setting L{case['level']}B{case['block']} = {case['color']}")
        
        response = requests.post(
            f"{BASE_URL}/api/led/control",
            json=case,
            headers={"Content-Type": "application/json"}
        )
        
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Success: {data.get('position')} = {data.get('hex')}")
        else:
            print(f"   ‚ùå Failed: {response.text}")
        
        time.sleep(1)
    
    time.sleep(2)
    return True

def test_led_batch():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° LED ‡πÅ‡∏ö‡∏ö batch"""
    print("\nüì¶ Testing Batch LED Control...")
    
    # ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
    test_led_clear()
    time.sleep(0.5)
    
    batch_data = {
        "positions": [
            {"position": "L1B1", "r": 255, "g": 0, "b": 0},    # Red
            {"position": "L1B2", "r": 0, "g": 255, "b": 0},    # Green
            {"position": "L1B3", "r": 0, "g": 0, "b": 255},    # Blue
            {"position": "L2B1", "r": 255, "g": 255, "b": 0},  # Yellow
            {"position": "L2B2", "r": 255, "g": 0, "b": 255},  # Purple
        ],
        "clear_first": False  # ‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
    }
    
    response = requests.post(
        f"{BASE_URL}/api/led",
        json=batch_data,
        headers={"Content-Type": "application/json"}
    )
    
    print(f"Status: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ Batch success: {data.get('count')} LEDs set")
        for color_info in data.get('colors', []):
            print(f"   {color_info['position']} = {color_info['hex']}")
    else:
        print(f"‚ùå Batch failed: {response.text}")
    
    time.sleep(3)
    return response.status_code == 200

def test_job_scenario_api():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö scenario ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô API"""
    print("\nüéØ Testing Job Scenario via API...")
    
    # 1. ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå LED
    print("1. Clearing LEDs...")
    test_led_clear()
    time.sleep(0.5)
    
    # 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô (L2B3)
    print("2. Setting target position (L2B3) to blue...")
    response = requests.post(
        f"{BASE_URL}/api/led/control",
        json={"level": "2", "block": "3", "color": "blue"},
        headers={"Content-Type": "application/json"}
    )
    if response.status_code == 200:
        print("   ‚úÖ Target set to blue")
    time.sleep(2)
    
    # 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ú‡∏¥‡∏î (L1B1) - ‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°
    print("3. Adding red for wrong button (L1B1)...")
    response = requests.post(
        f"{BASE_URL}/api/led/control",
        json={"level": "1", "block": "1", "color": "red"},
        headers={"Content-Type": "application/json"}
    )
    if response.status_code == 200:
        print("   ‚úÖ Error red added")
    time.sleep(2)
    
    # 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ú‡∏¥‡∏î‡∏≠‡∏µ‡∏Å (L1B2)
    print("4. Adding another red for wrong button (L1B2)...")
    response = requests.post(
        f"{BASE_URL}/api/led/control",
        json={"level": "1", "block": "2", "color": "red"},
        headers={"Content-Type": "application/json"}
    )
    if response.status_code == 200:
        print("   ‚úÖ Another error red added")
    time.sleep(2)
    
    # 5. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏ñ‡∏π‡∏Å
    print("5. Changing target to green (success)...")
    response = requests.post(
        f"{BASE_URL}/api/led/control",
        json={"level": "2", "block": "3", "color": "green"},
        headers={"Content-Type": "application/json"}
    )
    if response.status_code == 200:
        print("   ‚úÖ Target changed to green")
    time.sleep(3)
    
    # 6. ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    print("6. Job completed - clearing all...")
    test_led_clear()
    
    print("‚úÖ Job scenario completed")

def test_debug_endpoints():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö debug endpoints"""
    print("\nüîç Testing Debug Endpoints...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö debug mapping
    debug_data = {
        "test_type": "mapping",
        "show_green": False
    }
    
    response = requests.post(
        f"{BASE_URL}/api/led/debug",
        json=debug_data,
        headers={"Content-Type": "application/json"}
    )
    
    print(f"Debug mapping status: {response.status_code}")
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ Debug success: {data.get('message')}")
        for result in data.get('test_results', []):
            print(f"   {result['position']}: {result['color']} RGB{result['rgb']}")
    else:
        print(f"‚ùå Debug failed: {response.text}")

def test_error_cases():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö error cases"""
    print("\n‚ö†Ô∏è Testing Error Cases...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    print("1. Testing invalid position...")
    response = requests.post(
        f"{BASE_URL}/api/led/control",
        json={"level": "99", "block": "99", "color": "red"},
        headers={"Content-Type": "application/json"}
    )
    print(f"   Invalid position status: {response.status_code} (should be 400 or 500)")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏µ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á  
    print("2. Testing invalid color...")
    response = requests.post(
        f"{BASE_URL}/api/led/control",
        json={"level": "1", "block": "1", "color": "invalid_color"},
        headers={"Content-Type": "application/json"}
    )
    print(f"   Invalid color status: {response.status_code} (should work with default)")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üß™ LED Controller API Test Suite")
    print(f"üåê Base URL: {BASE_URL}")
    
    try:
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        print("\n" + "="*50)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        test_led_clear()
        time.sleep(1)
        
        test_led_control_single()
        time.sleep(1)
        
        test_led_batch()
        time.sleep(1)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö scenario
        test_job_scenario_api()
        time.sleep(1)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö debug
        test_debug_endpoints()
        time.sleep(1)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö error cases
        test_error_cases()
        
        print("\n‚úÖ All API tests completed!")
        
        # ‡∏•‡πâ‡∏≤‡∏á LED ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        test_led_clear()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Test interrupted by user")
    except requests.exceptions.ConnectionError:
        print(f"\n‚ùå Cannot connect to {BASE_URL}")
        print("   Make sure the server is running!")
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("\nüîö API test suite finished")

if __name__ == "__main__":
    main()